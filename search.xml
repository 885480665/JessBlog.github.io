<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有趣的Linux彩蛋和游戏</title>
      <link href="/2023/08/10/%E6%9C%89%E8%B6%A3%E7%9A%84Linux%E5%BD%A9%E8%9B%8B%E5%92%8C%E6%B8%B8%E6%88%8F/"/>
      <url>/2023/08/10/%E6%9C%89%E8%B6%A3%E7%9A%84Linux%E5%BD%A9%E8%9B%8B%E5%92%8C%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>40个有趣的Linux命令行彩蛋和游戏，让你假装成日理万机的黑客高手。附一键安装脚本，在树莓派和ubuntu云主机上亲测成功，有些还可以在Windows的DOS命令行中运行。</p><p><a href="https://www.bilibili.com/video/av37657133">本文配套B站视频：40个有趣的Linux命令行彩蛋和游戏</a></p><p>作者：张子豪（同济大学在读研究生）</p><p>关注微信公众号 <strong>人工智能小技巧</strong> 回复 <strong>linux有趣命令</strong><br>即可看到本文最新版。</p><p>知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1032626015746502656">人工智能小技巧</a>，所有文章欢迎转载！</p><p>简书专栏：<a href="https://www.jianshu.com/u/38cccf09b515">人工智能小技巧</a></p><p>Bilibili视频：<a href="https://space.bilibili.com/1900783/#/">同济子豪兄</a></p><p>张子豪写于2018-11-25</p><p>2018-12-8发布</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13714448-777806bcc005bb31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toilet命令彩色字"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-660f85e3aeb6a9bf.gif?imageMogr2/auto-orient/strip" alt="高大上黑客仪表盘"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-1921727182271686.gif?imageMogr2/auto-orient/strip" alt="hollywood命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-953feec6877d32ca.gif?imageMogr2/auto-orient/strip" alt="字符串水族馆"></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E4%B8%80%E9%94%AE%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%9C%AC%E6%96%87%E5%85%A8%E9%83%A8%E5%91%BD%E4%BB%A4%E6%89%80%E9%9C%80%E7%8E%AF%E5%A2%83">一键下载安装配置本文全部命令所需环境</a></li><li><a href="#%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD%E5%AD%97%E8%8A%82%E6%95%B0%E6%8D%AE%E6%B5%81%E5%81%87%E8%A3%85%E8%87%AA%E5%B7%B1%E6%98%AF%E9%BB%91%E5%AE%A2%E9%AB%98%E6%89%8B%E6%97%A0%E5%AD%94%E4%B8%8D%E5%85%A5">1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入</a></li><li><a href="#%E9%AB%98%E5%A4%A7%E4%B8%8A%E4%BB%AA%E8%A1%A8%E7%9B%98blessed-contrib%E5%81%87%E8%A3%85%E8%87%AA%E5%B7%B1%E6%8C%87%E7%82%B9%E6%B1%9F%E5%B1%B1%E7%BA%B5%E6%A8%AA%E6%8D%AD%E9%98%96">2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖</a></li><li><a href="#%E9%AB%98%E5%A4%A7%E4%B8%8A%E4%BB%AA%E8%A1%A8%E7%9B%98hollywood%E5%81%87%E8%A3%85%E8%87%AA%E5%B7%B1%E6%97%A5%E7%90%86%E4%B8%87%E6%9C%BA%E5%AE%B5%E8%A1%A3%E6%97%B0%E9%A3%9F">3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食</a></li><li><a href="#%E8%BF%BD%E9%80%90%E9%BC%A0%E6%A0%87%E7%9A%84%E5%B0%8F%E7%8C%ABoneko">4、追逐鼠标的小猫oneko</a></li><li><a href="#ascii%E8%89%BA%E6%9C%AF%E6%A1%86box%E5%91%BD%E4%BB%A4">5、ASCII艺术框：box命令</a></li><li><a href="#%E7%87%83%E8%B5%B7%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E7%81%ABaafire">6、燃起字符串大火aafire</a></li><li><a href="#%E7%81%AB%E8%BD%A6strem-locomotive">7、火车：Strem Locomotive</a></li><li><a href="#%E7%9B%AF%E7%9D%80%E9%BC%A0%E6%A0%87%E7%9C%8B%E7%9A%84%E5%A4%A7%E7%9C%BC%E7%9D%9B">8、盯着鼠标看的大眼睛</a></li><li><a href="#%E8%89%BA%E6%9C%AF%E5%AD%97%E7%94%9F%E6%88%90%E5%99%A8toilet">9、艺术字生成器toilet</a></li><li><a href="#%E8%89%BA%E6%9C%AF%E5%AD%97%E7%94%9F%E6%88%90%E5%99%A8figlet">10、艺术字生成器figlet</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%86%E9%A2%91%E5%9B%9E%E5%BD%92%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E4%B8%8A%E5%8F%A4%E6%97%B6%E4%BB%A3">11、字符串视频——回归计算机的上古时代</a></li><li><a href="#%E8%BE%93%E5%87%BA%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80%E5%8F%A4%E8%AF%97%E8%AF%8D">12、输出名人名言、古诗词</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B0%B4%E6%97%8F%E9%A6%86asciiquarium">13、字符串水族馆：ASCIIquarium</a></li><li><a href="#%E4%BC%9A%E8%AF%B4%E8%AF%9D%E7%9A%84%E7%89%9B">14、会说话的牛</a></li><li><a href="#%E4%BC%9A%E8%AF%B4%E8%AF%9D%E7%9A%84%E7%89%9B2">15、会说话的牛2</a></li><li><a href="#%E6%97%A5%E5%8E%86">16、日历</a></li><li><a href="#yes%E5%91%BD%E4%BB%A4">17、yes命令</a></li><li><a href="#%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0">18、分解因数</a></li><li><a href="#screenfetch%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E4%BF%A1%E6%81%AF">19、screenfetch:显示系统、主题信息</a></li><li><a href="#linux%E5%90%84%E5%8F%91%E8%A1%8C%E7%89%88logo%E5%9B%BE%E7%89%87%E5%8F%8A%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF">20、linux各发行版logo图片及系统信息</a></li><li><a href="#%E5%9B%BE%E7%89%87%E8%BD%ACascii%E7%94%BB%E9%A3%8E">21、图片转ASCII画风</a></li><li><a href="#%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E5%91%BD%E4%BB%A4">22、反转字符命令</a></li><li><a href="#%E6%89%93%E5%AD%97%E6%9C%BApv%E5%91%BD%E4%BB%A4%E5%AD%97%E5%B9%95%E4%B8%80%E4%B8%AA%E4%B8%AA%E5%8C%80%E9%80%9F%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5">23、打字机pv命令：字幕一个个匀速显示出来</a></li><li><a href="#%E4%BB%8E%E5%88%A0%E5%BA%93%E5%88%B0%E8%B7%91%E8%B7%AF-sudo-rm--rf">24、从删库到跑路 sudo rm -rf &#x2F;*</a></li><li><a href="#%E6%92%AD%E6%94%BE%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98">25、播放星球大战</a></li><li><a href="#%E8%AE%A9%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%B4%E8%AF%9D">26、让命令行说话</a></li><li><a href="#%E9%9A%8F%E6%9C%BA%E4%BA%A7%E7%94%9F%E4%BA%BA%E5%90%8D%E4%B8%8E%E5%9C%B0%E5%9D%80">27、随机产生人名与地址</a></li><li><a href="#%E8%B6%85%E7%BA%A7%E7%89%9B%E5%8A%9B%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%BD%A9%E8%9B%8B">28、超级牛力——包管理器的彩蛋</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fbastet%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97">29、命令行游戏bastet：俄罗斯方块</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fninvaders%E5%A4%AA%E7%A9%BA%E5%85%A5%E4%BE%B5%E8%80%85">30、命令行游戏ninvaders：太空入侵者</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fpacman4console%E5%90%83%E8%B1%86%E4%BA%BA">31、命令行游戏pacman4console：吃豆人</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fnsnake%E8%B4%AA%E5%90%83%E8%9B%87">32、命令行游戏nSnake：贪吃蛇</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fgreed%E8%B5%A2%E8%80%85%E9%80%9A%E5%90%83">33、命令行游戏Greed：赢者通吃</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fair-traffic-controller%E7%A9%BA%E4%B8%AD%E5%A1%94%E5%8F%B0%E6%8E%A7%E5%88%B6">34、命令行游戏Air Traffic<br>Controller：空中塔台控制</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fbackgammon%E5%8F%8C%E9%99%86%E6%A3%8B">35、命令行游戏backgammon：双陆棋</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8Fmoonbuggy%E6%9C%88%E7%90%83%E6%88%98%E8%BD%A6">36、命令行游戏moonbuggy：月球战车</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8F2048">37、命令行游戏2048</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B9%9F%E8%83%BD%E8%81%94%E6%9C%BA%E7%8E%A9%E7%BD%91%E6%B8%B8tron">38、命令行也能联机玩网游：Tron</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%B8%E6%88%8F%E5%B7%A8%E6%B4%9E%E5%86%92%E9%99%A9">39、命令行游戏：巨洞冒险</a></li><li><a href="#%E6%89%93%E5%8D%B0%E5%9C%86%E5%91%A8%E7%8E%87%E5%90%8E%E5%B0%8F%E6%95%B0%E7%82%B9%E8%8B%A5%E5%B9%B2%E4%BD%8D">40、打印圆周率后小数点若干位</a></li><li><a href="#%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB%E4%B8%8E%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">扩展阅读与参考文献</a></li></ul><h1 id="一键下载安装配置本文全部命令所需环境"><a href="#一键下载安装配置本文全部命令所需环境" class="headerlink" title="一键下载安装配置本文全部命令所需环境"></a>一键下载安装配置本文全部命令所需环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">git clone https://github.com/TommyZihao/linux-funny-command.git</span><br><span class="line">cd linux-funny-command</span><br><span class="line">sudo chmod 777 1.sh</span><br><span class="line">./1.sh</span><br></pre></td></tr></table></figure><p>运行这个脚本文件大概需要十几分钟时间，如果你不想安装全部命令，可以按后文的介绍手动安装相应的命令。</p><p>如果你运行完了这个脚本，只需输入每条命令代码框中最后的运行命令就可以执行命令啦。</p><h1 id="1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入"><a href="#1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入" class="headerlink" title="1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入"></a>1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入</h1><p>在命令行中输入以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmatrix</span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-92f96d6586936f3e.gif?imageMogr2/auto-orient/strip" alt="cmatrix字节流效果"></p><p>还可输入参数控制颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmatric -C red</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-406fef5a59b0446e.gif?imageMogr2/auto-orient/strip" alt="cmatrix红色字节流"></p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>在《黑客帝国》电影里的字节流其实是该片美术指导Simon<br>Whitley的日本妻子菜谱上的片假名。</p></blockquote><h1 id="2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖"><a href="#2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖" class="headerlink" title="2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖"></a>2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">git clone https://github.com/yaronn/blessed-contrib.git</span><br><span class="line">cd blessed-contrib</span><br><span class="line">npm install</span><br><span class="line">node ./examples/dashboard.js</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-660f85e3aeb6a9bf.gif?imageMogr2/auto-orient/strip" alt="高大上黑客仪表盘"></p><blockquote><p><a href="https://github.com/yaronn/blessed-contrib">blessed-contrib项目主页</a></p><p>建议在云服务器或虚拟机上运行这个命令，在树莓派上运行可能会出问题。</p></blockquote><h1 id="3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食"><a href="#3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食" class="headerlink" title="3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食"></a>3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食</h1><p>Dustin Kirkland<br>利用一个长途飞行的时间，编写了这个炫酷、有趣但也没什么实际作用的软件。</p><p>Ubuntu操作系统可以直接通过以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hollywood</span><br><span class="line">hollywood</span><br></pre></td></tr></table></figure><p>在其它Linux发行版中，可以通过以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:hollywood/ppa</span><br><span class="line">sudo apt-get install hollywood</span><br><span class="line">sudo apt-get install byobu</span><br><span class="line">hollywood</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-7f75cabe6d2f5560.gif?imageMogr2/auto-orient/strip" alt="hollywood命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-1921727182271686.gif?imageMogr2/auto-orient/strip" alt="hollywood命令"></p><blockquote><p><a href="https://github.com/dustinkirkland/hollywood">hollywood项目主页</a></p></blockquote><h1 id="4、追逐鼠标的小猫oneko"><a href="#4、追逐鼠标的小猫oneko" class="headerlink" title="4、追逐鼠标的小猫oneko"></a>4、追逐鼠标的小猫oneko</h1><p>在桌面的命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oneko</span><br><span class="line">oneko</span><br></pre></td></tr></table></figure><p>然后输入<code>oneko</code>，即可看到效果。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>注意，本命令只能在桌面所在的命令行界面输入，在远程ssh界面会显示“oneko:Can’t<br>open display”</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13714448-9c07f52aa2939f25.gif?imageMogr2/auto-orient/strip" alt="oneko命令：小猫追鼠标"></p><h1 id="5、ASCII艺术框：box命令"><a href="#5、ASCII艺术框：box命令" class="headerlink" title="5、ASCII艺术框：box命令"></a>5、ASCII艺术框：box命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install boxes</span><br><span class="line">echo &quot;Tongji Univerisity&quot; | boxes</span><br><span class="line">echo &quot;Tongji Univerisity&quot; | boxes -d dog</span><br><span class="line">fortune | boxes -d cat | lolcat</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-e533a44e5f2bbe26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="box命令"></p><h1 id="6、燃起字符串大火aafire"><a href="#6、燃起字符串大火aafire" class="headerlink" title="6、燃起字符串大火aafire"></a>6、燃起字符串大火aafire</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaa-bin  </span><br><span class="line">aafire</span><br></pre></td></tr></table></figure><p>然后输入 <code>aafire</code>，即可看到效果</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-cb38f19a1221c7a1.gif?imageMogr2/auto-orient/strip" alt="aafire字符串大火"></p><h1 id="7、火车：Strem-Locomotive"><a href="#7、火车：Strem-Locomotive" class="headerlink" title="7、火车：Strem Locomotive"></a>7、火车：Strem Locomotive</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sl</span><br></pre></td></tr></table></figure><p>然后输入 <code>sl</code>，即可看到效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-7afaccc26583811d.gif?imageMogr2/auto-orient/strip" alt="sl命令：字符串火车"></p><p>输入<code>sl-h</code>可以看到彩蛋（没有空格）</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-eb99852eeb36aa5b.gif?imageMogr2/auto-orient/strip" alt="字符串火车命令彩蛋"></p><blockquote><p>这个命令其实是在用户把ls命令输错成sl命令的时候准备的彩蛋。</p></blockquote><h1 id="8、盯着鼠标看的大眼睛"><a href="#8、盯着鼠标看的大眼睛" class="headerlink" title="8、盯着鼠标看的大眼睛"></a>8、盯着鼠标看的大眼睛</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install x11-apps</span><br></pre></td></tr></table></figure><p>然后输入 <code>xeyes</code>，回车，即可看到效果：一双紧盯着鼠标所在位置的大眼睛。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-69733edb8e3d12c9.gif?imageMogr2/auto-orient/strip" alt="xeyes大眼睛命令"></p><h1 id="9、艺术字生成器toilet"><a href="#9、艺术字生成器toilet" class="headerlink" title="9、艺术字生成器toilet"></a>9、艺术字生成器toilet</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install toilet</span><br></pre></td></tr></table></figure><p>然后输入下面任意一行命令，通过在命令中加-f更换字体或滤镜，你可以把命令里的<code>Tongji University</code>换成你想要转换的字符。</p><p>案例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-4ab6cce86ecf5f06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toilet命令1"></p><p>案例2 双色字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet -f mono12 -F metal Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-e49e74b6445a50d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toilet命令双色字"></p><p>案例3 彩色字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet -f mono12 -F gay Tongji University</span><br></pre></td></tr></table></figure><p>输入<code>man toilet</code>查看更多帮助，按<code>q</code>退出。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-777806bcc005bb31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toilet命令彩色字"></p><h1 id="10、艺术字生成器figlet"><a href="#10、艺术字生成器figlet" class="headerlink" title="10、艺术字生成器figlet"></a>10、艺术字生成器figlet</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install figlet</span><br></pre></td></tr></table></figure><p>然后输入下面任意一行命令，通过在命令中加-f更换字体或滤镜，你可以把命令里的<code>Tongji University</code>换成你想要转换的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">figlet Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-205e39c52eed91a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="figlet命令1"></p><h1 id="11、字符串视频——回归计算机的上古时代"><a href="#11、字符串视频——回归计算机的上古时代" class="headerlink" title="11、字符串视频——回归计算机的上古时代"></a>11、字符串视频——回归计算机的上古时代</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bb</span><br></pre></td></tr></table></figure><p>然后输入<br><code>bb</code>，选择<code>y</code>加音乐，选择<code>8</code>继续，即可看到一段用字符串制作的视频，讲述了视频作者的生涯和使用Linux操作系统的历程，这段视频制作于1997年，基于AAlib平台制作。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>这段视频的音乐很带感哦~</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13714448-7420604404205ad9.gif?imageMogr2/auto-orient/strip" alt="bb命令：字符串视频"></p><h1 id="12、输出名人名言、古诗词"><a href="#12、输出名人名言、古诗词" class="headerlink" title="12、输出名人名言、古诗词"></a>12、输出名人名言、古诗词</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fortune fortune-zh</span><br></pre></td></tr></table></figure><p>然后输入 <code>fortune</code>，即可看到效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-345cc951023cc6d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fortune命令"></p><blockquote><p>可以把这个程序设置成每次开机自动启动，每次你登陆的时候就能看到一条新的名人名言或唐诗宋词了。</p></blockquote><h1 id="13、字符串水族馆：ASCIIquarium"><a href="#13、字符串水族馆：ASCIIquarium" class="headerlink" title="13、字符串水族馆：ASCIIquarium"></a>13、字符串水族馆：ASCIIquarium</h1><p>第一步：安装各种依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurses-perl</span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf Term-Animation-2.4.tar.gz</span><br><span class="line">cd Term-Animation-2.4/</span><br><span class="line"></span><br><span class="line">sudo perl Makefile.PL &amp;&amp;  make &amp;&amp;   make test</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>第二步：安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">sudo wget https://robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</span><br></pre></td></tr></table></figure><p>如果显示文件下载失败，可以点击<code>https://robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</code>下载压缩包，然后通过FileZilla等文件远程传输软件传输到&#x2F;tmp文件夹中。</p><p>然后继续执行下列命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf asciiquarium.tar.gz</span><br><span class="line">cd asciiquarium_1.1/</span><br><span class="line">sudo cp asciiquarium /usr/local/bin</span><br><span class="line">sudo chmod 0755 /usr/local/bin/asciiquarium</span><br><span class="line">asciiquarium</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-953feec6877d32ca.gif?imageMogr2/auto-orient/strip" alt="字符串水族馆"></p><blockquote><p><a href="https://robobunny.com/projects/asciiquarium/html/?page=0">ASCIIquarium项目主页</a></p></blockquote><h1 id="14、会说话的牛"><a href="#14、会说话的牛" class="headerlink" title="14、会说话的牛"></a>14、会说话的牛</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cowsay</span><br></pre></td></tr></table></figure><p>然后输入 <code>cowsay “Hello Tongji Univerisity”</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-91cadd9c91f009d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cowsay命令"></p><p>只需用 <code>-l</code>参数就能看到它能提供的所有动物。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay -l</span><br></pre></td></tr></table></figure><p>会输出如下人物，你可以通过<code>-f</code>参数加人物名字来更换说话人物：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Cow files in /usr/share/cowsay/cows:</span><br><span class="line">apt beavis.zen bong bud-frogs bunny calvin cheese cock cower daemon default</span><br><span class="line">dragon dragon-and-cow duck elephant elephant-in-snake eyes flaming-sheep</span><br><span class="line">ghostbusters gnu head-in hellokitty kiss kitty koala kosh luke-koala</span><br><span class="line">mech-and-cow meow milk moofasa moose mutilated pony pony-smaller ren sheep</span><br><span class="line">skeleton snowman sodomized-sheep stegosaurus stimpy suse three-eyes turkey</span><br><span class="line">turtle tux unipony unipony-smaller vader vader-koala www</span><br></pre></td></tr></table></figure><p>比如更换成hellokitty：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay -f dragon &#x27;Hello Tongji Univerisity&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-dcf0c2ce485bbd5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更换说话的动物"></p><p>也可以利用管道命令，将fortune生成的名人名言在cowsay中输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fortune | cowsay</span><br></pre></td></tr></table></figure><p>加个颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lolcat</span><br></pre></td></tr></table></figure><p>利用管道命令，让彩色的恐龙大哥说彩色的唐诗：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fortune | cowsay -f stegosaurus | lolcat</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-11d24b0de66c5007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="利用管道命令让彩色动物说话"></p><h1 id="15、会说话的牛2"><a href="#15、会说话的牛2" class="headerlink" title="15、会说话的牛2"></a>15、会说话的牛2</h1><blockquote><p>注意，本命令只能在桌面所在的命令行界面输入，在远程ssh命令行界面输入会显示“Can’t<br>open display”</p></blockquote><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xcowsay</span><br></pre></td></tr></table></figure><p>然后输入 <code>xcowsay “Hello Tongji Univerisity欢迎来同济大学”</code></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-adab2588c11df68b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xcowsay说中文"></p><h1 id="16、日历"><a href="#16、日历" class="headerlink" title="16、日历"></a>16、日历</h1><p>直接在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 12 2018</span><br></pre></td></tr></table></figure><p>即可看到2018年12月的日历。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-d8b38641704a03c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日历命令"></p><p>有趣的是，如果你输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 9 1752</span><br></pre></td></tr></table></figure><p>你会发现这个月少了11天，这是因为当时大英帝国美洲殖民地的历法从凯撒历法换成了格里高利历法，凯撒历法要迟11天，所以这11天成了日历上的空白期。</p><p><a href="http://blog.sina.com.cn/s/blog_8713f2c501013md6.html">1752年9月为什么少了11天？</a></p><h1 id="17、yes命令"><a href="#17、yes命令" class="headerlink" title="17、yes命令"></a>17、yes命令</h1><p>直接在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yes Tongji University</span><br><span class="line">yes Tongji University | lolcat</span><br></pre></td></tr></table></figure><p>就会看到无穷无尽输出的Tongji University</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-cb061c5f4e9a2dcc.gif?imageMogr2/auto-orient/strip" alt="yes命令"></p><h1 id="18、分解因数"><a href="#18、分解因数" class="headerlink" title="18、分解因数"></a>18、分解因数</h1><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factor 60</span><br></pre></td></tr></table></figure><p>即可看到60的分解质因数的结果</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-552691f5ab69af8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="factor命令：分解质因数"></p><h1 id="19、screenfetch-显示系统、主题信息"><a href="#19、screenfetch-显示系统、主题信息" class="headerlink" title="19、screenfetch:显示系统、主题信息"></a>19、screenfetch:显示系统、主题信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install screenfetch</span><br><span class="line">screenfetch</span><br></pre></td></tr></table></figure><p>在开源社区或程序员社区提问时，可以通过这条命令，直接截图，就能很清晰地描述自己的系统环境。</p><p>在Ubuntu云服务器上运行：</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-11ec8a07f22a4846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在Ubuntu云服务器上运行screenfetch命令"></p><p>在树莓派上运行：</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-47504f3bebc05a58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="树莓派上运行screenfetch命令"></p><h1 id="20、linux各发行版logo图片及系统信息"><a href="#20、linux各发行版logo图片及系统信息" class="headerlink" title="20、linux各发行版logo图片及系统信息"></a>20、linux各发行版logo图片及系统信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linuxlogo</span><br><span class="line">linux_logo</span><br><span class="line">linux_logo -f -L list</span><br><span class="line">sudo apt-get install neofetch</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>在ubuntu云服务器上运行linux_logo</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-ba7b79fa4009f951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在ubuntu云服务器上运行linux\_logo"></p><p>在树莓派上运行linux_logo</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-d03ff4b5604d5309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在树莓派上运行linux\_logo命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-f4549aa6f834cba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所有支持打印logo的linux发行版"></p><p>循环打印所有支持打印的图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..30&#125;;do linux_logo -f -L $i;sleep 0.5;done</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-eca7597c796ced96.gif?imageMogr2/auto-orient/strip" alt="打印所有支持的logo"></p><h1 id="21、图片转ASCII画风"><a href="#21、图片转ASCII画风" class="headerlink" title="21、图片转ASCII画风"></a>21、图片转ASCII画风</h1><blockquote><p>这条命令在树莓派上运行会出问题，建议在云主机或虚拟机上运行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview imagemagick</span><br><span class="line"></span><br><span class="line">wget http://labfile.oss.aliyuncs.com/courses/1/Linus.png</span><br><span class="line"></span><br><span class="line">asciiview Linus.png</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-7db67728f6ca8b3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux之父：Linus的照片"></p><p>你可以把wget后面的链接换成任意图片的URL。</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.shumeipai.wang/bingbingbing.jpg</span><br><span class="line">asciiview bingbingbing.jpg</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-27bab579984d63cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="范冰冰照片ASCII字符串处理"></p><h1 id="22、反转字符命令"><a href="#22、反转字符命令" class="headerlink" title="22、反转字符命令"></a>22、反转字符命令</h1><p>在命令行中输入<code>rev</code>，打开rev界面，然后输入任意字符，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am a student in Tongji Univerisity</span><br></pre></td></tr></table></figure><p>按回车，即可看到字符反转之后的结果</p><p>按<code>ctrl</code>+<code>c</code>退出rev界面回到命令行界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;I am a student in Tongji Univerisity&quot; | rev</span><br></pre></td></tr></table></figure><p>将一句话中所有单词的顺序反转,但在单词内部字母顺序不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;I am a student in Tongji University&quot; | rev | tr &#x27; &#x27; &#x27;\n&#x27; | tac | tr &#x27;\n&#x27; &#x27; &#x27;| rev</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-1953b01188a746e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rev命令"></p><h1 id="23、打字机pv命令：字幕一个个匀速显示出来"><a href="#23、打字机pv命令：字幕一个个匀速显示出来" class="headerlink" title="23、打字机pv命令：字幕一个个匀速显示出来"></a>23、打字机pv命令：字幕一个个匀速显示出来</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pv</span><br><span class="line">echo &quot;Tongji Opensource&quot; | pv -qL 10</span><br><span class="line">cal | pv -qL 10</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-bc6f86e12e776681.gif?imageMogr2/auto-orient/strip" alt="pv打字机命令"></p><h1 id="24、从删库到跑路-sudo-rm-rf-x2F"><a href="#24、从删库到跑路-sudo-rm-rf-x2F" class="headerlink" title="24、从删库到跑路 sudo rm -rf &#x2F;*"></a>24、从删库到跑路 sudo rm -rf &#x2F;*</h1><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1539792611926&di=a261ba9fadfa7ba727ef2a7c724016e1&imgtype=0&src=http://i0.hdslb.com/bfs/archive/b6d4f8aa58841f6e8674c3bd46126e5f8ad5fc7f.jpg" alt="sudo rm -rf/"></p><blockquote><p>友情提示：千万不要轻易尝试这个命令，特别是在运行有网站服务器、数据库的Linux主机上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /*</span><br></pre></td></tr></table></figure><ul><li>sudo：获取root管理员权限</li><li>rm：remove，即删除</li><li>-rf：r表示递归删除，即删除所有的子目录，f表示不需要再进行确认</li><li>&#x2F;：home目录</li><li>*：所有文件</li></ul><p><strong>也就是说，这条命令是删除这台Linux主机上的所有文件，甚至包括开机文件</strong></p><p>关于这条命令的一些有趣的图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-057901398c109d38.GIF?imageMogr2/auto-orient/strip" alt="删库大爆炸"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-9108c4583143f501.GIF?imageMogr2/auto-orient/strip" alt="从删库到跑路1"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-e42e61a486b7d1fd.GIF?imageMogr2/auto-orient/strip" alt="数据库删了肯定要跑路啊"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-77ce9a2551b16ad4.GIF?imageMogr2/auto-orient/strip" alt="从删库到跑路2"></p><h1 id="25、播放星球大战"><a href="#25、播放星球大战" class="headerlink" title="25、播放星球大战"></a>25、播放星球大战</h1><p>这条命令在windows上都可以运行</p><p>1、打开控制面板，找到”启动或关闭Windows功能“，然后打开Telnet客户端。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-e13443f55165768d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制面板"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-98d0012f082f5cc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开Telnet应用"></p><p>2、用管理员模式打开DOS命令行界面，输入以下命令，回车。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-212d2be6bf953cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入windows命令行"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet towel.blinkenlights.nl</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-a9b65eda982e05e4.gif?imageMogr2/auto-orient/strip" alt="字符串星球大战"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-bb927898d4bd7a3a.gif?imageMogr2/auto-orient/strip" alt="字符串星球大战"></p><h1 id="26、让命令行说话"><a href="#26、让命令行说话" class="headerlink" title="26、让命令行说话"></a>26、让命令行说话</h1><blockquote><p>运行这个命令不能通过远程连接，必须通过音响</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install espeak</span><br><span class="line">espeak &#x27;Hello my dariling&#x27;</span><br></pre></td></tr></table></figure><h1 id="27、随机产生人名与地址"><a href="#27、随机产生人名与地址" class="headerlink" title="27、随机产生人名与地址"></a>27、随机产生人名与地址</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rig</span><br><span class="line">rig</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-e2b6b7c5e45ce7bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rig命令"></p><h1 id="28、超级牛力——包管理器的彩蛋"><a href="#28、超级牛力——包管理器的彩蛋" class="headerlink" title="28、超级牛力——包管理器的彩蛋"></a>28、超级牛力——包管理器的彩蛋</h1><p>在Ubuntu和Debian上，apt-get包管理器内嵌着一个彩蛋。<br>如果你在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get help</span><br></pre></td></tr></table></figure><p>在最后一行能找到</p><p>This APT has Super Cow Powers。</p><p>本APT具有超级牛力。</p><p>则说明你的系统可以运行这个菜单。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-13ff4a649e7ce51d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="&quot;超级牛力&quot;彩蛋"></p><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get moo</span><br></pre></td></tr></table></figure><p>即可看到这个彩蛋。</p><p>aptitiude包管理器也有类似的彩蛋</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aptitude moo</span><br><span class="line">aptitude moo -vv</span><br><span class="line">aptitude moo -vvv</span><br><span class="line">aptitude moo -vvvv</span><br><span class="line">aptitude moo -vvvvv</span><br><span class="line">aptitude moo -vvvvvv</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-f4d6aad28df0ea0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="apititude包管理器彩蛋"></p><blockquote><p>这个彩蛋的灵感来自于法国作家安托万·德·圣·埃克苏佩里童话小说《小王子》的第一章</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13714448-b08afa0b5cc8d6bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小王子插图：法国作家安托万·德·圣·埃克苏佩里童话小说"></p><h1 id="29、命令行游戏bastet：俄罗斯方块"><a href="#29、命令行游戏bastet：俄罗斯方块" class="headerlink" title="29、命令行游戏bastet：俄罗斯方块"></a>29、命令行游戏bastet：俄罗斯方块</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bastet</span><br><span class="line">bastet</span><br></pre></td></tr></table></figure><p>左右键控制方块移动，上键控制方块旋转。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-4187991a1d0416de.gif?imageMogr2/auto-orient/strip" alt="命令行游戏bastet：俄罗斯方块"></p><h1 id="30、命令行游戏ninvaders：太空入侵者"><a href="#30、命令行游戏ninvaders：太空入侵者" class="headerlink" title="30、命令行游戏ninvaders：太空入侵者"></a>30、命令行游戏ninvaders：太空入侵者</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ninvaders</span><br><span class="line">ninvaders</span><br></pre></td></tr></table></figure><p>按空格键发射子弹。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-cab4c13405bd2dd9.gif?imageMogr2/auto-orient/strip" alt="命令行游戏ninvaders：太空入侵者"></p><h1 id="31、命令行游戏pacman4console：吃豆人"><a href="#31、命令行游戏pacman4console：吃豆人" class="headerlink" title="31、命令行游戏pacman4console：吃豆人"></a>31、命令行游戏pacman4console：吃豆人</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pacman4console</span><br><span class="line">pacman4console</span><br></pre></td></tr></table></figure><p>使用方向键控制移动。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-29f0fdce7a5071c5.gif?imageMogr2/auto-orient/strip" alt="命令行游戏pacman4console：吃豆人"></p><h1 id="32、命令行游戏nSnake：贪吃蛇"><a href="#32、命令行游戏nSnake：贪吃蛇" class="headerlink" title="32、命令行游戏nSnake：贪吃蛇"></a>32、命令行游戏nSnake：贪吃蛇</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nsnake</span><br><span class="line">nsnake</span><br></pre></td></tr></table></figure><p>使用方向键控制。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-57c0b9360d55d9b0.gif?imageMogr2/auto-orient/strip" alt="nSnake贪吃蛇命令行小游戏"></p><h1 id="33、命令行游戏Greed：赢者通吃"><a href="#33、命令行游戏Greed：赢者通吃" class="headerlink" title="33、命令行游戏Greed：赢者通吃"></a>33、命令行游戏Greed：赢者通吃</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install greed</span><br><span class="line">greed</span><br></pre></td></tr></table></figure><p>数字表示下一步可前进的步数，游戏的目标是在咬到自己尾巴之前尽可能多走几步。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-f139804315451e0b.gif?imageMogr2/auto-orient/strip" alt="命令行游戏Greed：赢者通吃"></p><h1 id="34、命令行游戏Air-Traffic-Controller：空中塔台控制"><a href="#34、命令行游戏Air-Traffic-Controller：空中塔台控制" class="headerlink" title="34、命令行游戏Air Traffic Controller：空中塔台控制"></a>34、命令行游戏Air Traffic Controller：空中塔台控制</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bsdgames</span><br><span class="line">atc</span><br></pre></td></tr></table></figure><p>在玩之前，你可以先输入<code>man atc</code>查看这个游戏的说明文档。游戏的目标是通过一系列命令输入，引导飞机起飞和降落，进行空中塔台调度。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-be5ab52abe3e42f1.gif?imageMogr2/auto-orient/strip" alt="空中塔台调度游戏atc"></p><h1 id="35、命令行游戏backgammon：双陆棋"><a href="#35、命令行游戏backgammon：双陆棋" class="headerlink" title="35、命令行游戏backgammon：双陆棋"></a>35、命令行游戏backgammon：双陆棋</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bsdgames</span><br><span class="line">backgammon</span><br></pre></td></tr></table></figure><p>这是一款1997年制作的老游戏，游戏开始的时候可以阅读相关规则介绍。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-71ea0e1e0d7ba7f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行游戏双陆棋"></p><h1 id="36、命令行游戏moonbuggy：月球战车"><a href="#36、命令行游戏moonbuggy：月球战车" class="headerlink" title="36、命令行游戏moonbuggy：月球战车"></a>36、命令行游戏moonbuggy：月球战车</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install moon-buggy</span><br><span class="line">moon-buggy</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-d1cecec4d7ac19eb.gif?imageMogr2/auto-orient/strip" alt="命令行游戏moonbuggy：月球战车"></p><h1 id="37、命令行游戏2048"><a href="#37、命令行游戏2048" class="headerlink" title="37、命令行游戏2048"></a>37、命令行游戏2048</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/mevdschee/2048.c/master/2048.c</span><br><span class="line">gcc -o 2048 2048.c</span><br><span class="line">./2048</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-49fff6bd836aeffd.gif?imageMogr2/auto-orient/strip" alt="命令行游戏2048"></p><h1 id="38、命令行也能联机玩网游：Tron"><a href="#38、命令行也能联机玩网游：Tron" class="headerlink" title="38、命令行也能联机玩网游：Tron"></a>38、命令行也能联机玩网游：Tron</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh sshtron.zachlatta.com</span><br></pre></td></tr></table></figure><p>使用wasd四个键控制蛇的移动，游戏的目标是既不要咬到别人也不要咬到自己，活着的时间越长分数越高。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-a88c4f292ebcd0a8.gif?imageMogr2/auto-orient/strip" alt="命令行也能联机玩网游：Tron"></p><h1 id="39、命令行游戏：巨洞冒险"><a href="#39、命令行游戏：巨洞冒险" class="headerlink" title="39、命令行游戏：巨洞冒险"></a>39、命令行游戏：巨洞冒险</h1><p>巨洞冒险Colossal Cave Adventure，又名 ADVENT、Clossal Cave 或<br>Adventure，是八十年代初到九十年代末最受欢迎的基于文字的冒险游戏。在 1976<br>年，一个叫 Will Crowther<br>的程序员开发了这款游戏的一个早期版本，之后另一位叫 Don Woods<br>的程序员改进了这款游戏，为它添加了许多新元素，包括计分系统以及更多的幻想角色和场景。这款游戏最初是为<br>PDP-10<br>开发的，这是一种历史悠久的大型计算机。后来，它被移植到普通家用台式电脑上，比如<br>IBM PC 和 Commodore 64。游戏的最初版使用 Fortran<br>开发，之后在八十年代初它被微软加入到 MS-DOS 1.0 当中。</p><p>游戏的主要目标是找到一个传言中藏有大量宝藏和金子的洞穴并活着离开它。这款游戏的灵感主要来源于原作者<br>Will Crowther<br>丰富的洞穴探索的经历。他曾经经常在洞穴中冒险，特别是肯塔基州的猛犸洞Mammoth<br>Cave。因为游戏中的洞穴结构大体基于猛犸洞，你也许会注意到游戏中的场景和现实中的猛犸洞的相似之处。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-yaml libedit-dev</span><br><span class="line">sudo pip3 install PyYAML</span><br><span class="line">git clone https://gitlab.com/esr/open-adventure.git</span><br><span class="line">cd open-adventure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">advent</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/13714448-4c3cd5e758ac0d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令行游戏巨洞冒险"></p><h1 id="40、打印圆周率后小数点若干位"><a href="#40、打印圆周率后小数点若干位" class="headerlink" title="40、打印圆周率后小数点若干位"></a>40、打印圆周率后小数点若干位</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pi</span><br><span class="line">pi 50</span><br></pre></td></tr></table></figure><p>打印小数点后若干位的圆周率。</p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-5e6814eea9cdf956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆周率小数点后若干位"></p><h1 id="扩展阅读与参考文献"><a href="#扩展阅读与参考文献" class="headerlink" title="扩展阅读与参考文献"></a>扩展阅读与参考文献</h1><blockquote><p><a href="https://www.cnblogs.com/1394htw/p/6358737.html?utm_source=itdadao&utm_medium=referral">10个非常有趣的Linux命令</a></p><p><a href="https://www.cnblogs.com/1394htw/p/6358737.html?utm_source=itdadao&utm_medium=referral">超有趣的几个Linux命令，你都用过吗？</a></p><p><a href="https://blog.csdn.net/tq384998430/article/details/54925742">Linux中管道命令的用法</a></p><p><a href="https://aotu.io/notes/2016/11/22/figlet/">FIGlet初识</a></p><p><a href="https://github.com/ruanyf/fortunes">fortune中文格言库</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/04/fortune.html">阮一峰的网络日志：fortune<br>命令简介</a></p><p><a href="http://blog.sina.com.cn/s/blog_8713f2c501013md6.html">1752年9月为什么少了11天？</a></p><p><a href="https://www.cnblogs.com/Nice-Boy/p/6091307.html">Linux 奇技淫巧</a></p><p><a href="https://zhuanlan.zhihu.com/p/33267251">十大 Linux 命令行游戏</a></p><p><a href="https://blog.csdn.net/F8qG7f9YD02Pe/article/details/78994286">巨洞冒险：史上最有名的经典文字冒险游戏 | Linux<br>中国</a></p><p><a href="https://blog.csdn.net/jsjxy2009/article/details/39207595">Shell常识–基本函数和简单命令rev–总结自《Linux Shell<br>脚本攻略》</a></p><p><a href="https://blog.csdn.net/qq_41741971/article/details/82053290">意想不到的有趣linux命令18个，玩得溜</a></p><p><a href="https://blog.csdn.net/liudsl/article/details/79200134">apt 和<br>apt-get的区别</a></p><p><a href="https://github.com/yaronn/blessed-contrib">blessed-contrib项目主页</a></p><p><a href="https://github.com/dustinkirkland/hollywood">hollywood项目主页</a></p><p><a href="https://blog.csdn.net/crazygolf/article/details/48383869/">启用Windows中的Telnet功能一起看DOS版星球大战</a></p><p><a href="www.raspberry.org">树莓派官方网站</a></p><p><a href="https://www.raspberrypi.org/magpi">树莓派官方杂志MagPi（可免费下载PDF）</a></p><p><a href="https://github.com/TommyZihao/MagPi_Chinese">子豪兄翻译的MagPi杂志优质文章</a></p><p><a href="http://shumeipai.nxez.com/">树莓派实验室</a></p><p><a href="https://sspai.com/">少数派</a></p><p><a href="https://github.com/TommyZihao/ZihaoTutorialOfRaspberryPi">子豪兄的树莓派零基础教程<br>Github代码仓库</a></p><p><a href="https://github.com/TommyZihao">子豪兄的Github首页</a></p><p>作者介绍：</p><p>张子豪，同济大学在读研究生。微信公众号、知乎专栏：<strong>人工智能小技巧</strong>。</p><p>自媒体<strong>人工智能小技巧</strong>由同济大学在读研究生张子豪于2018年11月创立。包括微信公众号、知乎专栏、简书专栏、Bilibili视频专栏等。致力于用通俗易懂的大白话帮助零基础非计算机专业的初学者快速掌握人工智能、大数据可视化、区块链、Python趣味编程、树莓派智能硬件等前沿科技知识，并手把手指导新手迅速上手开发实战项目。</p><p>微信公众号：<strong>人工智能小技巧</strong></p><p>知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1032626015746502656"><strong>人工智能小技巧</strong></a></p><p>Bilibili视频：<a href="https://space.bilibili.com/1900783/#/">同济子豪兄</a></p><p>Github代码仓库:<a href="https://github.com/TommyZihao">TommyZihao</a></p><p>个人主页：<a href="http://www.python666.org/">www.python666.org</a></p><p><a href="https://mirrors.tongji.edu.cn/">同济大学开源软件协会</a><br><a href="https://baike.baidu.com/item/%E5%90%8C%E6%B5%8E%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%BF%B1%E4%B9%90%E9%83%A8/2952664">同济大学微软学生俱乐部</a><br><a href="http://www.qingxzd.com/front/article/cms/545850">西南人工智能爱好者联盟</a><br>重庆大学人工智能协会 <a href="www.maxoyed.com">重庆大学树莓派爱好者俱乐部</a></p></blockquote><p><img src="https://projects-static.raspberrypi.org/projects/raspberry-pi-getting-started/13aeb423985e6bacd5d798f5f206a644b7c250a3/en/images/pi-plug-in.gif" alt="树莓派接线"></p><p><img src="https://upload-images.jianshu.io/upload_images/13714448-9413183a2d79c2a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎加入树莓派全球开源社区"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S笔记整理</title>
      <link href="/2023/07/01/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
      <url>/2023/07/01/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes官网: <a href="https://kubernetes.io/zh-cn/">https://kubernetes.io/zh-cn/</a></p><h2 id="第一章-初识-Kubernetes"><a href="#第一章-初识-Kubernetes" class="headerlink" title="第一章 初识 Kubernetes"></a>第一章 初识 Kubernetes</h2><ul><li>Kubernetes 简介</li><li>为什么需要 Kubernetes</li><li>Kubernetes 能做什么</li><li>Kubernetes 不是什么?</li></ul><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><blockquote><p>摘取官网: <a href="https://kubernetes.io/zh-cn/docs/concepts/overview/">https://kubernetes.io/zh-cn/docs/concepts/overview/</a> </p></blockquote><p><strong>Kubernetes</strong> 这个名字源于希腊语，意为<code>舵手</code>或<code>飞行员</code>。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。 Kubernetes 建立在 <a href="https://research.google/pubs/pub43438">Google 大规模运行生产工作负载十几年经验</a>的基础上， 结合了社区中最优秀的想法和实践。</p><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20221227085420030.png" alt="image-20221227085420030"></p><p>Kubernetes 是一个可移植、可扩展的开源平台，用于<code>管理容器化的工作负载和服务，可促进声明式配置和自动化</code>。 Kubernetes 拥有一个庞大且快速增长的生态，其服务、支持和工具的使用范围相当广泛。</p><p>从 2014 年第一个版本发布以来，Kuberetes 迅速获得开源社区的追捧，包括 Red Hat、VMware 在内的很多有影响力的公司加入到开发和推广的阵营。目前 Kubernetes 已经成为发展最快、市场占有率最高的容器编排引攀产品。</p><h3 id="2-为什么需要-k8s"><a href="#2-为什么需要-k8s" class="headerlink" title="2 为什么需要 k8s"></a>2 为什么需要 k8s</h3><blockquote><p>摘取官网: <a href="https://kubernetes.io/zh-cn/docs/concepts/overview/">https://kubernetes.io/zh-cn/docs/concepts/overview/</a> </p></blockquote><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20221227090056000.png" alt="image-20221227090056000"></p><p><strong>传统部署时代：</strong></p><p>早期，各个组织是在物理服务器上运行应用程序。<code>由于无法限制在物理服务器中运行的应用程序资源使用，因此会导致资源分配问题</code>。 例如，如果在同一台物理服务器上运行多个应用程序， 则可能会出现一个应用程序占用大部分资源的情况，而导致其他应用程序的性能下降。 <code>一种解决方案是将每个应用程序都运行在不同的物理服务器上， 但是当某个应用程式资源利用率不高时，剩余资源无法被分配给其他应用程式， 而且维护许多物理服务器的成本很高</code>。</p><p><strong>虚拟化部署时代：</strong></p><p>因此，虚拟化技术被引入了。虚拟化技术允许你在单个物理服务器的 CPU 上运行多台虚拟机（VM）。 <code>虚拟化能使应用程序在不同 VM 之间被彼此隔离，且能提供一定程度的安全性， 因为一个应用程序的信息不能被另一应用程序随意访问</code>。</p><p>虚拟化技术能够更好地利用物理服务器的资源，并且因为可轻松地添加或更新应用程序， 而因此可以具有更高的可扩缩性，以及降低硬件成本等等的好处。 通过虚拟化，你可以将一组物理资源呈现为可丢弃的虚拟机集群。</p><p><code>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统</code>。</p><p><strong>容器部署时代：</strong></p><p>容器类似于 VM，但是更宽松的隔离特性，使容器之间可以共享操作系统（OS）。 因此，容器比起 VM 被认为是更轻量级的。且与 VM 类似，每个容器都具有自己的文件系统、CPU、内存、进程空间等。 由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。<code>容器的出现解决了应用和基础环境异构的问题，让应用可以做到一次构建，多次部署</code>。不可否认容器是打包和运行应用程序的好方式，因此容器方式部署变得流行起来。但随着容器部署流行，仅仅是基于容器的部署仍有一些问题没有解决:</p><ul><li>生产环境中， 你需要管理运行着应用程序的容器，并确保服务不会下线。 例如，如果一个容器发生故障，则你需要启动另一个容器。</li><li>高并发时，你需要启动多个应用程序容器为系统提高高可用，并保证多个容器能负载均衡。</li><li>在维护、升级版本时，你需要将运行应用程序容器从新部署，部署时必须对之前应用容器备份，一旦出现错误，需要手动启动之前容器保证系统运行。</li></ul><p><code>如果以上行为交由给系统处理，是不是会更容易一些？那么谁能做到这些?</code></p><h3 id="3-k8s-能做什么"><a href="#3-k8s-能做什么" class="headerlink" title="3 k8s 能做什么?"></a>3 k8s 能做什么?</h3><blockquote><p>摘取官网: <a href="https://kubernetes.io/zh-cn/docs/concepts/overview/">https://kubernetes.io/zh-cn/docs/concepts/overview/</a> </p></blockquote><p>这就是 Kubernetes 要来做的事情！ <code>Kubernetes 为你提供了一个可弹性运行分布式系统的框架</code>。 Kubernetes 会满足你的扩展要求、故障转移你的应用、提供部署模式等。Kubernetes 为你提供：</p><ul><li><p><strong>服务发现和负载均衡</strong></p><p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址来暴露容器。 如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p><strong>存储编排</strong></p><p>Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</p></li><li><p><strong>自动部署和回滚</strong></p><p>你可以使用 Kubernetes 描述已部署容器的所需状态， 它可以以受控的速率将实际状态更改为期望状态。 例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</p></li><li><p><strong>自动完成装箱计算&#x2F;自动资源调度</strong></p><p>你为 Kubernetes 提供许多节点组成的集群，在这个集群上运行容器化的任务。 你告诉 Kubernetes 每个容器需要多少 CPU 和内存 (RAM)。 Kubernetes 可以将这些容器按实际情况调度到你的节点上，以最佳方式利用你的资源。</p></li><li><p><strong>自我修复&#x2F;自愈能力</strong></p><p>Kubernetes 将重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器， 并且在准备好服务之前不将其通告给客户端。</p></li><li><p><strong>密钥与配置管理</strong></p><p>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p></li></ul><h3 id="4-k8s-不是什么"><a href="#4-k8s-不是什么" class="headerlink" title="4 k8s 不是什么?"></a>4 k8s 不是什么?</h3><p><code>Kubernetes 不是传统的、包罗万象的 PaaS（平台即服务）系统</code>。 由于 Kubernetes 是在容器级别运行，而非在硬件级别，它提供了 PaaS 产品共有的一些普遍适用的功能， 例如部署、扩展、负载均衡，允许用户集成他们的日志记录、监控和警报方案。 但是，<code>Kubernetes 不是单体式（monolithic）系统</code>，那些默认解决方案都是可选、可插拔的。 Kubernetes 为构建开发人员平台提供了基础，但是在重要的地方保留了用户选择权，能有更高的灵活性。</p><p>Kubernetes：</p><ul><li><p>不限制支持的应用程序类型。 Kubernetes 旨在支持极其多种多样的工作负载，包括无状态、有状态和数据处理工作负载。 如果应用程序可以在容器中运行，那么它应该可以在 Kubernetes 上很好地运行。</p></li><li><p>不部署源代码，也不构建你的应用程序。 持续集成（CI）、交付和部署（CI&#x2F;CD）工作流取决于组织的文化和偏好以及技术要求。</p></li><li><p>不提供应用程序级别的服务作为内置服务，例如中间件（例如消息中间件）、 数据处理框架（例如 Spark）、数据库（例如 MySQL）、缓存、集群存储系统 （例如 Ceph）。这样的组件可以在 Kubernetes 上运行，并且&#x2F;或者可以由运行在 Kubernetes 上的应用程序通过可移植机制（例如<a href="https://openservicebrokerapi.org/">开放服务代理</a>）来访问。</p></li><li><p>不是日志记录、监视或警报的解决方案。 它集成了一些功能作为概念证明，并提供了收集和导出指标的机制。</p></li><li><p>不提供也不要求配置用的语言、系统（例如 jsonnet），它提供了声明性 API， 该声明性 API 可以由任意形式的声明性规范所构成。</p></li><li><p>不提供也不采用任何全面的机器配置、维护、管理或自我修复系统。</p></li><li><p>此外，Kubernetes 不仅仅是一个编排系统，实际上它消除了编排的需要。 编排的技术定义是执行已定义的工作流程：首先执行 A，然后执行 B，再执行 C。 而 Kubernetes 包含了一组独立可组合的控制过程，可以连续地将当前状态驱动到所提供的预期状态。 你不需要在乎如何从 A 移动到 C，也不需要集中控制，这使得系统更易于使用且功能更强大、 系统更健壮，更为弹性和可扩展。</p></li></ul><hr><h2 id="第二章-组件-amp-架构"><a href="#第二章-组件-amp-架构" class="headerlink" title="第二章 组件&amp;架构"></a>第二章 组件&amp;架构</h2><ul><li>集群组件</li><li>核心概念</li><li>集群安装</li></ul><h3 id="1-集群组件"><a href="#1-集群组件" class="headerlink" title="1 集群组件"></a>1 集群组件</h3><ul><li>集群 cluster : 将同一个软件服务多个节点组织到一起共同为系统提供服务过程称之为该软件的集群。redis 集群、es集群、mongo 等。</li><li>k8s 集群: 多个节点: 3 个节点  角色:  1.master 节点&#x2F;control plane 控制节点   2. work node: 工作节点(pod 容器:应用程序容器)</li></ul><p>当部署完 Kubernetes，便拥有了一个完整的集群。一组工作机器，称为节点， 会运行容器化应用程序。<code>每个集群至少有一个工作节点</code>。工作节点会<code>托管 Pod </code>，而 Pod 就是作为应用负载的组件。 <code>控制平面管理集群中的工作节点和 Pod</code>。</p><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/components-of-kubernetes.svg" alt="Kubernetes 的组件"></p><h4 id="1-1-控制平面组件（Control-Plane-Components）"><a href="#1-1-控制平面组件（Control-Plane-Components）" class="headerlink" title="1.1 控制平面组件（Control Plane Components）"></a>1.1 控制平面组件（Control Plane Components）</h4><p>控制平面组件会为集群做出全局决策，比如<code>资源的调度。 以及检测和响应集群事件，例如当不满足部署的 replicas 字段时， 要启动新的 pod</code>）。</p><blockquote><p>控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。</p></blockquote><ul><li><p><strong>kube-apiserver</strong></p><p>API server是 Kubernetes 控制平面的组件， <code>该组件负责公开了 Kubernetes API，负责处理接受请求的工作</code>。 API server 是 Kubernetes 控制平面的前端。Kubernetes API 服务器的主要实现是 kube-apiserver。 <code>kube-apiserver</code> 设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 你可以运行 <code>kube-apiserver</code> 的多个实例，并在这些实例之间平衡流量。</p></li><li><p><strong>etcd</strong></p><p><code>一致且高度可用的键值存储，用作 Kubernetes 的所有集群数据的后台数据库</code>。</p></li><li><p><strong>kube-scheduler</strong></p><p><code>kube-scheduler</code> 是控制平面的组件， 负责监视新创建的、未指定运行节点 node 的 Pods， 并选择节点来让 Pod 在上面运行。调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p></li><li><p><strong>kube-controller-manager</strong></p><p>kube-controller-manager 是控制平面的组件， 负责运行控制器进程。从逻辑上讲， 每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。</p><p>这些控制器包括：</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）。</li><li>服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）。</li></ul></li><li><p><strong>cloud-controller-manager</strong> (optional 可选)</p><p>一个 Kubernetes 控制平面组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。<code>cloud-controller-manager</code> 仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的控制回路组合到同一个可执行文件中， 供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li><p>节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除</p></li><li><p>路由控制器（Route Controller）：用于在底层云基础架构中设置路由</p></li><li><p>服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器</p></li></ul></li></ul><h4 id="1-2-Node-组件"><a href="#1-2-Node-组件" class="headerlink" title="1.2 Node 组件"></a>1.2 Node 组件</h4><blockquote><p>节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。</p></blockquote><ul><li><p><strong>kubelet</strong></p><p>kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pods 中。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p></li><li><p><strong>kube-proxy</strong></p><p>kube-proxy是集群中每个节点（node）上所运行的网络代理， 实现 Kubernetes 服务（Service）概念的一部分。</p><p>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p></li><li><p><strong>容器运行时（Container Runtime）</strong></p><p>容器运行环境是负责运行容器的软件。</p><p>Kubernetes 支持许多容器运行环境，例如 containerd、 CRI-0、Docker 以及 Kubernetes CRI 的其他任何实现。</p></li></ul><h4 id="1-3-插件-Addons"><a href="#1-3-插件-Addons" class="headerlink" title="1.3 插件 (Addons)"></a>1.3 插件 (Addons)</h4><ul><li><p><strong>DNS</strong></p><p>尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有集群 DNS因为很多示例都需要 DNS 服务。</p></li><li><p><strong>Web 界面（仪表盘）</strong></p><p>Dashboard 是 Kubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身， 并进行故障排除。</p></li><li><p><strong>容器资源监控</strong></p><p>容器资源监控将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中， 并提供浏览这些数据的界面。</p></li><li><p><strong>集群层面日志</strong></p><p>集群层面日志机制负责将容器的日志数据保存到一个集中的日志存储中， 这种集中日志存储提供搜索和浏览接口。</p></li></ul><h3 id="2-集群架构详细"><a href="#2-集群架构详细" class="headerlink" title="2 集群架构详细"></a>2 集群架构详细</h3><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/spaces%2F-M5xTVjmK7ax94c8ZQcm%2Fuploads%2Fgit-blob-fa39039aaff07ee732a917394740cb79a4a60a64%2Fk8s_architecture.png" alt="img"></p><ul><li><strong>总结</strong><ul><li>Kubernetes 集群由多个节点组成，节点分为两类：一类是属于管理平面的主节点&#x2F;控制节点（Master Node）；一类是属于运行平面的工作节点（Worker Node）。显然，复杂的工作肯定都交给控制节点去做了，工作节点负责提供稳定的操作接口和能力抽象即可。</li></ul></li></ul><h3 id="3-集群搭建-重点"><a href="#3-集群搭建-重点" class="headerlink" title="3 集群搭建[重点]"></a>3 集群搭建[重点]</h3><ul><li><p><strong>minikube</strong><br>只是一个 K8S 集群模拟器，只有一个节点的集群，只为测试用，master 和 worker 都在一起。</p></li><li><p><strong>裸机安装</strong><br>至少需要两台机器（主节点、工作节点个一台），需要自己安装 Kubernetes 组件，配置会稍微麻烦点。<br>缺点：配置麻烦，缺少生态支持，例如负载均衡器、云存储。</p></li><li><p><strong>直接用云平台 Kubernetes</strong><br>可视化搭建，只需简单几步就可以创建好一个集群。<br>优点：安装简单，生态齐全，负载均衡器、存储等都给你配套好，简单操作就搞定</p></li><li><p><strong>k3s</strong></p><p>安装简单，脚本自动完成。</p><p>优点：轻量级，配置要求低，安装简单，生态齐全。</p></li></ul><h4 id="3-1-minikube"><a href="#3-1-minikube" class="headerlink" title="3.1 minikube"></a>3.1 minikube</h4><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20221010211512078-5407715.png" alt="image-20221010211512078"></p><h4 id="3-2-裸机安装"><a href="#3-2-裸机安装" class="headerlink" title="3.2 裸机安装"></a>3.2 裸机安装</h4><h5 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0 环境准备"></a>0 环境准备</h5><ul><li>节点数量: 3 台虚拟机 centos7</li><li>硬件配置: 2G或更多的RAM，2个CPU或更多的CPU，硬盘至少30G 以上</li><li>网络要求: 多个节点之间网络互通，每个节点能访问外网</li></ul><h5 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="1 集群规划"></a>1 集群规划</h5><ul><li>k8s-node1：10.15.0.5</li><li>k8s-node2：10.15.0.6</li><li>k8s-node3：10.15.0.7</li></ul><h5 id="2-设置主机名"><a href="#2-设置主机名" class="headerlink" title="2 设置主机名"></a>2 设置主机名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostnamectl set-hostname k8s-master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostnamectl set-hostname k8s-node1</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hostnamectl set-hostname k8s-node2</span></span><br></pre></td></tr></table></figure><h5 id="3-同步-hosts-文件"><a href="#3-同步-hosts-文件" class="headerlink" title="3 同步 hosts 文件"></a>3 同步 hosts 文件</h5><blockquote><p> 如果 DNS 不支持主机名称解析，还需要在每台机器的 <code>/etc/hosts</code> 文件中添加主机名和 IP 的对应关系：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">192.168.222.10 k8s-master</span><br><span class="line">192.168.222.11 k8s-node1</span><br><span class="line">192.168.222.12 k8s-node2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h5 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4 关闭防火墙"></a>4 关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span></span><br></pre></td></tr></table></figure><h5 id="5-关闭-SELINUX"><a href="#5-关闭-SELINUX" class="headerlink" title="5 关闭 SELINUX"></a>5 关闭 SELINUX</h5><blockquote><p>注意: ARM 架构请勿执行,执行会出现 ip 无法获取问题!</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">setenforce 0 &amp;&amp; sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span></span><br></pre></td></tr></table></figure><h5 id="6-关闭-swap-分区"><a href="#6-关闭-swap-分区" class="headerlink" title="6 关闭 swap 分区"></a>6 关闭 swap 分区</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">swapoff -a &amp;&amp; sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span></span><br></pre></td></tr></table></figure><h5 id="7-同步时间"><a href="#7-同步时间" class="headerlink" title="7 同步时间"></a>7 同步时间</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install ntpdate -y</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ntpdate time.windows.com</span></span><br></pre></td></tr></table></figure><h5 id="8-安装-containerd"><a href="#8-安装-containerd" class="headerlink" title="8 安装 containerd"></a>8 安装 containerd</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 yum-config-manager 相关依赖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 containerd yum 源</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 containerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install  -y containerd.io cri-tools</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 containerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &gt;  /etc/containerd/config.toml &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">disabled_plugins = [&quot;restart&quot;]</span><br><span class="line">[plugins.linux]</span><br><span class="line">shim_debug = true</span><br><span class="line">[plugins.cri.registry.mirrors.&quot;docker.io&quot;]</span><br><span class="line">endpoint = [&quot;https://frz7i079.mirror.aliyuncs.com&quot;]</span><br><span class="line">[plugins.cri]</span><br><span class="line">sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">启动 containerd 服务 并 开机配置自启动</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">systemctl enable containerd &amp;&amp; systemctl start containerd &amp;&amp; systemctl status containerd</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">配置 containerd 配置</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">cat &gt; /etc/modules-load.d/containerd.conf &lt;&lt;EOF</span></span></span><br><span class="line">overlay</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 k8s 网络配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span>  &gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">加载 overlay br_netfilter 模块</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">modprobe overlay</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">modprobe br_netfilter</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">查看当前配置是否生效</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">sysctl -p /etc/sysctl.d/k8s.conf</span></span></span><br></pre></td></tr></table></figure><h5 id="9-添加源"><a href="#9-添加源" class="headerlink" title="9 添加源"></a>9 添加源</h5><ul><li>查看源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum repolist</span></span><br></pre></td></tr></table></figure><ul><li>添加源 x86</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; kubernetes.repo</span></span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">mv kubernetes.repo /etc/yum.repos.d/</span></span></span><br></pre></td></tr></table></figure><ul><li>添加源 ARM</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; kubernetes.repo</span></span> </span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-aarch64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">mv kubernetes.repo /etc/yum.repos.d/</span></span></span><br></pre></td></tr></table></figure><h5 id="11-安装-k8s"><a href="#11-安装-k8s" class="headerlink" title="11 安装 k8s"></a>11 安装 k8s</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y kubelet kubeadm kubectl</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y kubelet-1.26.0 kubectl-1.26.0 kubeadm-1.26.0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 kubelet</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="built_in">enable</span> kubelet &amp;&amp; sudo systemctl start kubelet &amp;&amp; sudo systemctl status kubelet</span></span><br></pre></td></tr></table></figure><h5 id="12-初始化集群"><a href="#12-初始化集群" class="headerlink" title="12 初始化集群"></a>12 初始化集群</h5><ul><li><strong><code>注意: 初始化 k8s 集群仅仅需要再在 master 节点进行集群初始化!</code></strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm init \</span></span><br><span class="line"><span class="language-bash">--apiserver-advertise-address=192.168.222.10 \</span></span><br><span class="line"><span class="language-bash">--pod-network-cidr=10.244.0.0/16 \</span></span><br><span class="line"><span class="language-bash">--image-repository registry.aliyuncs.com/google_containers \</span></span><br><span class="line"><span class="language-bash">--cri-socket=unix:///var/run/containerd/containerd.sock</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加新节点</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm token create --print-join-command --ttl=0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm <span class="built_in">join</span> 10.15.0.21:6443 --token xjm7ts.gu3ojvta6se26q8i --discovery-token-ca-cert-hash sha256:14c8ac5c04ff9dda389e7c6c505728ac1293c6aed5978c3ea9c6953d4a79ed34</span> </span><br></pre></td></tr></table></figure><h5 id="13-配置集群网络"><a href="#13-配置集群网络" class="headerlink" title="13 配置集群网络"></a>13 配置集群网络</h5><blockquote><p>创建配置: kube-flannel.yml ,执行 kubectl apply -f kube-flannel.yml</p></blockquote><ul><li><code>注意: 只在主节点执行即可!</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">pod-security.kubernetes.io/enforce:</span> <span class="string">privileged</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-flannel</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni-plugin</span></span><br><span class="line">       <span class="comment">#image: flannelcni/flannel-cni-plugin:v1.1.0 for ppc64le and mips64le (dockerhub limitations may apply)</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/cni/bin/flannel</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni-plugin</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/cni/bin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">       <span class="comment">#image: flannelcni/flannel:v0.20.2 for ppc64le and mips64le (dockerhub limitations may apply)</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel:v0.20.2</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">       <span class="comment">#image: flannelcni/flannel:v0.20.2 for ppc64le and mips64le (dockerhub limitations may apply)</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/rancher/mirrored-flannelcni-flannel:v0.20.2</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span> [<span class="string">&quot;NET_ADMIN&quot;</span>, <span class="string">&quot;NET_RAW&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">EVENT_QUEUE_DEPTH</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;5000&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtables-lock</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/xtables.lock</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni-plugin</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/opt/cni/bin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtables-lock</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/xtables.lock</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">FileOrCreate</span></span><br></pre></td></tr></table></figure><h5 id="14-查看集群状态"><a href="#14-查看集群状态" class="headerlink" title="14 查看集群状态"></a>14 查看集群状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看集群节点状态 全部为 Ready 代表集群搭建成功</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME        STATUS   ROLES           AGE   VERSION</span><br><span class="line">k8s-node1   Ready    control-plane   21h   v1.26.0</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;          21h   v1.26.0</span><br><span class="line">k8s-node3   Ready    &lt;none&gt;          21h   v1.26.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看集群系统 pod 运行情况,下面所有 pod 状态为 Running 代表集群可用</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -A</span></span><br><span class="line">NAMESPACE      NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">default        nginx                               1/1     Running   0          21h</span><br><span class="line">kube-flannel   kube-flannel-ds-gtq49               1/1     Running   0          21h</span><br><span class="line">kube-flannel   kube-flannel-ds-qpdl6               1/1     Running   0          21h</span><br><span class="line">kube-flannel   kube-flannel-ds-ttxjb               1/1     Running   0          21h</span><br><span class="line">kube-system    coredns-5bbd96d687-p7q2x            1/1     Running   0          21h</span><br><span class="line">kube-system    coredns-5bbd96d687-rzcnz            1/1     Running   0          21h</span><br><span class="line">kube-system    etcd-k8s-node1                      1/1     Running   0          21h</span><br><span class="line">kube-system    kube-apiserver-k8s-node1            1/1     Running   0          21h</span><br><span class="line">kube-system    kube-controller-manager-k8s-node1   1/1     Running   0          21h</span><br><span class="line">kube-system    kube-proxy-mtsbp                    1/1     Running   0          21h</span><br><span class="line">kube-system    kube-proxy-v2jfs                    1/1     Running   0          21h</span><br><span class="line">kube-system    kube-proxy-x6vhn                    1/1     Running   0          21h</span><br><span class="line">kube-system    kube-scheduler-k8s-node1            1/1     Running   0          21h</span><br></pre></td></tr></table></figure><hr><h2 id="第三章-Pod-amp-Container"><a href="#第三章-Pod-amp-Container" class="headerlink" title="第三章 Pod &amp; Container"></a>第三章 Pod &amp; Container</h2><ul><li>什么是 Pod</li><li>Pod 基本操作</li><li>Pod 的 Labels</li><li>Pod 的 生命周期</li><li>Container 特性</li><li>Pod 的资源限制</li><li>Pod 中 Init 容器</li><li>节点亲和性分配 Pod</li></ul><h3 id="1-什么是-Pod"><a href="#1-什么是-Pod" class="headerlink" title="1 什么是 Pod"></a>1 什么是 Pod</h3><blockquote><p>摘取官网: <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/#working-with-pods">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/#working-with-pods</a></p></blockquote><h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 <strong>简介</strong></h4><p>Pod 是可以在 Kubernetes 中<strong>创建和管理的、最小的可部署的计算单元</strong>。<strong>Pod</strong>（就像在鲸鱼荚或者豌豆荚中）<strong>是一组（一个或多个）容器</strong>； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的<strong>内容总是并置（colocated）的并且一同调度，在共享的上下文中运行</strong>。简言之如果用 Docker 的术语来描述，<strong>Pod 类似于共享名字空间并共享文件系统卷的一组容器。</strong></p><p><code>定义: Pod 就是用来管理一组(一个|多个)容器的集合 特点: 共享网络 共享存储 共享上下文环境</code></p><h4 id="1-2-Pod-怎样管理多个容器"><a href="#1-2-Pod-怎样管理多个容器" class="headerlink" title="1.2 Pod 怎样管理多个容器?"></a>1.2 Pod 怎样管理多个容器?</h4><p>Pod 中的容器被自动安排到集群中的同一物理机或虚拟机上，并可以一起进行调度。 容器之间可以共享资源和依赖、彼此通信、协调何时以及何种方式终止自身。例如，你可能有一个容器，为共享卷中的文件提供 Web 服务器支持，以及一个单独的 “边车 (sidercar)” 容器负责从远端更新这些文件，如下图所示：</p><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20221227143250604.png" alt="image-20221227143250604"></p><h4 id="1-3-如何使用-Pod"><a href="#1-3-如何使用-Pod" class="headerlink" title="1.3 如何使用 Pod?"></a>1.3 如何使用 Pod?</h4><p>通常你不需要直接创建 Pod，甚至单实例 Pod。 相反，你会使用诸如 Deployment 或 Job 这类工作负载资源来创建 Pod。 如果 Pod 需要跟踪状态，可以考虑 StatefulSet 资源。</p><p>Kubernetes 集群中的 Pod 主要有两种用法：</p><ul><li><strong>运行单个容器的 Pod</strong>。”每个 Pod 一个容器” 模型是最常见的 Kubernetes 用例； 在这种情况下，可以将 Pod 看作单个容器的包装器，并且 Kubernetes 直接管理 Pod，而不是容器。</li><li><strong>运行多个协同工作的容器 的 Pod</strong>。 Pod 可能封装由多个紧密耦合且需要共享资源的共处容器组成的应用程序。 这些位于同一位置的容器可能形成单个内聚的服务单元 —— 一个容器将文件从共享卷提供给公众， 而另一个单独的 “边车”（sidecar）容器则刷新或更新这些文件。 Pod 将这些容器和存储资源打包为一个可管理的实体。</li></ul><p>**说明: **</p><ul><li>将多个并置、同管的容器组织到一个 Pod 中是一种相对高级的使用场景。 只有在一些场景中，容器之间紧密关联时你才应该使用这种模式。</li><li>每个 Pod 都旨在运行给定应用程序的单个实例。如果希望横向扩展应用程序 （例如，运行多个实例以提供更多的资源），则应该使用多个 Pod，每个实例使用一个 Pod。 在 Kubernetes 中，这通常被称为<strong>副本（Replication）</strong>。 通常使用一种工作负载资源及其控制器来创建和管理一组 Pod 副本。</li></ul><h3 id="2-Pod-基本操作"><a href="#2-Pod-基本操作" class="headerlink" title="2 Pod 基本操作"></a>2 Pod 基本操作</h3><h4 id="2-1-查看-pod"><a href="#2-1-查看-pod" class="headerlink" title="2.1 查看 pod"></a>2.1 查看 pod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看默认命名空间的 pod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods|pod|po</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有命名空间的 pod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods|pod -A</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods|pod|po -n 命名空间名称</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看默认命名空间下 pod 的详细信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -o wide</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有命名空间下 pod 的详细信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -o wide -A</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时监控 pod 的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -w</span></span><br></pre></td></tr></table></figure><h4 id="2-2-创建-pod"><a href="#2-2-创建-pod" class="headerlink" title="2.2 创建 pod"></a>2.2 创建 pod</h4><p>pod      :  kubectl run nginx(pod名称) –image&#x3D;nginx:1.19</p><p>container:  docker run –name nginx nginx:1.19</p><blockquote><p>官网参考地址: <a href="https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/workload-resources/pod-v1/">https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/workload-resources/pod-v1/</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-pod.yml</span></span><br><span class="line"><span class="string">vi</span> <span class="string">ngnix-pod.yml</span></span><br><span class="line"><span class="comment"># 代表使用 api 版本</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># 代表创建类型</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="comment"># 用来书写对应元数据信息，指定 pod 名称以及 namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="comment"># 对 pod 预期行为的规约 </span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 kubectl apply/create -f 创建 pod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create -f nginx-pod.yml</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f nginx-pod.yml</span></span><br></pre></td></tr></table></figure><blockquote><p><code>注意: create 仅仅是不存在时创建,如果已经存在则报错！apply 不存在创建，存在更新配置。推荐使用 apply！</code></p></blockquote><h4 id="2-3-删除-pod"><a href="#2-3-删除-pod" class="headerlink" title="2.3 删除 pod"></a>2.3 删除 pod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete pod  pod名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete -f pod.yml</span></span><br></pre></td></tr></table></figure><h4 id="2-4-进入-pod-中容器"><a href="#2-4-进入-pod-中容器" class="headerlink" title="2.4 进入 pod 中容器"></a>2.4 进入 pod 中容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意: 这种方式进入容器默认只会进入 pod 中第一个容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it nginx(pod名称) --(固定写死) bash(执行命令)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意: 进入指定 pod 中指定容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it pod名称 -c 容器名称 --(固定写死) bash(执行命令)</span></span><br></pre></td></tr></table></figure><h4 id="2-5-查看-pod-日志"><a href="#2-5-查看-pod-日志" class="headerlink" title="2.5 查看 pod 日志"></a>2.5 查看 pod 日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意: 查看 pod 中第一个容器日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -f(可选,实时) nginx(pod 名称)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意: 查看 pod 中指定容器的日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubect logs -f pod名称 -c 容器名称</span></span><br></pre></td></tr></table></figure><h4 id="2-6-查看-pod-描述信息"><a href="#2-6-查看-pod-描述信息" class="headerlink" title="2.6 查看 pod 描述信息"></a>2.6 查看 pod 描述信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod (pod名称)</span></span><br></pre></td></tr></table></figure><h3 id="3-Pod-运行多个容器"><a href="#3-Pod-运行多个容器" class="headerlink" title="3 Pod 运行多个容器"></a>3 Pod 运行多个容器</h3><h4 id="3-1-创建-pod"><a href="#3-1-创建-pod" class="headerlink" title="3.1 创建 pod"></a>3.1 创建 pod</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># myapp-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:5.0.10</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f myapp-pod.yml</span></span><br></pre></td></tr></table></figure><h4 id="3-2-查看指定容器日志"><a href="#3-2-查看指定容器日志" class="headerlink" title="3.2 查看指定容器日志"></a>3.2 查看指定容器日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志 (默认只查看第一个容器日志，这里是展示 nginx 日志)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -f myapp</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 pod 中指定容器的日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -f myapp -c nginx(容器名称)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs -f myapp -c redis(容器名称)</span></span><br></pre></td></tr></table></figure><h4 id="3-3-进入容器"><a href="#3-3-进入容器" class="headerlink" title="3.3 进入容器"></a>3.3 进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 pod 的容器 (默认进入第一个容器内部，这里会进入 nginx 容器内部)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it myapp -- sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 pod 中指定容器内部</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it myapp -c nginx -- sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it myapp -c redis -- sh</span></span><br></pre></td></tr></table></figure><h3 id="4-Pod-的-Labels-标签"><a href="#4-Pod-的-Labels-标签" class="headerlink" title="4 Pod 的 Labels(标签)"></a>4 Pod 的 Labels(标签)</h3><p><code>标签（Labels）</code> 是附加到 Kubernetes 对象（比如 Pod）上的键值对。 标签旨在用于指定对用户有意义且相关的对象的标识属性。标签可以在创建时附加到对象，随后可以随时添加和修改。每个对象都可以定义一组键(key)&#x2F;值(value)标签，但是每个键(key)对于给定对象必须是唯一的。</p><p>标签作用: 就是用来给 k8s 中对象起别名, 有了别名可以过滤和筛选</p><h4 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h4><p><code>标签由键值对组成</code>，其有效标签值：</p><ul><li>必须为 63 个字符或更少（可以为空）</li><li>除非标签值为空，必须以字母数字字符（<code>[a-z0-9A-Z]</code>）开头和结尾</li><li>包含破折号（<code>-</code>）、下划线（<code>_</code>）、点（<code>.</code>）和字母或数字</li></ul><h4 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2 示例"></a>4.2 示例</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myapp</span> <span class="comment">#创建时添加</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.21</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:5.0.10</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><h4 id="4-3-标签基本操作"><a href="#4-3-标签基本操作" class="headerlink" title="4.3 标签基本操作"></a>4.3 标签基本操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods --show-labels</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加标签 kubectl label pod pod名称 标签键值对</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl label pod myapp <span class="built_in">env</span>=prod</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">覆盖标签 --overwrite</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl label --overwrite pod myapp <span class="built_in">env</span>=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除标签 -号代表删除标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl label pod myapp <span class="built_in">env</span>-</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据标签筛选 <span class="built_in">env</span>=<span class="built_in">test</span>/env  &gt; = &lt;</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get po -l <span class="built_in">env</span>=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get po -l <span class="built_in">env</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get po -l <span class="string">&#x27;!env&#x27;</span> <span class="comment"># 不包含的 pod</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get po -l <span class="string">&#x27;env in (test,prod)&#x27;</span> <span class="comment">#选择含有指定值的 pod</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get po -l <span class="string">&#x27;env notin (test,prod)&#x27;</span> <span class="comment">#选择含有指定值的 pod</span></span></span><br></pre></td></tr></table></figure><h3 id="5-Pod-的生命周期"><a href="#5-Pod-的生命周期" class="headerlink" title="5 Pod 的生命周期"></a>5 Pod 的生命周期</h3><blockquote><p>摘自官网: <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/</a></p></blockquote><p> Pod 遵循预定义的生命周期，起始于 <code>Pending</code> 阶段， 如果至少其中有一个主要容器正常启动，则进入 <code>Running</code>，之后取决于 Pod 中是否有容器以失败状态结束而进入 <code>Succeeded</code> 或者 <code>Failed</code> 阶段。与此同时Pod 在其生命周期中只会被调度一次。 一旦 Pod 被调度（分派）到某个节点，Pod 会一直在该节点运行，直到 Pod 停止或者被终止。</p><h4 id="5-1-生命周期"><a href="#5-1-生命周期" class="headerlink" title="5.1 生命周期"></a>5.1 生命周期</h4><p>和一个个独立的应用容器一样，Pod 也被认为是相对临时性（而不是长期存在）的实体。 Pod 会被创建、赋予一个唯一的 ID(UID)， 并被调度到节点，并在终止（根据重启策略）或删除之前一直运行在该节点。如果一个节点死掉了，调度到该节点的 Pod 也被计划在给定超时期限结束后删除。</p><p>Pod 自身不具有自愈能力。如果 Pod 被调度到某节点而该节点之后失效， Pod 会被删除；类似地，Pod 无法在因节点资源耗尽或者节点维护而被驱逐期间继续存活。 Kubernetes 使用一种高级抽象来管理这些相对而言可随时丢弃的 Pod 实例， 称作控制器。</p><p>任何给定的 Pod （由 UID 定义）从不会被“重新调度（rescheduled）”到不同的节点； 相反，这一 Pod 可以被一个新的、几乎完全相同的 Pod 替换掉。 如果需要，新 Pod 的名字可以不变，但是其 UID 会不同。</p><p>如果某物声称其生命期与某 Pod 相同，例如存储卷， 这就意味着该对象在此 Pod （UID 亦相同）存在期间也一直存在。 如果 Pod 因为任何原因被删除，甚至完全相同的替代 Pod 被创建时， 这个相关的对象（例如这里的卷）也会被删除并重建。</p><h4 id="5-2-pod-阶段"><a href="#5-2-pod-阶段" class="headerlink" title="5.2 pod 阶段"></a>5.2 pod 阶段</h4><p>Pod 阶段的数量和含义是严格定义的。 除了本文档中列举的内容外，不应该再假定 Pod 有其他的 <code>phase</code> 值。</p><table><thead><tr><th align="left">取值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Pending</code>（悬决）</td><td align="left">Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间。</td></tr><tr><td align="left"><code>Running</code>（运行中）</td><td align="left">Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。</td></tr><tr><td align="left"><code>Succeeded</code>（成功）</td><td align="left">Pod 中的所有容器都已成功终止，并且不会再重启。</td></tr><tr><td align="left"><code>Failed</code>（失败）</td><td align="left">Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止。</td></tr><tr><td align="left"><code>Unknown</code>（未知）</td><td align="left">因为某些原因无法取得 Pod 的状态。这种情况通常是因为与 Pod 所在主机通信失败。</td></tr></tbody></table><blockquote><p><strong>说明：</strong></p><ol><li><p>当一个 Pod 被删除时，执行一些 kubectl 命令会展示这个 Pod 的状态为 <code>Terminating</code>（终止）。 这个 <code>Terminating</code> 状态并不是 Pod 阶段之一。 Pod 被赋予一个可以体面终止的期限，默认为 30 秒。 你可以使用 <code>--force</code> 参数来强制终止 Pod。</p></li><li><p>如果某节点死掉或者与集群中其他节点失联，Kubernetes 会实施一种策略，将失去的节点上运行的所有 Pod 的 <code>phase</code> 设置为 <code>Failed</code>。</p></li></ol></blockquote><h3 id="6-Contrainer-特性"><a href="#6-Contrainer-特性" class="headerlink" title="6 Contrainer 特性"></a>6 Contrainer 特性</h3><h4 id="6-1-容器生命周期"><a href="#6-1-容器生命周期" class="headerlink" title="6.1 容器生命周期"></a>6.1 容器生命周期</h4><p>Kubernetes 会跟踪 Pod 中每个容器的状态，就像它跟踪 Pod 总体上的阶段一样。 你可以使用容器生命周期回调来在容器生命周期中的特定时间点触发事件。</p><p>一旦调度器将 Pod 分派给某个节点，<code>kubelet</code> 就通过容器运行时开始为 Pod 创建容器。容器的状态有三种：<code>Waiting</code>（等待）、<code>Running</code>（运行中）和 <code>Terminated</code>（已终止）。</p><p>要检查 Pod 中容器的状态，你可以使用 <code>kubectl describe pod &lt;pod 名称&gt;</code>。 其输出中包含 Pod 中每个容器的状态。</p><p>每种状态都有特定的含义：</p><ul><li><code>Waiting</code> （等待）</li></ul><p>如果容器并不处在 <code>Running</code> 或 <code>Terminated</code> 状态之一，它就处在 <code>Waiting</code> 状态。 处于 <code>Waiting</code> 状态的容器仍在运行它完成启动所需要的操作：例如， 从某个容器镜像仓库拉取容器镜像，或者向容器应用 Secret 数据等等。 当你使用 <code>kubectl</code> 来查询包含 <code>Waiting</code> 状态的容器的 Pod 时，你也会看到一个 Reason 字段，其中给出了容器处于等待状态的原因。</p><ul><li><code>Running</code>（运行中）</li></ul><p><code>Running</code> 状态表明容器正在执行状态并且没有问题发生。 如果配置了 <code>postStart</code> 回调，那么该回调已经执行且已完成。 如果你使用 <code>kubectl</code> 来查询包含 <code>Running</code> 状态的容器的 Pod 时， 你也会看到关于容器进入 <code>Running</code> 状态的信息。</p><ul><li><code>Terminated</code>（已终止）</li></ul><p>处于 <code>Terminated</code> 状态的容器已经开始执行并且或者正常结束或者因为某些原因失败。 如果你使用 <code>kubectl</code> 来查询包含 <code>Terminated</code> 状态的容器的 Pod 时， 你会看到容器进入此状态的原因、退出代码以及容器执行期间的起止时间。</p><p>如果容器配置了 <code>preStop</code> 回调，则该回调会在容器进入 <code>Terminated</code> 状态之前执行。</p><h4 id="6-2-容器生命周期回调-x2F-事件-x2F-钩子"><a href="#6-2-容器生命周期回调-x2F-事件-x2F-钩子" class="headerlink" title="6.2 容器生命周期回调&#x2F;事件&#x2F;钩子"></a>6.2 容器生命周期回调&#x2F;事件&#x2F;钩子</h4><p>类似于许多具有生命周期回调组件的编程语言框架，例如 Angular、Vue、Kubernetes 为容器提供了生命周期回调。 回调使容器能够了解其管理生命周期中的事件，并在执行相应的生命周期回调时运行在处理程序中实现的代码。</p><p>有两个回调暴露给容器：</p><ul><li><p><code>PostStart</code> 这个回调在容器被创建之后立即被执行。 但是，不能保证回调会在容器入口点（ENTRYPOINT）之前执行。 没有参数传递给处理程序。</p></li><li><p><code>PreStop</code> 在容器因 API 请求或者管理事件（诸如存活态探针、启动探针失败、资源抢占、资源竞争等） 而被终止之前，此回调会被调用。 如果容器已经处于已终止或者已完成状态，则对 preStop 回调的调用将失败。 在用来停止容器的 TERM 信号被发出之前，回调必须执行结束。 Pod 的终止宽限周期在 <code>PreStop</code> 回调被执行之前即开始计数， 所以无论回调函数的执行结果如何，容器最终都会在 Pod 的终止宽限期内被终止。 没有参数会被传递给处理程序。</p></li><li><p><strong>使用容器生命周期回调</strong></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">      <span class="attr">lifecycle:</span></span><br><span class="line">        <span class="attr">postStart:</span> <span class="comment">#容器创建过程中执行</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo postStart &gt;&gt; /start.txt&quot;</span>]</span><br><span class="line">        <span class="attr">preStop:</span>  <span class="comment">#容器终止之前执行</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo postStop &gt;&gt; /stop.txt &amp;&amp; sleep 5&quot;</span>]</span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="6-3-容器重启策略"><a href="#6-3-容器重启策略" class="headerlink" title="6.3 容器重启策略"></a>6.3 容器重启策略</h4><p>Pod 的 <code>spec</code> 中包含一个 <code>restartPolicy</code> 字段，其可能取值包括 <code>Always(总是重启)、OnFailure(容器异常退出状态码非 0,重启) 和 Never</code>。默认值是 <code>Always</code>。</p><p><code>restartPolicy</code> 适用于 Pod 中的所有容器。<code>restartPolicy</code> 仅针对同一节点上 <code>kubelet</code> 的容器重启动作。当 Pod 中的容器退出时，<code>kubelet</code> 会按指数回退方式计算重启的延迟（10s、20s、40s、…），其最长延迟为 5 分钟。 一旦某容器执行了 10 分钟并且没有出现问题，<code>kubelet</code> 对该容器的重启回退计时器执行重置操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment"># OnFailure Never</span></span><br></pre></td></tr></table></figure><h4 id="6-4-自定义容器启动命令"><a href="#6-4-自定义容器启动命令" class="headerlink" title="6.4 自定义容器启动命令"></a>6.4 自定义容器启动命令</h4><p>和 Docker 容器一样,k8s中容器也可以通过command、args 用来修改容器启动默认执行命令以及传递相关参数。<strong>但一般推荐使用 command 修改启动命令，使用 args 为启动命令传递参数。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:5.0.10</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>] <span class="comment">#用来指定启动命令</span></span><br><span class="line">      <span class="attr">args:</span> [<span class="string">&quot;--appendonly yes&quot;</span>] <span class="comment"># 用来为启动命令传递参数</span></span><br><span class="line">      <span class="comment">#args: [&quot;redis-server&quot;,&quot;--appendonly yes&quot;] # 单独使用修改启动命令并传递参数</span></span><br><span class="line">      <span class="comment">#args:                                     # 另一种语法格式</span></span><br><span class="line">      <span class="comment">#  - redis-server</span></span><br><span class="line">      <span class="comment">#  - &quot;--appendonly yes&quot;</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><h4 id="6-5-容器探针"><a href="#6-5-容器探针" class="headerlink" title="6.5 容器探针"></a>6.5 容器探针</h4><p>probe 是由 kubelet对容器执行的定期诊断。 要执行诊断，kubelet 既可以在容器内执行代码，也可以发出一个网络请求。</p><p>定义: 容器探针 就是用来定期对容器进行健康检查的。</p><p><strong>探测类型</strong></p><p>针对运行中的容器，<code>kubelet</code> 可以选择是否执行以下三种探针，以及如何针对探测结果作出反应：</p><ul><li><code>livenessProbe</code> <strong>指示容器是否正在运行</strong>。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其重启策略决定未来。如果容器不提供存活探针， 则默认状态为 <code>Success</code>。</li><li><code>readinessProbe</code><strong>指示容器是否准备好为请求提供服</strong>。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 <code>Failure</code>。 如果容器不提供就绪态探针，则默认状态为 <code>Success</code>。</li><li><code>startupProbe 1.7+</code><strong>指示容器中的应用是否已经启动</strong>。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，<code>kubelet</code> 将杀死容器， 而容器依其重启策略进行重启。 如果容器没有提供启动探测，则默认状态为 <code>Success</code>。</li></ul><p><strong>探针机制</strong></p><p>使用探针来检查容器有四种不同的方法。 每个探针都必须准确定义为这四种机制中的一种：</p><ul><li><p><code>exec</code></p><p>在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。</p></li><li><p><code>grpc</code></p><p>使用 gRPC 执行一个远程过程调用。 目标应该实现 gRPC健康检查。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 Alpha 特性，只有在你启用了 “GRPCContainerProbe” 特性门控时才能使用。</p></li><li><p><code>httpGet</code></p><p>对容器的 IP 地址上指定端口和路径执行 HTTP <code>GET</code> 请求。如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的。</p></li><li><p><code>tcpSocket</code></p><p>对容器的 IP 地址上的指定端口执行 TCP 检查。如果端口打开，则诊断被认为是成功的。 如果远程系统（容器）在打开连接后立即将其关闭，这算作是健康的。</p></li></ul><p><strong>探针结果</strong></p><p>每次探测都将获得以下三种结果之一：</p><ul><li><code>Success</code>（成功）容器通过了诊断。</li><li><code>Failure</code>（失败）容器未通过诊断。</li><li><code>Unknown</code>（未知）诊断失败，因此不会采取任何行动。</li></ul><p><strong>探针参数</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">initialDelaySeconds:</span> <span class="number">5</span>   <span class="comment">#初始化时间5s</span></span><br><span class="line"><span class="attr">periodSeconds:</span> <span class="number">4</span>     <span class="comment">#检测间隔时间4s</span></span><br><span class="line"><span class="attr">timeoutSeconds:</span> <span class="number">1</span>   <span class="comment">#默认检测超时时间为1s</span></span><br><span class="line"><span class="attr">failureThreshold:</span> <span class="number">3</span>   <span class="comment">#默认失败次数为3次，达到3次后重启pod</span></span><br><span class="line"><span class="attr">successThreshold:</span> <span class="number">1</span>    <span class="comment">#默认成功次数为1次，1次监测成功代表成功</span></span><br></pre></td></tr></table></figure><p><strong>使用探针</strong></p><ul><li><strong>exec</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">exec:</span> <span class="string">exec</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">7</span><span class="string">;nginx</span> <span class="string">-g</span> <span class="string">&quot;daemon off;&quot;</span> <span class="comment">#这一步会和初始化同时开始运行，也就是在初始化5s后和7秒之间，会检测出一次失败，7秒后启动后检测正常，所以pod不会重启</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span>    <span class="comment">#这里使用 exec 执行 shell 命令检测容器状态</span></span><br><span class="line">        <span class="attr">command:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="string">ls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/nginx.pid</span>  <span class="comment">#查看是否有pid文件</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span>   <span class="comment">#初始化时间5s</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">4</span>    <span class="comment">#检测间隔时间4s</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span>   <span class="comment">#默认检测超时时间为1s</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">3</span>   <span class="comment">#默认失败次数为3次，达到3次后重启pod</span></span><br><span class="line">      <span class="attr">successThreshold:</span> <span class="number">1</span>   <span class="comment">#默认成功次数为1次，1 次代表成功</span></span><br></pre></td></tr></table></figure><blockquote><p><code>说明：</code></p><pre><code>1. 如果 sleep 7s，第一次检测发现失败，但是第二次检测发现成功后容器就一直处于健康状态不会重启。1. 如果 sleep 30s，第一次检测失败，超过 3 次检测同样失败，k8s 就回杀死容器进行重启，反复循环这个过程。</code></pre></blockquote><ul><li><strong>tcpSocket</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-tcpsocket</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tcpsocket:</span> <span class="string">tcpsocket</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">7</span><span class="string">;nginx</span> <span class="string">-g</span> <span class="string">&quot;daemon off;&quot;</span>  <span class="comment">#这一步会和初始化同时开始运行，也就是在初始化5s后和7秒之间，会检测出一次失败，7秒后启动后检测正常，所以pod不会重启</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span>   <span class="comment">#初始化时间5s</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">4</span>    <span class="comment">#检测间隔时间4s</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span>   <span class="comment">#默认检测超时时间为1s</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">3</span>   <span class="comment">#默认失败次数为3次，达到3次后重启pod</span></span><br><span class="line">      <span class="attr">successThreshold:</span> <span class="number">1</span>   <span class="comment">#默认成功次数为1次，1 次代表成功</span></span><br></pre></td></tr></table></figure><ul><li><strong>httpGet</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># probe-liveness-httget.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-httpget</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">httpget:</span> <span class="string">httpget</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">7</span><span class="string">;nginx</span> <span class="string">-g</span> <span class="string">&quot;daemon off;&quot;</span> <span class="comment">#这一步会和初始化同时开始运行，也就是在初始化5s后和7秒之间，会检测出一次失败，7秒后启动后检测正常，所以pod不会重启</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span>     <span class="comment">#httpget</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span>   <span class="comment">#访问的端口</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index.html</span>   <span class="comment">#访问的路径</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span>   <span class="comment">#初始化时间5s</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">4</span>    <span class="comment">#检测间隔时间4s</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span>   <span class="comment">#默认检测超时时间为1s</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">3</span>   <span class="comment">#默认失败次数为3次，达到3次后重启pod</span></span><br><span class="line">      <span class="attr">successThreshold:</span> <span class="number">1</span>   <span class="comment">#默认成功次数为1次，1 次代表成功</span></span><br></pre></td></tr></table></figure><ul><li><p>GRPC 探针</p><blockquote><p> 官方参考地址: <a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</a></p></blockquote></li></ul><h4 id="6-6-资源限制"><a href="#6-6-资源限制" class="headerlink" title="6.6 资源限制"></a>6.6 资源限制</h4><p>在k8s中对于容器资源限制主要分为以下两类:</p><ul><li>内存资源限制: 内存<strong>请求</strong>（request）和内存<strong>限制</strong>（limit）分配给一个容器。 我们保障容器拥有它请求数量的内存，但不允许使用超过限制数量的内存。<ul><li>官网参考地址: <a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-memory-resource/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-memory-resource/</a></li></ul></li><li>CPU 资源限制: 为容器设置 CPU <strong>request（请求）</strong> 和 CPU <strong>limit（限制）</strong>。 容器使用的 CPU 不能超过所配置的限制。 如果系统有空闲的 CPU 时间，则可以保证给容器分配其所请求数量的 CPU 资源。<ul><li>官网参考地址: <a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-cpu-resource/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-cpu-resource/</a></li></ul></li></ul><p>请求 request memory cpu :可以使用的基础资源  100M</p><p>限制 limit   memory cpu :可以使用的最大资源  200M 超过最大资源之后容器会被 kill , OOM 错误</p><h5 id="1-metrics-server"><a href="#1-metrics-server" class="headerlink" title="1 metrics-server"></a><strong>1 metrics-server</strong></h5><blockquote><p>官网地址: <a href="https://github.com/kubernetes-sigs/metrics-server">https://github.com/kubernetes-sigs/metrics-server</a></p></blockquote><p><strong>Kubernetes Metrics Server</strong> (Kubernetes指标服务器)，它是一个<strong>可扩展的、高效的容器资源度量源</strong>。Metrics Server 用于监控每个 Node 和 Pod 的负载（用于Kubernetes内置自动扩缩管道）。Metrics Server 从Kubelets 收集资源指标，并通过 Metrics API 在Kubernetes apiserver中公开，供 Horizontal Pod Autoscaler 和 Vertical Pod Autoscaler 使用。Metrics API 也可以通过 kubectl top 访问，使其更容易调试自动扩缩管道。</p><ul><li>查看 metrics-server（或者其他资源指标 API <code>metrics.k8s.io</code> 服务提供者）是否正在运行， 请键入以下命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get apiservices</span><br></pre></td></tr></table></figure><ul><li>如果资源指标 API 可用，则会输出将包含一个对 <code>metrics.k8s.io</code> 的引用。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">v1beta1.metrics.k8s.io</span><br></pre></td></tr></table></figure><ul><li>安装 metrics-server</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># components.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-admin:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-edit:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">rbac.authorization.k8s.io/aggregate-to-view:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:aggregated-metrics-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/metrics</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server-auth-reader</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">extension-apiserver-authentication-reader</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server:system:auth-delegator</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:auth-delegator</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:metrics-server</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--cert-dir=/tmp</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secure-port=4443</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kubelet-use-node-status-port</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--metric-resolution=15s</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span> <span class="comment">#修改去掉证书验证</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">dyrnq/metrics-server:v0.6.2</span> <span class="comment">#修改官方无法下载</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/livez</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">4443</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/readyz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span>  <span class="comment">#必须指定这个才行</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">APIService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">v1beta1.metrics.k8s.io</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">  <span class="attr">groupPriorityMinimum:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">insecureSkipTLSVerify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1beta1</span></span><br><span class="line">  <span class="attr">versionPriority:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl appply -f components.yaml</span></span><br></pre></td></tr></table></figure><h5 id="2-指定内存请求和限制"><a href="#2-指定内存请求和限制" class="headerlink" title="2 指定内存请求和限制"></a><strong>2 指定内存请求和限制</strong></h5><p>官网: <a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-memory-resource/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-memory-resource/</a></p><p>为容器指定内存请求，请在容器资源清单中包含 <code>resources：requests</code> 字段。 同理，要指定内存限制，请包含 <code>resources：limits</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-memory-demo.yaml</span></span><br><span class="line"><span class="comment">#内存资源的基本单位是字节（byte）。你可以使用这些后缀之一，将内存表示为 纯整数或定点整数：E、P、T、G、M、K、Ei、Pi、Ti、Gi、Mi、Ki。 例如，下面是一些近似相同的值：128974848, 129e6, 129M, 123Mi</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-memory-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-memory-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;100Mi&quot;</span> </span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;200Mi&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>查看容器内存使用情况</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod nginx-memory-demo --output=yaml</span></span><br></pre></td></tr></table></figure><ul><li><code>查看容器正在使用内存情况</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl top pod nginx-memory-demo</span> </span><br></pre></td></tr></table></figure><ul><li><p><code>内存请求和限制的目的</code></p><p>通过为集群中运行的容器配置内存请求和限制，你可以有效利用集群节点上可用的内存资源。 通过将 Pod 的内存请求保持在较低水平，你可以更好地安排 Pod 调度。 通过让内存限制大于内存请求，你可以完成两件事：</p><ul><li>Pod 可以进行一些突发活动，从而更好的利用可用内存。</li><li>Pod 在突发活动期间，可使用的内存被限制为合理的数量。</li></ul></li><li><p><code>没有指定内存限制</code></p><p>如果你没有为一个容器指定内存限制，则自动遵循以下情况之一：</p><ul><li>容器可无限制地使用内存。容器可以使用其所在节点所有的可用内存， 进而可能导致该节点调用 OOM Killer。 此外，如果发生 OOM Kill，没有资源限制的容器将被杀掉的可行性更大。</li><li>运行的容器所在命名空间有默认的内存限制，那么该容器会被自动分配默认限制。</li></ul></li></ul><h5 id="3-指定-CPU-请求和限制"><a href="#3-指定-CPU-请求和限制" class="headerlink" title="3 指定 CPU 请求和限制"></a><strong>3 指定 CPU 请求和限制</strong></h5><p>官网: <a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-cpu-resource/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-cpu-resource/</a></p><p>为容器指定 CPU 请求，请在容器资源清单中包含 <code>resources: requests</code> 字段。 要指定 CPU 限制，请包含 <code>resources:limits</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-cpu-demo.yaml</span></span><br><span class="line"><span class="comment">#CPU 资源以 CPU 单位度量。小数值是可以使用的。一个请求 0.5 CPU 的容器保证会获得请求 1 个 CPU 的容器的 CPU 的一半。 你可以使用后缀 m 表示毫。例如 100m CPU、100 milliCPU 和 0.1 CPU 都相同。 CPU 请求只能使用绝对数量，而不是相对数量。0.1 在单核、双核或 48 核计算机上的 CPU 数量值是一样的。</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-cpu-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-cpu-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;0.5&quot;</span></span><br></pre></td></tr></table></figure><ul><li>显示 pod 详细信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod nginx-cpu-demo --output=yaml</span> </span><br></pre></td></tr></table></figure><ul><li>显示 pod 运行指标</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl top pod nginx-cpu-demo</span></span><br></pre></td></tr></table></figure><ul><li><p><code>CPU 请求和限制的初衷</code></p><p>通过配置你的集群中运行的容器的 CPU 请求和限制，你可以有效利用集群上可用的 CPU 资源。 通过将 Pod CPU 请求保持在较低水平，可以使 Pod 更有机会被调度。 通过使 CPU 限制大于 CPU 请求，你可以完成两件事：</p><ul><li>Pod 可能会有突发性的活动，它可以利用碰巧可用的 CPU 资源。</li><li>Pod 在突发负载期间可以使用的 CPU 资源数量仍被限制为合理的数量。</li></ul></li><li><p><code>如果不指定 CPU 限制</code></p><p>如果你没有为容器指定 CPU 限制，则会发生以下情况之一：</p><ul><li><p>容器在可以使用的 CPU 资源上没有上限。因而可以使用所在节点上所有的可用 CPU 资源。</p></li><li><p>容器在具有默认 CPU 限制的名字空间中运行，系统会自动为容器设置默认限制。</p></li></ul></li><li><p><code>如果你设置了 CPU 限制但未设置 CPU 请求</code></p></li></ul><p>​如果你为容器指定了 CPU 限制值但未为其设置 CPU 请求，Kubernetes 会自动为其 设置与 CPU 限制相同的 CPU 请求值。类似的，如果容器设置了内存限制值但未设置 内存请求值，Kubernetes 也会为其设置与内存限制值相同的内存请求。</p><h3 id="7-Pod-中-init-容器"><a href="#7-Pod-中-init-容器" class="headerlink" title="7 Pod 中 init 容器"></a>7 Pod 中 init 容器</h3><p>Init 容器是一种特殊容器，在Pod 内的应用容器启动之前运行。Init 容器可以包括一些应用镜像中不存在的实用工具和安装脚本。</p><h4 id="7-1-init-容器特点"><a href="#7-1-init-容器特点" class="headerlink" title="7.1 init 容器特点"></a>7.1 init 容器特点</h4><p>init 容器与普通的容器非常像，除了如下几点：</p><ul><li>它们总是运行到完成。如果 Pod 的 Init 容器失败，kubelet 会不断地重启该 Init 容器直到该容器成功为止。 然而，如果 Pod 对应的 <code>restartPolicy</code> 值为 “Never”，并且 Pod 的 Init 容器失败， 则 Kubernetes 会将整个 Pod 状态设置为失败。</li><li>每个都必须在下一个启动之前成功完成。</li><li>同时 Init 容器不支持 <code>lifecycle</code>、<code>livenessProbe</code>、<code>readinessProbe</code> 和 <code>startupProbe</code>， 因为它们必须在 Pod 就绪之前运行完成。</li><li>如果为一个 Pod 指定了多个 Init 容器，这些容器会按顺序逐个运行。 每个 Init 容器必须运行成功，下一个才能够运行。当所有的 Init 容器运行完成时， Kubernetes 才会为 Pod 初始化应用容器并像平常一样运行。</li><li>Init 容器支持应用容器的全部字段和特性，包括资源限制、数据卷和安全设置。 然而，Init 容器对资源请求和限制的处理稍有不同。</li></ul><h4 id="7-2-使用-init-容器"><a href="#7-2-使用-init-容器" class="headerlink" title="7.2 使用 init 容器"></a>7.2 使用 init 容器</h4><blockquote><p>官网地址: <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/init-containers/">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/init-containers/</a></p></blockquote><p>在 Pod 的规约中与用来描述应用容器的 <code>containers</code> 数组平行的位置指定 Init 容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">init-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-myservice</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo init-myservice is running! &amp;&amp; sleep 5&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-mydb</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo init-mydb is running! &amp;&amp; sleep 10&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>查看启动详细</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod init-demo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部分结果</span></span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age    From               Message</span><br><span class="line">  ----    ------     ----   ----               -------</span><br><span class="line">  Normal  Scheduled  2m16s  default-scheduler  Successfully assigned default/init-demo to k8s-node2</span><br><span class="line">  Normal  Pulling    2m16s  kubelet            Pulling image &quot;busybox:1.28&quot;</span><br><span class="line">  Normal  Pulled     118s   kubelet            Successfully pulled image &quot;busybox:1.28&quot; in 17.370617268s (17.370620685s including waiting)</span><br><span class="line">  Normal  Created    118s   kubelet            Created container init-myservice</span><br><span class="line">  Normal  Started    118s   kubelet            Started container init-myservice</span><br><span class="line">  Normal  Pulled     112s   kubelet            Container image &quot;busybox:1.28&quot; already present on machine</span><br><span class="line">  Normal  Created    112s   kubelet            Created container init-mydb</span><br><span class="line">  Normal  Started    112s   kubelet            Started container init-mydb</span><br><span class="line">  Normal  Pulled     101s   kubelet            Container image &quot;busybox:1.28&quot; already present on machine</span><br><span class="line">  Normal  Created    101s   kubelet            Created container myapp-container</span><br><span class="line">  Normal  Started    101s   kubelet            Started container myapp-container</span><br></pre></td></tr></table></figure><h3 id="8-节点亲和性分配-Pod"><a href="#8-节点亲和性分配-Pod" class="headerlink" title="8 节点亲和性分配 Pod"></a>8 节点亲和性分配 Pod</h3><blockquote><p> 官方地址: <a href="http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/assign-pod-node.html">http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/assign-pod-node.html</a></p></blockquote><p>你可以约束一个 Pod 以便 <strong>限制</strong> 其只能在特定的节点上运行， 或优先在特定的节点上运行。 有几种方法可以实现这点，推荐的方法都是用 <strong>标签选择算符</strong>来进行选择。 通常这样的约束不是必须的，因为调度器将自动进行合理的放置（比如，将 Pod 分散到节点上， 而不是将 Pod 放置在可用资源不足的节点上等等）。但在某些情况下，你可能需要进一步控制 Pod 被部署到哪个节点。例如，确保 Pod 最终落在连接了 SSD 的机器上， 或者将来自两个不同的服务且有大量通信的 Pods 被放置在同一个可用区。</p><p>你可以使用下列方法中的任何一种来选择 Kubernetes 对特定 Pod 的调度：</p><ul><li>与节点标签匹配的 nodeSelector  <strong>推荐</strong></li><li>亲和性与反亲和性 <strong>推荐</strong></li><li>nodeName</li><li>Pod 拓扑分布约束 <strong>推荐</strong></li></ul><blockquote><p> <strong><code>定义: 使用节点亲和性可以把 Kubernetes Pod 分配到特定节点。</code></strong></p></blockquote><h4 id="8-1-给节点添加标签"><a href="#8-1-给节点添加标签" class="headerlink" title="8.1 给节点添加标签"></a>8.1 给节点添加标签</h4><ul><li><p>列出集群中的节点及其标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes --show-labels</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出类似于此：</span></span><br><span class="line">NAME        STATUS   ROLES           AGE   VERSION   LABELS</span><br><span class="line">k8s-node1   Ready    control-plane   10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux...</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;          10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux...</span><br><span class="line">k8s-node3   Ready    &lt;none&gt;          10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux...</span><br></pre></td></tr></table></figure></li><li><p>选择一个节点，给它添加一个标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes k8s-node1(节点名称) disktype=ssd</span><br></pre></td></tr></table></figure></li><li><p>验证你所选节点具有 <code>disktype=ssd</code> 标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes --show-labels</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出类似于此：</span></span><br><span class="line">NAME        STATUS   ROLES           AGE   VERSION   LABELS</span><br><span class="line">k8s-node1   Ready    control-plane   10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux,disktype=ssd...</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;          10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux...</span><br><span class="line">k8s-node3   Ready    &lt;none&gt;          10d   v1.26.0   beta.kubernetes.io/arch=arm64,beta.kubernetes.io/os=linux...</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2-根据选择节点标签指派-pod-到指定节点-nodeSelector"><a href="#8-2-根据选择节点标签指派-pod-到指定节点-nodeSelector" class="headerlink" title="8.2 根据选择节点标签指派 pod 到指定节点[nodeSelector]"></a>8.2 根据选择节点标签指派 pod 到指定节点[nodeSelector]</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span>  <span class="comment"># 选择节点为标签为 ssd 的节点</span></span><br></pre></td></tr></table></figure><h4 id="8-3-根据节点名称指派-pod-到指定节点-nodeName"><a href="#8-3-根据节点名称指派-pod-到指定节点-nodeName" class="headerlink" title="8.3 根据节点名称指派 pod 到指定节点[nodeName]"></a>8.3 根据节点名称指派 pod 到指定节点[nodeName]</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">worker1</span>    <span class="comment"># 调度 Pod 到特定的节点</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure><h4 id="8-4-根据-亲和性和反亲和性-指派-pod-到指定节点"><a href="#8-4-根据-亲和性和反亲和性-指派-pod-到指定节点" class="headerlink" title="8.4 根据 亲和性和反亲和性 指派 pod 到指定节点"></a>8.4 根据 亲和性和反亲和性 指派 pod 到指定节点</h4><p>官网地址: <a href="http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/assign-pod-node.html">http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/assign-pod-node.html</a></p><p><strong>说明</strong></p><p><code>nodeSelector</code> 提供了一种最简单的方法来将 Pod 约束到具有特定标签的节点上。 亲和性和反亲和性扩展了你可以定义的约束类型。使用亲和性与反亲和性的一些好处有：</p><ul><li>亲和性、反亲和性语言的表达能力更强。<code>nodeSelector</code> 只能选择拥有所有指定标签的节点。 亲和性、反亲和性为你提供对选择逻辑的更强控制能力。</li><li>你可以标明某规则是“软需求”或者“偏好”，这样调度器在无法找到匹配节点时仍然调度该 Pod。</li><li>你可以使用节点上（或其他拓扑域中）运行的其他 Pod 的标签来实施调度约束， 而不是只能使用节点本身的标签。这个能力让你能够定义规则允许哪些 Pod 可以被放置在一起。</li></ul><p><strong>亲和性功能由两种类型的亲和性组成：</strong></p><ul><li><strong>节点亲和性</strong>功能类似于 <code>nodeSelector</code> 字段，但它的表达能力更强，并且允许你指定软规则。</li><li>Pod 间亲和性&#x2F;反亲和性允许你根据其他 Pod 的标签来约束 Pod。</li></ul><p>节点亲和性概念上类似于 <code>nodeSelector</code>， 它使你可以根据节点上的标签来约束 Pod 可以调度到哪些节点上。 节点亲和性有两种：</p><ul><li><code>requiredDuringSchedulingIgnoredDuringExecution</code>： 调度器只有在规则被满足的时候才能执行调度。此功能类似于 <code>nodeSelector</code>， 但其语法表达能力更强。</li><li><code>preferredDuringSchedulingIgnoredDuringExecution</code>： 调度器会尝试寻找满足对应规则的节点。如果找不到匹配的节点，调度器仍然会调度该 Pod。</li></ul><p><strong>注意：在上述类型中，<code>IgnoredDuringExecution</code> 意味着如果节点标签在 Kubernetes 调度 Pod 后发生了变更，Pod 仍将继续运行。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="comment">#节点必须包含一个键名为 ssd 的标签， 并且该标签的取值必须为 fast 或 superfast。</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> </span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">ssd</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">fast</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">superfast</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br></pre></td></tr></table></figure><p><strong>注意: 你可以使用 <code>In</code>、<code>NotIn</code>、<code>Exists</code>、<code>DoesNotExist</code>、<code>Gt</code> 和 <code>Lt</code> 之一作为操作符。<code>NotIn</code> 和 <code>DoesNotExist</code> 可用来实现节点反亲和性行为。</strong></p><h4 id="8-5-节点亲和性权重"><a href="#8-5-节点亲和性权重" class="headerlink" title="8.5 节点亲和性权重"></a>8.5 节点亲和性权重</h4><p>你可以为 <code>preferredDuringSchedulingIgnoredDuringExecution</code> 亲和性类型的每个实例设置 <code>weight</code> 字段，其取值范围是 1 到 100。 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="comment">#节点最好具有一个键名为 app 且取值为 fast 的标签。</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span> <span class="comment">#取值范围是 1 到 100</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">ssd</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">fast</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br></pre></td></tr></table></figure><h4 id="8-6-pod-间亲和性和反亲和性及权重"><a href="#8-6-pod-间亲和性和反亲和性及权重" class="headerlink" title="8.6 pod 间亲和性和反亲和性及权重"></a>8.6 pod 间亲和性和反亲和性及权重</h4><p>与节点亲和性类似，Pod 的亲和性与反亲和性也有两种类型：</p><ul><li><code>requiredDuringSchedulingIgnoredDuringExecution</code></li><li><code>preferredDuringSchedulingIgnoredDuringExecution</code></li></ul><p>例如，你可以使用 <code>requiredDuringSchedulingIgnoredDuringExecution</code> 亲和性来告诉调度器， 将两个服务的 Pod 放到同一个云提供商可用区内，因为它们彼此之间通信非常频繁。 类似地，你可以使用 <code>preferredDuringSchedulingIgnoredDuringExecution</code> 反亲和性来将同一服务的多个 Pod 分布到多个云提供商可用区中。</p><p>要使用 Pod 间亲和性，可以使用 Pod 规约中的 <code>spec.affinity.podAffinity</code> 字段。 对于 Pod 间反亲和性，可以使用 Pod 规约中的 <code>spec.affinity.podAntiAffinity</code> 字段。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:5.0.10</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="comment">#更确切的说，调度器必须将 Pod 调度到具有 cpu 标签的节点上，并且集群中至少有一个位于该可用区的节点上运行着带有 app=nginx 标签的 Pod。</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">topologyKey:</span> <span class="string">cpu</span></span><br><span class="line">          <span class="attr">labelSelector:</span></span><br><span class="line">            <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><ul><li><strong>pod 间亲和性权重</strong></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis:5.0.10</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="comment">#更确切的说，调度器必须将 Pod 调度到具有 cpu 标签的节点上，并且集群中至少有一个位于该可用区的节点上运行着带有 app=nginx 标签的 Pod。</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">podAffinityTerm:</span></span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">cpu</span></span><br><span class="line">            <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                  <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                  <span class="attr">values:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">podAffinityTerm:</span></span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">cpu</span></span><br><span class="line">            <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                  <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                  <span class="attr">values:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">weight:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="8-7-污点和容忍度"><a href="#8-7-污点和容忍度" class="headerlink" title="8.7 污点和容忍度"></a>8.7 污点和容忍度</h4><p>参考: <a href="http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/taint-and-toleration.html">http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/taint-and-toleration.html</a></p><h4 id="8-8-Pod-拓扑分布约束"><a href="#8-8-Pod-拓扑分布约束" class="headerlink" title="8.8 Pod 拓扑分布约束"></a>8.8 Pod 拓扑分布约束</h4><p>参考: <a href="http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/topology-spread-constraints/">http://kubernetes.p2hp.com/docs/concepts/scheduling-eviction/topology-spread-constraints/</a></p><h2 id="第四章-Controller-控制器"><a href="#第四章-Controller-控制器" class="headerlink" title="第四章 Controller 控制器"></a>第四章 Controller 控制器</h2><ul><li>什么是 Controller 以及作用</li><li>常见的 Controller 控制器</li><li>Controller 如何管理 Pod</li><li>Deployment 基本操作与应用</li><li>通过控制器实现 Pod 升级回滚和弹性伸缩</li><li>StatefulSet 基本操作与应用</li><li>Daemonset 基本操作与应用</li><li>Job 基本操作与应用</li><li>Controller 无法解决问题</li></ul><h3 id="1-Controller-控制器"><a href="#1-Controller-控制器" class="headerlink" title="1 Controller 控制器"></a>1 Controller 控制器</h3><p>官网: <a href="http://kubernetes.p2hp.com/docs/concepts/architecture/controller.html">http://kubernetes.p2hp.com/docs/concepts/architecture/controller.html</a></p><h4 id="1-1-什么是-Controller"><a href="#1-1-什么是-Controller" class="headerlink" title="1.1 什么是 Controller"></a>1.1 什么是 Controller</h4><p><code>Kubernetes 通常不会直接创建 Pod， 而是通过 Controller 来管理 Pod 的。</code><strong>Controller 中定义了 Pod 的部署特性，比如有几个副本、在什么样的 Node 上运行等</strong>。通俗的说可以认为 Controller 就是用来管理 Pod 一个对象。其核心作用可以通过一句话总结： <strong><code>通过监控集群的公共状态，并致力于将当前状态转变为期望的状态。</code></strong></p><p><strong>通俗定义:  controller 可以管理 pod 让 pod 更具有运维能力</strong></p><h4 id="1-2-常见的-Controller-控制器"><a href="#1-2-常见的-Controller-控制器" class="headerlink" title="1.2 常见的 Controller 控制器"></a>1.2 常见的 Controller 控制器</h4><ul><li><p><code>Deployment</code> 是最常用的 Controller。Deployment 可以管理 Pod 的多个副本，并确保 Pod 按照期望的状态运行。</p><ul><li>ReplicaSet 实现了 Pod 的多副本管理。使用 Deployment 时会自动创建 ReplicaSet,也就是说 Deployment 是通过 ReplicaSet 来管理 Pod 的多个副本的，我们通常不需要直接使用 ReplicaSet。</li></ul></li><li><p><code>Daemonset</code> 用于每个Node 最多只运行一个 Pod 副本的场景。正如其名称所揭示的，DaemonSet 通常用于运行 daemon。</p></li><li><p><code>Statefuleset</code> 能够保证 Pod 的每个副本在整个生命周期中名称是不变的，而其他Controller 不提供这个功能。当某个 Pod 发生故障需要删除并重新启动时，Pod 的名称会发生变化，同时 StatefuleSet 会保证副本按照固定的顺序启动、更新或者删除。</p></li><li><p><code>Job</code>  用于运行结束就删除的应用，而其他 Controller 中的 Pod 通常是长期持续运行。</p></li></ul><h4 id="1-3-Controller-如何管理-Pod"><a href="#1-3-Controller-如何管理-Pod" class="headerlink" title="1.3 Controller 如何管理 Pod"></a>1.3 Controller 如何管理 Pod</h4><p><strong><code>注意: Controller 通过 label 关联起来 Pods</code></strong></p><p><img src="https://minioweb.baizhiedu.xin/typora-imgs/2023/03/07/image-20230307105007568.png" alt="image-20230307105007568"></p><h3 id="2-Deployment"><a href="#2-Deployment" class="headerlink" title="2 Deployment"></a>2 Deployment</h3><p>官方地址: <a href="http://kubernetes.p2hp.com/docs/concepts/workloads/controllers/deployment.html">http://kubernetes.p2hp.com/docs/concepts/workloads/controllers/deployment.html</a></p><p>一个 Deployment 为 Pod 和 ReplicaSet提供声明式的更新能力。</p><p>你负责描述 Deployment 中的 <strong>目标状态</strong>，而 Deployment 控制器（Controller）以受控速率更改实际状态， 使其变为期望状态。你可以定义 Deployment 以创建新的 ReplicaSet，或删除现有 Deployment， 并通过新的 Deployment 收养其资源。</p><h4 id="2-1-创建-deployment"><a href="#2-1-创建-deployment" class="headerlink" title="2.1 创建 deployment"></a>2.1 创建 deployment</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="2-2-查看-deployment"><a href="#2-2-查看-deployment" class="headerlink" title="2.2 查看 deployment"></a>2.2 查看 deployment</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署应用</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f app.yaml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 deployment</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 pod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -o wide</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 pod 详情</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe pod pod-name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 deployment 详细</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe deployment 名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl logs pod-name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 Pod 容器终端， -c container-name 可以指定进入哪个容器。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it pod-name -- bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get deployment nginx-deployment -o yaml &gt;&gt; test.yaml</span></span><br></pre></td></tr></table></figure><ul><li><code>NAME</code> 列出了名字空间中 Deployment 的名称。</li><li><code>READY</code> 显示应用程序的可用的“副本”数。显示的模式是“就绪个数&#x2F;期望个数”。</li><li><code>UP-TO-DATE</code> 显示为了达到期望状态已经更新的副本数。</li><li><code>AVAILABLE</code> 显示应用可供用户使用的副本数。</li><li><code>AGE</code> 显示应用程序运行的时间。</li></ul><blockquote><p>请注意期望副本数是根据 <code>.spec.replicas</code> 字段设置 3。</p></blockquote><h4 id="2-3-扩缩-deployment"><a href="#2-3-扩缩-deployment" class="headerlink" title="2.3 扩缩 deployment"></a>2.3 扩缩 deployment</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询副本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get rs|replicaset</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">伸缩扩展副本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl scale deployment nginx --replicas=5</span></span><br></pre></td></tr></table></figure><h4 id="2-4-回滚-deployment"><a href="#2-4-回滚-deployment" class="headerlink" title="2.4 回滚 deployment"></a>2.4 回滚 deployment</h4><blockquote><p><strong>说明：</strong></p><p>仅当 Deployment Pod 模板（即 <code>.spec.template</code>）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 Deployment 上线。其他更新（如对 Deployment 执行扩缩容的操作）不会触发上线动作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看上线状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout status [deployment nginx-deployment | deployment/nginx]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某次历史的详细信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment --revision=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到上个版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout undo deployment nginx-deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到指定版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout undo deployment nginx-deployment --to-revision=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新部署</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout restart deployment nginx-deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停运行，暂停后，对 deployment 的修改不会立刻生效，恢复后才应用设置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout pause deployment ngixn-deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl rollout resume deployment nginx-deployment</span></span><br></pre></td></tr></table></figure><h4 id="2-5-删除-deployment"><a href="#2-5-删除-deployment" class="headerlink" title="2.5 删除 deployment"></a>2.5 删除 deployment</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 Deployment</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete deployment nginx-deployment</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubect delete -f nginx-deployment.yml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除默认命名空间下全部资源</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete all --all</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定命名空间的资源</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete all --all -n 命名空间的名称</span></span><br></pre></td></tr></table></figure><h3 id="3-StatefulSet"><a href="#3-StatefulSet" class="headerlink" title="3 StatefulSet"></a>3 StatefulSet</h3><h4 id="3-1-什么是-StatefulSet"><a href="#3-1-什么是-StatefulSet" class="headerlink" title="3.1 什么是 StatefulSet"></a>3.1 什么是 StatefulSet</h4><p>官方地址： <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/statefulset/">https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/statefulset/</a></p><p><strong>StatefulSet 是用来管理<code>有状态应用</code>的工作负载 API 对象。</strong></p><p><strong>无状态应用: 应用本身不存储任何数据的应用称之为无状态应用。</strong></p><p><strong>有状态应用: 应用本身需要存储相关数据应用称之为有状态应用。</strong></p><p>博客: 前端vue  后端 java   mysql redis es ….</p><p>数据采集:  采集程序 有状态应用</p><p>StatefulSet 用来管理某 Pod 集合的部署和扩缩， <strong>并为这些 Pod 提供持久存储和持久标识符。</strong></p><p>和 Deployment 类似， StatefulSet 管理基于相同容器规约的一组 Pod。但和 Deployment 不同的是， <strong>StatefulSet 为它们的每个 Pod 维护了一个有粘性的 ID。这些 Pod 是基于相同的规约来创建的， 但是不能相互替换：无论怎么调度，每个 Pod 都有一个永久不变的 ID。</strong></p><p>如果希望使用存储卷为工作负载提供持久存储，可以使用 StatefulSet 作为解决方案的一部分。 尽管 StatefulSet 中的单个 Pod 仍可能出现故障， 但持久的 Pod 标识符使得将现有卷与替换已失败 Pod 的新 Pod 相匹配变得更加容易。</p><h4 id="3-2-StatefulSet-特点"><a href="#3-2-StatefulSet-特点" class="headerlink" title="3.2 StatefulSet 特点"></a>3.2 StatefulSet 特点</h4><p>StatefulSet 对于需要满足以下一个或多个需求的应用程序很有价值：</p><ul><li>稳定的、唯一的网络标识符。</li><li>稳定的、持久的存储。</li><li>有序的、优雅的部署和扩缩。</li><li>有序的、自动的滚动更新。</li></ul><p>在上面描述中，“稳定的”意味着 Pod 调度或重调度的整个过程是有持久性的。 如果应用程序不需要任何稳定的标识符或有序的部署、删除或扩缩， 则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如 Deployment或者 ReplicaSet 可能更适用于你的无状态应用部署需要。</p><h4 id="3-3-限制"><a href="#3-3-限制" class="headerlink" title="3.3 限制"></a>3.3 限制</h4><ul><li>给定 Pod 的存储必须由 PersistentVolume Provisioner 基于所请求的 <code>storage class</code> 来制备，或者由管理员预先制备。</li><li>删除或者扩缩 StatefulSet 并<strong>不会</strong>删除它关联的存储卷。 这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。</li><li>StatefulSet 当前需要<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#headless-services">无头服务</a>来负责 Pod 的网络标识。你需要负责创建此服务。</li><li>当删除一个 StatefulSet 时，该 StatefulSet 不提供任何终止 Pod 的保证。 为了实现 StatefulSet 中的 Pod 可以有序且体面地终止，可以在删除之前将 StatefulSet 缩容到 0。</li><li>在默认 Pod 管理策略(<code>OrderedReady</code>) 时使用滚动更新， 可能进入需要人工干预才能修复的损坏状态。</li></ul><h4 id="3-4-使用-StatefulSet"><a href="#3-4-使用-StatefulSet" class="headerlink" title="3.4 使用 StatefulSet"></a>3.4 使用 StatefulSet</h4><h5 id="1-搭建-NFS-服务"><a href="#1-搭建-NFS-服务" class="headerlink" title="1 搭建 NFS 服务"></a>1 搭建 NFS 服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装nfs-utils</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y rpcbind nfs-utils</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建nfs目录</span></span><br><span class="line">mkdir -p /root/nfs/data</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑/etc/exports输入如下内容</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">insecure:通过 1024 以上端口发送 rw: 读写 <span class="built_in">sync</span>:请求时写入共享 no_root_squash:root用户有完全根目录访问权限</span></span><br><span class="line">echo  &quot;/root/nfs/data *(insecure,rw,sync,no_root_squash)&quot; &gt;&gt; /etc/exports</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动相关服务并配置开机自启动</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable nfs-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新挂载 使 /etc/exports生效</span></span><br><span class="line">exportfs -r</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看共享情况</span></span><br><span class="line">exportfs</span><br></pre></td></tr></table></figure><h5 id="2-客户端测试"><a href="#2-客户端测试" class="headerlink" title="2 客户端测试"></a>2 客户端测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.安装客户端 所有节点安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install -y nfs-utils</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.创建本地目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p /root/nfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.挂载远程nfs目录到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -t nfs 10.15.0.9:/root/nfs /root/nfs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.写入一个测试文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;hello nfs server&quot;</span> &gt; /root/nfs/test.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.去远程 nfs 目录查看</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /root/nfs/test.txt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂取消载</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">umount -f -l nfs目录</span></span><br></pre></td></tr></table></figure><h5 id="3-使用-statefulset"><a href="#3-使用-statefulset" class="headerlink" title="3 使用 statefulset"></a>3 使用 statefulset</h5><ul><li>class.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span> <span class="comment"># or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><ul><li>nfs-client-provider</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">chronolaw/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/root/nfs/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/root/nfs/data</span></span><br></pre></td></tr></table></figure><ul><li>rbac.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><ul><li>mysql.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ems</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-nfs-sc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ems</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">onDelete:</span> <span class="string">&quot;remain&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ems</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">mysql</span> <span class="comment">#headless 无头服务  保证网络标识符唯一  必须存在</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql/mysql-server:8.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span> <span class="comment">#自己容器写入数据目录</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">data</span>    <span class="comment">#保存到指定一个变量中 变量名字就是 data</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>  <span class="comment">#声明动态创建数据卷模板</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">data</span>      <span class="comment"># 数据卷变量名称</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ems</span>  <span class="comment"># 在哪个命名空间创建数据卷</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span>    <span class="comment"># 访问数据卷模式是什么  </span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">        <span class="attr">storageClassName:</span> <span class="string">mysql-nfs-sc</span> <span class="comment"># 使用哪个 storage class 模板存储数据</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">2G</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="4-DaemonSet"><a href="#4-DaemonSet" class="headerlink" title="4 DaemonSet"></a>4 DaemonSet</h3><h4 id="4-1-什么是-DaemonSet"><a href="#4-1-什么是-DaemonSet" class="headerlink" title="4.1 什么是 DaemonSet"></a>4.1 什么是 DaemonSet</h4><p><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/daemonset/">https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/daemonset/</a></p><p><strong>DaemonSet</strong> 确保全部（或者某些）节点上运行一个 Pod 的副本。 当有节点加入集群时， 也会为他们新增一个 Pod 。 当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p><p>DaemonSet 的一些典型用法：</p><ul><li>在每个节点上运行集群守护进程</li><li>在每个节点上运行日志收集守护进程</li><li>在每个节点上运行监控守护进程</li></ul><p>一种简单的用法是为每种类型的守护进程在所有的节点上都启动一个 DaemonSet。 一个稍微复杂的用法是为同一种守护进程部署多个 DaemonSet；每个具有不同的标志， 并且对不同硬件类型具有不同的内存、CPU 要求。</p><h4 id="4-2-使用-DaemonSet"><a href="#4-2-使用-DaemonSet" class="headerlink" title="4.2 使用 DaemonSet"></a>4.2 使用 DaemonSet</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><h3 id="5-Job"><a href="#5-Job" class="headerlink" title="5 Job"></a>5 Job</h3><h4 id="5-1-什么是-Job"><a href="#5-1-什么是-Job" class="headerlink" title="5.1 什么是 Job"></a>5.1 什么是 Job</h4><p><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/job/">https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/job/</a></p><p>Job 会创建一个或者多个 Pod，并将继续重试 Pod 的执行，直到指定数量的 Pod 成功终止。 随着 Pod 成功结束，Job 跟踪记录成功完成的 Pod 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。 删除 Job 的操作会清除所创建的全部 Pod。 挂起 Job 的操作会删除 Job 的所有活跃 Pod，直到 Job 被再次恢复执行。</p><p>一种简单的使用场景下，你会创建一个 Job 对象以便以一种可靠的方式运行某 Pod 直到完成。 当第一个 Pod 失败或者被删除（比如因为节点硬件失效或者重启）时，Job 对象会启动一个新的 Pod。</p><p>你也可以使用 Job 以并行的方式运行多个 Pod。</p><h4 id="5-2-使用-Job"><a href="#5-2-使用-Job" class="headerlink" title="5.2 使用 Job"></a>5.2 使用 Job</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl:5.34.0</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>,  <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="comment"># 当前任务出现失败 最大的重试次数</span></span><br><span class="line">  <span class="attr">backoffLimit:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="5-3-自动清理完成的-Job"><a href="#5-3-自动清理完成的-Job" class="headerlink" title="5.3 自动清理完成的 Job"></a>5.3 自动清理完成的 Job</h4><p>完成的 Job 通常不需要留存在系统中。在系统中一直保留它们会给 API 服务器带来额外的压力。 如果 Job 由某种更高级别的控制器来管理，例如 <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/cron-jobs/">CronJob</a>， 则 Job 可以被 CronJob 基于特定的根据容量裁定的清理策略清理掉。</p><ul><li><strong>已完成 Job 的 TTL 机制</strong><ul><li>自动清理已完成 Job （状态为 <code>Complete</code> 或 <code>Failed</code>）的另一种方式是使用由 TTL 控制器所提供的 TTL 机制。 通过设置 Job 的 <code>.spec.ttlSecondsAfterFinished</code> 字段，可以让该控制器清理掉已结束的资源。TTL 控制器清理 Job 时，会级联式地删除 Job 对象。 换言之，它会删除所有依赖的对象，包括 Pod 及 Job 本身。 注意，当 Job 被删除时，系统会考虑其生命周期保障，例如其 Finalizers。</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi-with-ttl</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl:5.34.0</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>,  <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>Job <code>pi-with-ttl</code> 在结束 100 秒之后，可以成为被自动删除的对象。如果该字段设置为 <code>0</code>，Job 在结束之后立即成为可被自动删除的对象。 如果该字段没有设置，Job 不会在结束之后被 TTL 控制器自动清除。</p><h3 id="6-控制器无法解决问题"><a href="#6-控制器无法解决问题" class="headerlink" title="6 控制器无法解决问题"></a>6 控制器无法解决问题</h3><ul><li>如何为 Pod 提供网络服务</li><li>如何实现多个 Pod 间负载均衡</li></ul><h2 id="第五章-Service"><a href="#第五章-Service" class="headerlink" title="第五章 Service"></a>第五章 Service</h2><ul><li>什么是 Service </li><li>为什么需要 Service</li><li>Service 特性 </li><li>Service 与 Pod 关联</li><li>Service type 类型</li><li>如何使用 Service</li><li>多端口配置</li></ul><h3 id="1-什么是-Service"><a href="#1-什么是-Service" class="headerlink" title="1 什么是 Service"></a>1 什么是 Service</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>官网地址: <a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/</a></p><p>将运行在一个或一组 Pod 上的网络应用程序公开为网络服务的方法。</p><p><strong>通俗定义: Service 用来为 pod 提供网络服务的一种方式。</strong></p><h4 id="1-2-为什么需要-Service"><a href="#1-2-为什么需要-Service" class="headerlink" title="1.2 为什么需要 Service"></a>1.2 为什么需要 Service</h4><p>问题:  如果一组 Pod（称为“后端”）为集群内的其他 Pod（称为“前端”）提供功能， 那么前端如何找出并跟踪要连接的 IP 地址，以便前端可以使用提供工作负载的后端部分？</p><p><img src="https://minioweb.baizhiedu.xin/typora-imgs/2023/03/07/image-20230307133342270.png" alt="image-20230307133342270"></p><p>如果这是一个图片处理后端，它运行了 3 个副本。这些副本是可互换的 —— 前端不需要关心它们调用了哪个后端副本。 然而组成这一组后端程序的 Pod 实际上可能会发生变化， 前端客户端不应该也没必要知道，而且也不需要跟踪这一组后端的状态。<strong>Service 定义的抽象能够解耦这种关联</strong>。</p><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20230307134050380.png" alt="image-20230307134050380"></p><h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2 特性"></a>2 特性</h3><ul><li>Service 通过 label 关联对应的 Pod</li><li>Servcie 生命周期不跟 Pod 绑定，不会因为 Pod 重新创建而改变 IP</li><li>提供了负载均衡功能，自动转发流量到不同 Pod</li><li>可对集群外部提供访问端口</li><li>集群内部可通过服务名字访问</li></ul><h3 id="3-Service-和-Pod-关系"><a href="#3-Service-和-Pod-关系" class="headerlink" title="3 Service 和 Pod 关系"></a>3 Service 和 Pod 关系</h3><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/image-20230307132243053.png" alt="image-20230307132243053"></p><h3 id="4-使用-Service"><a href="#4-使用-Service" class="headerlink" title="4 使用 Service"></a>4 使用 Service</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#service 端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span> <span class="comment">#容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31001</span> <span class="comment">#node 节点端口 固定在 30000-32767 之间</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p><strong><code>注意:节点端口固定在 30000-32767 之间</code></strong></p><h3 id="5-多端口"><a href="#5-多端口" class="headerlink" title="5 多端口"></a>5 多端口</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#service 端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span> <span class="comment">#容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31001</span> <span class="comment">#node 节点端口 固定在 30000-32767 之间</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">read</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31002</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><h3 id="6-类型-type"><a href="#6-类型-type" class="headerlink" title="6 类型 type"></a>6 类型 type</h3><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/</a></p><p>对一些应用的某些部分（如前端），可能希望将其暴露给 Kubernetes 集群外部的 IP 地址。</p><p>Kubernetes <code>ServiceTypes</code> 允许指定你所需要的 Service 类型。</p><ul><li><code>ClusterIP</code>：在集群内部暴露 Service，只能被集群内部的其他对象访问，通常用于内部服务发现，不会向集群外部暴露。</li><li><code>NodePort</code>：将 Service 暴露在 Node 的某个端口上，从而可以通过 Node 的 IP 地址和端口号来访问 Service，通常用于开发和测试环境。</li><li><code>LoadBalancer</code>：通过云服务商提供的负载均衡器来将 Service 暴露到公网上，使得外部用户可以访问 Service。</li><li><code>ExternalName</code>：将 Service 映射到一个 DNS 名称上，从而可以通过 DNS 名称来访问 Service，通常用于访问外部服务。</li></ul><h4 id="6-1-ClusterIP-类型"><a href="#6-1-ClusterIP-类型" class="headerlink" title="6.1 ClusterIP 类型"></a>6.1 ClusterIP 类型</h4><ul><li><code>这是最常用的 Service 类型之一</code>。在集群内部创建一个虚拟 IP 地址，它可以被其他在同一集群内的 Pod 访问，但不能被集群外部的请求所访问。这种类型的服务通常用于内部服务的暴露，例如数据库或者缓存服务。比如在一个 Web 应用中，你可能需要连接到一个数据库，但是这个数据库并不需要在应用之外暴露。这时候，你可以使用 ClusterIP 类型的 Service，让应用可以访问到数据库。</li></ul><h4 id="6-2-NodePort-类型"><a href="#6-2-NodePort-类型" class="headerlink" title="6.2 NodePort 类型"></a>6.2 NodePort 类型</h4><ul><li><p>这种类型的 Service 将会创建一个端口，并绑定到每个集群节点上，从而允许外部流量访问 Service。这个类型通常用于公共服务的暴露，例如 Web 应用或者 API。比如你需要在集群外部访问到一个运行在集群中的 Web 应用，你就可以创建一个 NodePort 类型的 Service，通过指定 Service 的 <code>nodePort</code> 字段，来将 Service 暴露给集群外部。</p></li><li><p>如果你将 <code>type</code> 字段设置为 <code>NodePort</code>，则 Kubernetes 控制平面将在 <code>--service-node-port-range</code> 标志指定的范围内分配端口（默认值：30000-32767）。</p></li></ul><h4 id="6-3-LoadBalancer-类型"><a href="#6-3-LoadBalancer-类型" class="headerlink" title="6.3 LoadBalancer 类型"></a>6.3 LoadBalancer 类型</h4><ul><li>这种类型的 Service 类似于 NodePort，但是会在云厂商中创建一个负载均衡器。这个类型通常用于在云平台上部署应用。云平台的负载均衡器将流量分发到集群中的节点。这个类型的 Service 只能在云平台上使用，并且需要云厂商提供支持。</li></ul><h4 id="6-4-ExternalName-类型"><a href="#6-4-ExternalName-类型" class="headerlink" title="6.4 ExternalName 类型"></a>6.4 ExternalName 类型</h4><ul><li>这种类型的 Service 允许 Service 到任何需要访问的 CNAME DNS 条目的转发。与其它类型的 Service 不同，它并不会代理请求到任何 Pod。相反，它将请求转发到配置的外部地址。这种类型的 Service 通常用于将服务代理到集群外部的其他服务。比如你有一个运行在外部网络上的服务，你希望在 Kubernetes 集群中使用该服务，这时候你可以创建一个 ExternalName 类型的 Service，将服务的 DNS 解析到 Kubernetes 集群中。</li></ul><h3 id="7-内部通信"><a href="#7-内部通信" class="headerlink" title="7 内部通信"></a>7 内部通信</h3><h4 id="7-1-创建-pod"><a href="#7-1-创建-pod" class="headerlink" title="7.1 创建 pod"></a>7.1 创建 pod</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql/mysql-server:8.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="comment">#command: [&quot;/bin/sh&quot;, &quot;-c&quot;]</span></span><br><span class="line">        <span class="comment">#args:</span></span><br><span class="line">        <span class="comment">#- apt-get update &amp;&amp; apt-get install -y mysql-client &amp;&amp; nginx -g &#x27;daemon off;&#x27;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><h4 id="7-2-相互访问"><a href="#7-2-相互访问" class="headerlink" title="7.2 相互访问"></a>7.2 相互访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 nginx 访问mysql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql -h mysql -uroot -ppassword</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：这里的 mysql 是 MySQL Service 的名称，而不是 Pod 的名称。</span></span><br></pre></td></tr></table></figure><h2 id="第六章-存储"><a href="#第六章-存储" class="headerlink" title="第六章 存储"></a>第六章 存储</h2><ul><li>什么是卷 Volume</li><li>常用卷的类型</li><li>使用方式</li><li>Persistent Volume 和 Persistent Volume Claim</li><li>静态供给</li><li>动态供给</li></ul><h3 id="1-卷-Volume"><a href="#1-卷-Volume" class="headerlink" title="1 卷 Volume"></a>1 卷 Volume</h3><p>官网地址: <a href="https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/">https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/</a></p><p>Container 中的文件在磁盘上是临时存放的，这给 Container 中运行的较重要的应用程序带来一些问题。 问题之一是当容器崩溃时文件丢失。 kubelet 会重新启动容器，但容器会以干净的状态重启。 第二个问题会在同一 <code>Pod</code> 中运行多个容器并共享文件时出现。 <strong><code>Kubernetes Volume 这一抽象概念能够解决这两个问题。</code></strong></p><h3 id="2-卷的类型"><a href="#2-卷的类型" class="headerlink" title="2 卷的类型"></a>2 卷的类型</h3><p>Kubernetes 支持很多类型的卷。 Pod 可以同时使用任意数目的卷类型。 临时卷类型的生命周期与 Pod 相同，但持久卷可以比 Pod 的存活期长。 当 Pod 不再存在时，Kubernetes 也会销毁临时卷；不过 Kubernetes 不会销毁持久卷。 对于给定 Pod 中任何类型的卷，在容器重启期间数据都不会丢失。</p><p>卷的核心是一个目录，其中可能存有数据，Pod 中的容器可以访问该目录中的数据。 所采用的不同卷的类型将决定该目录如何形成的、使用何种介质保存数据以及目录中存放的内容。常用的卷类型有 <strong>configMap、emptyDir、local、nfs、secret</strong> 等。</p><ul><li>ConfigMap：可以将配置文件以键值对的形式保存到 ConfigMap 中，并且可以在 Pod 中以文件或环境变量的形式使用。ConfigMap 可以用来存储不敏感的配置信息，如应用程序的配置文件。</li><li>EmptyDir：是一个空目录，可以在 Pod 中用来存储临时数据，当 Pod 被删除时，该目录也会被删除。</li><li>Local：将本地文件系统的目录或文件映射到 Pod 中的一个 Volume 中，可以用来在 Pod 中共享文件或数据。</li><li>NFS：将网络上的一个或多个 NFS 共享目录挂载到 Pod 中的 Volume 中，可以用来在多个 Pod 之间共享数据。</li><li>Secret：将敏感信息以密文的形式保存到 Secret 中，并且可以在 Pod 中以文件或环境变量的形式使用。Secret 可以用来存储敏感信息，如用户名密码、证书等。</li></ul><h3 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3 使用方式"></a>3 使用方式</h3><p>使用卷时, 在 <code>.spec.volumes</code> 字段中设置为 Pod 提供的卷，并在 <code>.spec.containers[*].volumeMounts</code> 字段中声明卷在容器中的挂载位置。 容器中的进程看到的文件系统视图是由它们的容器镜像的初始内容以及挂载在容器中的卷（如果定义了的话）所组成的。 其中根文件系统同容器镜像的内容相吻合。 任何在该文件系统下的写入操作，如果被允许的话，都会影响接下来容器中进程访问文件系统时所看到的内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">     <span class="string">..........</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="string">............</span></span><br></pre></td></tr></table></figure><h3 id="4-常见类型"><a href="#4-常见类型" class="headerlink" title="4 常见类型"></a>4 常见类型</h3><h4 id="4-1-emptyDir"><a href="#4-1-emptyDir" class="headerlink" title="4.1 emptyDir"></a>4.1 emptyDir</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">emptydir-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">writer</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;Hello World!&#x27; &gt; /data/hello.txt ; sleep 3600&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">reader</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /data/hello.txt ; sleep 3600&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>总结: emptyDir 是 Host 上创建的临时目录，其优点是能够方便地为 Pod 中的容器提供共享存储，不需要额外的配置。它不具备持久性，如果Pod 不存在了，emptyDir 也就没有了。根据这个特性，emptyDir 特别适合 Pod 中的容器需要临时共享存储空间的场景，比如前面的生产者消费者用例。</code></p><h4 id="4-2-hostPath"><a href="#4-2-hostPath" class="headerlink" title="4.2 hostPath"></a>4.2 hostPath</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-hostpath</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;hello&#x27; &gt; /data/data.txt &amp;&amp; sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data/hostpath</span></span><br></pre></td></tr></table></figure><p><code>总结: 如果 Pod 被销毀了，hostPath 对应的目录还是会被保留，从这一点来看，hostPath 的持久性比emptyDir 强。不过一旦Host 崩溃，hostPath 也就无法访问了。但是这种方式也带来另外一个问题增加了 pod 与节点的耦合。</code></p><h4 id="4-3-nfs"><a href="#4-3-nfs" class="headerlink" title="4.3 nfs"></a>4.3 nfs</h4><p>nfs: network filesystem : 网络文件存储系统</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;while true; do sleep 3600; done&quot;</span> ]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/mnt/nfs</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">&lt;NFS_SERVER_IP&gt;</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/path/to/nfs/share</span></span><br></pre></td></tr></table></figure><p><code>总结: 相对于 emptyDir 和 hostPath，这种 volume 类型的最大特点就是不依赖 Kuberees Volume 的底层基础设施由独立的存储系统管理，与 Kubernetes 集群是分离的。数据被持久化后，即使整个 Kubernetes 崩溃也不会受损。当然，运维这样的存储系统通常不是一项简单的工作，特别是对可靠性、可用性和扩展性 有较高要求的时候。</code></p><h3 id="5-PV-amp-PVC"><a href="#5-PV-amp-PVC" class="headerlink" title="5 PV &amp;  PVC"></a>5 PV &amp;  PVC</h3><h4 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h4><p>Volume 提供了非常好的数据持久化方案，不过在可管理性上还有不足。前面 nfs 例子来说，要使用 Volume， Pod 必须事先知道以下信息：</p><ul><li>当前的 Volume 类型并明确 Volume 已经创建好。</li><li>必须知道 Volume 的具体地址信息。</li></ul><p>但是 Pod 通常是由应用的开发人员维护，而 Volume 则通常是由存储系统的管理员维护。开发人员要获得上面的信息，要么询问管理员，要么自己就是管理员。这样就带来一个管理上的问题：应用开发人员和系统管理员的职责耦合在一起了。如果系统规模较小或者对于开发环境，这样的情况还可以接受，当集群规模变大，特别是对于生产环境，考虑到效率和安全性，这就成了必须要解决的问题。</p><h4 id="5-2-PV-amp-PVC"><a href="#5-2-PV-amp-PVC" class="headerlink" title="5.2 PV &amp;  PVC"></a>5.2 PV &amp;  PVC</h4><p>Kubernetes 给出的解决方案是 <code>Persistent Volume 和 Persistent Volume Claim</code>。</p><p>PersistentVolume(PV）是外部存储系统中的一块存储空间，由管理员创建和维护。与 Volume 一样，PV 具有持久性，生命周期独立于 Pod。</p><p>Persistent Volume Claim (PVC)是对 PV 的申请 (Claim）。PVC 通常由普通用户创建和维护。需要为 Pod 分配存储资源时，用户可以创建一个PVC，指明存储资源的容量大小和访问模式 （比如只读）等信息，Kubernetes 会查找并提供满足条件的 PV。有了 PersistentVolumeClaim，用户只需要告诉 Kubernetes 需要什么样的存储资源，而不必关心真正的空间从哪里分配、如何访问等底层细节信息。这些 Storage Provider 的底层信息交给管理员来处理，只有管理员才应该关心创建 PersistentVolume 的细节信息。</p><h4 id="5-3-基本使用"><a href="#5-3-基本使用" class="headerlink" title="5.3 基本使用"></a>5.3 基本使用</h4><ul><li>创建 PV</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span> <span class="comment">#指定容量大小</span></span><br><span class="line">  <span class="attr">accessModes:</span> <span class="comment"># 访问模式 </span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/&#123;nfs-server目录名称&#125;</span></span><br><span class="line">    <span class="attr">server:</span> &#123;<span class="string">nfs-server</span> <span class="string">IP</span> <span class="string">地址</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p>**accessModes: ** 支持的访问模式有3种：</p><ul><li>ReadWriteOnce 表示 PV 能以 readwrite 模式 mount 到单个节点<ul><li>这个PV只能被某个节点以读写方式挂载，意味着这个PV只能被一个Pod挂载到某个节点上，并且这个Pod可以对这个PV进行读写操作。如果尝试在其他节点上挂载这个PV，就会失败。</li></ul></li><li>ReadOnlyMany  表示 PV 能以 read-only 模式 mount 到多个节点，<ul><li>这个PV能被多个节点以只读方式挂载，意味着这个PV可以被多个Pod挂载到多个节点上。</li></ul></li><li>ReadWriteMany 表示 PV 能以 read-write 模式 mount 到多个节点。<ul><li>这个PV能被多个节点以读写方式挂载，意味着这个PV可以被多个Pod挂载到多个节点上。</li></ul></li></ul></li><li><p><strong>persistentVolumeReclaimPolicy:</strong> 指定当 PV 的回收策略支持的策略有3种：</p><ul><li><p>Retain：在 PVC 被删除后，保留 PV 和其数据，手动清理 PV 中的数据。</p></li><li><p>Delete：在 PVC 被删除后，自动删除 PV 和其数据。</p></li><li><p>Recycle：在 PVC 被删除后，通过删除 PV 中的数据来准备 PV 以供重新使用。</p><p><code>值得注意的是，</code>persistentVolumeReclaimPolicy<code> 只适用于一些类型的 PV，如 NFS、HostPath、iSCSI 等。对于一些云平台提供的存储，如 AWS EBS 和 Azure Disk，由于底层提供商会自动处理 PV 的回收问题，因此该属性不适用。</code></p></li></ul></li><li><p><strong>storageClassName:</strong> 指定 PV 的class 为 nfs。相当于为 PV 设置了一个分类，PVC可以指定 class 申请相应 class 的 PV。</p></li><li><p>创建 PVC</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span> <span class="comment"># 通过名字进行选择</span></span><br><span class="line">  <span class="comment">#selector:  通过标签形式</span></span><br><span class="line">  <span class="comment">#  matchLabels:</span></span><br><span class="line">  <span class="comment">#    pv-name: nfs-pv</span></span><br></pre></td></tr></table></figure><ul><li>使用 PVC</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-nfs</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;while true; do echo &#x27;Hello NFS!&#x27; &gt;&gt; /data/index.html; sleep 1; done&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">    <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">      <span class="attr">claimName:</span> <span class="string">nfs-pvc</span></span><br></pre></td></tr></table></figure><h4 id="5-4-动态供给"><a href="#5-4-动态供给" class="headerlink" title="5.4 动态供给"></a>5.4 动态供给</h4><p>在前面的例子中，我们提前创建了PV，然后通过 PVC 申请 PV 并在Pod 中使用，这种方式叫作静态供给 ( Static Provision)与之对应的是动态供给 (Dynamical Provision），即如果没有满足PVC 条件的PV，会动态创建 PV。相比静态供给，动态供给有明显的优势：不需要提前创建 PV，减少了管理员<br>的工作量，效率高。动态供给是通过 StorageClass 实现的，StorageClass 定义了如何创建 PV，但需要注意的是每个 StorageClass 都有一个制备器（Provisioner），用来决定使用哪个卷插件制备 PV。 该字段必须指定。(<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/">https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/</a>) 才能实现动态创建，下面我们以 NFS 为例：</p><ul><li><p>定义 NFS Provider</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">chronolaw/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.25</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/root/nfs/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.25</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/root/nfs/data</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure></li><li><p>定义 StorageClass</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-nfs-sc</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">onDelete:</span> <span class="string">&quot;remain&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 StorageClass 动态创建</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">mysql</span> <span class="comment">#headless 无头服务  保证网络标识符唯一  必须存在</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql/mysql-server:8.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span> <span class="comment">#自己容器写入数据目录</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">data</span>    <span class="comment">#保存到指定一个变量中 变量名字就是 data</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>  <span class="comment">#声明动态创建数据卷模板</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">data</span>      <span class="comment"># 数据卷变量名称</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span>    <span class="comment"># 访问模式</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">        <span class="attr">storageClassName:</span> <span class="string">mysql-nfs-sc</span> <span class="comment"># 使用哪个 storage class 模板存储数据</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">2G</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第七章-ConfigMap-amp-Secret"><a href="#第七章-ConfigMap-amp-Secret" class="headerlink" title="第七章 ConfigMap &amp; Secret"></a>第七章 ConfigMap &amp; Secret</h2><ul><li>ConfigMap </li><li>Secret</li></ul><h3 id="1-ConfigMap"><a href="#1-ConfigMap" class="headerlink" title="1 ConfigMap"></a>1 ConfigMap</h3><h4 id="1-1-简介-1"><a href="#1-1-简介-1" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><p>在 Kubernetes 中，<strong>ConfigMap 是一种用于存储非敏感信息的 Kubernetes 对象</strong>。它用于存储配置数据，如键值对、整个配置文件或 JSON 数据等。ConfigMap 通常用于容器镜像中的配置文件、命令行参数和环境变量等。</p><p>ConfigMap 可以通过三种方式进行配置数据的注入：</p><ol><li>环境变量注入：将配置数据注入到 Pod 中的容器环境变量中。</li><li>配置文件注入：将配置数据注入到 Pod 中的容器文件系统中，容器可以读取这些文件。</li><li>命令行参数注入：将配置数据注入到容器的命令行参数中。</li></ol><h4 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h4><ol><li>避免了硬编码，将配置数据与应用代码分离。</li><li>便于维护和更新，可以单独修改 ConfigMap 而不需要重新构建镜像。</li><li>可以通过多种方式注入配置数据，更加灵活。</li><li>可以通过 Kubernetes 的自动化机制对 ConfigMap 进行版本控制和回滚。</li><li>ConfigMap 可以被多个 Pod 共享，减少了配置数据的重复存储。</li></ol><h4 id="1-3-定义-ConfigMap"><a href="#1-3-定义-ConfigMap" class="headerlink" title="1.3 定义 ConfigMap"></a>1.3 定义 ConfigMap</h4><ul><li><p><strong>基本操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 configmap</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get configmap/cm</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详细</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl describe configmap/cm my-config</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 cm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete cm my-config</span></span><br></pre></td></tr></table></figure></li><li><p><strong>命令行创建</strong>：</p><ul><li><p>可以使用<code>kubectl create configmap</code>命令来创建configmap，具体命令如下：</p></li><li><pre><code class="shell">$ kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **通过配置文件创建**：**推荐**</span><br><span class="line"></span><br><span class="line">  - 可以通过创建YAML文件的方式来定义configmap的内容。例如，创建一个名为`my-config`的configmap，内容如下：</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: ConfigMap</span><br><span class="line">    metadata:</span><br><span class="line">      name: my-config</span><br><span class="line">    data:</span><br><span class="line">      key1: value1</span><br><span class="line">      key2: value2</span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;yaml<br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: app-config<br>data:<br>  application.yml: |<br>name: xiaochen</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 然后使用`kubectl apply -f`命令来创建configmap。</span><br><span class="line"></span><br><span class="line">- **通过文件创建:**</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    $ echo -n admin &gt;./username</span><br><span class="line">    $ echo -n 123456 &gt; ./password</span><br><span class="line">    $ kubectl create configmap myconfigmap --from-file=./username --from-file=./password</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>通过文件夹创建</strong>：</p><ul><li><p>可以将多个配置文件放在同一个文件夹下，然后使用<code>kubectl create configmap</code>命令来创建configmap，例如：</p></li><li><p>&#96;&#96;&#96;shell<br>$ kubectl create configmap my-config –from-file&#x3D;config-files&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这将创建一个名为`my-config`的configmap，其中包含`config-files/`文件夹下所有的文件内容作为键值对。</span><br><span class="line"></span><br><span class="line">- **通过环境变量创建**：</span><br><span class="line"></span><br><span class="line">  - 可以将环境变量的值转换为configmap。例如，使用以下命令将当前环境变量的值转换为configmap：</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    $ kubectl create configmap my-config --from-env-file=&lt;(env)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-4-使用"><a href="#1-4-使用" class="headerlink" title="1.4 使用"></a>1.4 使用</h4><ul><li>环境变量中使用</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo $BUSY_NAME ; sleep 3600;&quot;</span>]</span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># name: 是容器需要环境变量名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BUSY_NAME</span></span><br><span class="line">    <span class="comment"># valueForm: value 来源与什么</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span>  <span class="comment"># 值来源与 configmap  来源与哪个 configmap 来源与哪个 configmap 中 key</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">app-cm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">name</span></span><br><span class="line">    <span class="comment"># 一次性注入这个 configmap</span></span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my-config</span></span><br></pre></td></tr></table></figure><p><code>注意: env 是指定 configmap 中某个 key 进行注入  envForm 将 configmap 中内容全部注入</code></p><ul><li>通过 Volume 使用配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">application-cm</span></span><br></pre></td></tr></table></figure><h3 id="2-Secret"><a href="#2-Secret" class="headerlink" title="2 Secret"></a>2 Secret</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p>在 Kubernetes 中，Secret 是一种用于存储和管理敏感信息的对象类型，如密码、API密钥、证书等等。它们与 ConfigMap 相似，但在处理敏感信息时，Secret 会提供更高的安全性和保密性。</p><p>Secret 可以用于将这些敏感信息注入到容器中，并确保这些信息在运行时不会被意外泄漏或暴露给其他人。Secret 可以通过多种方式定义和使用，例如直接定义、从文件中加载、从环境变量中加载等。</p><p>在 Kubernetes 中，Secrets 通常被用于以下场景：</p><ul><li>作为卷挂载到 Pod 中，用于存储证书、密钥等敏感文件</li><li>在 Pod 中使用环境变量，用于存储用户名和密码等敏感信息</li><li>用于存储 Docker 镜像仓库的登录信息</li><li>用于存储外部服务的 API 密钥</li></ul><p>Secrets 可以在 Pod 的 spec 中通过 volume 和环境变量的方式引用。当容器使用 volume 来引用 Secret 时，Secret 会以文件的形式挂载到容器中。当容器使用环境变量来引用 Secret 时，Secret 中的数据会以 base64 编码后，以键值对的形式注入到容器的环境变量中。</p><p><code>需要注意的是，Secret 并不提供强大的安全保证，只是简单地将数据存储在 base64 编码的形式下，并不提供加密或其他安全措施，因此不要将高度敏感的信息存储在 Secret 中。在处理高度敏感的信息时，需要使用更高级别的保护机制，如使用加密数据的 Volume 类型，或者使用第三方加密解决方案等。</code></p><h4 id="2-1-定义-Secret"><a href="#2-1-定义-Secret" class="headerlink" title="2.1 定义 Secret"></a>2.1 定义 Secret</h4><ul><li><p><strong>使用命令行创建</strong>：</p><ul><li><p>可以使用 kubectl create secret 命令来创建 secret，例如：</p></li><li><pre><code class="shell">$ kubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=admin123<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **使用 YAML 文件定义**：</span><br><span class="line"></span><br><span class="line">  - 可以创建一个 YAML 文件来定义 Secret 对象，例如：</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: Secret</span><br><span class="line">    metadata:</span><br><span class="line">      name: my-secret</span><br><span class="line">    type: Opaque</span><br><span class="line">    data:</span><br><span class="line">      username: YWRtaW4= # base64 编码后的用户名 admin</span><br><span class="line">      password: MWYyZDFlMmU2N2Rm # base64 编码后的密码 1f2d1e2e67df</span><br></pre></td></tr></table></figure></code></pre></li><li><p><code>注意: 这个 YAML 文件定义了一个名为 my-secret 的 Secret 对象，其中包含了两个 base64 编码后的 key-value 对：username 和 password。</code></p></li></ul></li><li><p><strong>使用文件创建:</strong></p><ul><li>&#96;&#96;&#96;shell<br>$ echo -n admin &gt;.&#x2F;username<br>$ echo -n 123456 &gt; .&#x2F;password<br>$ kubectl create secret generic mysecret –from-file&#x3D;.&#x2F;username –from-file&#x3D;.&#x2F;password<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **通过环境变量创建**：</span><br><span class="line"></span><br><span class="line">  - 可以将环境变量的值转换为secret。例如，使用以下命令将当前环境变量的值转换为secret：</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    $ kubectl create secret generic  my-config --from-env-file=&lt;(env)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h4><ul><li>环境变量,命令行参数使用 Secret</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">USERNAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">      <span class="comment"># 一次性注入这个 secret</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">secretRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><ul><li>volume 使用</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">aaa</span></span><br></pre></td></tr></table></figure><h2 id="第八章-Ingress"><a href="#第八章-Ingress" class="headerlink" title="第八章 Ingress"></a>第八章 Ingress</h2><ul><li>什么是 Ingress</li><li>Ingress 和 Service 区别</li><li>Ingress 控制器 Traefik 使用</li><li>Ingress Route的定义</li></ul><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1 简介"></a>1 简介</h3><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/">https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/</a></p><p><strong>Ingress 是一种 Kubernetes 资源类型，它允许在 Kubernetes 集群中暴露 HTTP 和 HTTPS 服务</strong>。通过 Ingress，您可以将流量路由到不同的服务和端点，而无需使用不同的负载均衡器。Ingress 通常使用 Ingress Controller 实现，它是一个运行在 Kubernetes 集群中的负载均衡器，它根据Ingress 规则配置路由规则并将流量转发到相应的服务。</p><p>在 Kubernetes 中，一个 Ingress 资源定义了一组规则，这些规则用于指定外部流量如何到达集群中的服务。Ingress 资源定义包括域名、服务、路径和其他信息，通过这些信息，Ingress Controller 就能够将请求路由到正确的服务。同时，Ingress 还提供了 TLS 选项，可以使用 SSL&#x2F;TLS 来加密传输数据。</p><p>总之，Ingress 是一种强大的 Kubernetes 资源类型，可以帮助您在 Kubernetes 集群中轻松地管理 HTTP 和 HTTPS 服务，并提供灵活的路由和负载均衡选项。</p><p>Ingress 简单示例：</p><p><img src="https://picbed.jess.win/img/K8S%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/-20230422104305506.png" alt="image-20230422104305506"></p><h3 id="2-Ingress-和-Service-区别"><a href="#2-Ingress-和-Service-区别" class="headerlink" title="2 Ingress 和 Service 区别"></a>2 Ingress 和 Service 区别</h3><p>Ingress 和 Service都是 Kubernetes 中用于将流量路由到应用程序的机制，但它们在路由层面上有所不同：</p><ul><li>Service 是 Kubernetes 中抽象的应用程序服务，它公开了一个单一的IP地址和端口，可以用于在 Kubernetes 集群内部的 Pod 之间进行流量路由。</li><li>Ingress 是一个 Kubernetes 资源对象，它提供了对集群外部流量路由的规则。Ingress 通过一个公共IP地址和端口将流量路由到一个或多个Service。</li></ul><h3 id="3-Ingress-Controller"><a href="#3-Ingress-Controller" class="headerlink" title="3 Ingress Controller"></a>3 Ingress Controller</h3><p>Ingress Controller 是 Kubernetes 中的一种资源，它负责将外部请求转发到集群内部的 Service 中，并提供负载均衡、SSL 终止等功能。Ingress Controller 通常会运行在 Kubernetes 集群中，作为一组 Deployment 和 Service 的形式部署。</p><p>常见的 Ingress Controller 包括：</p><ol><li>Nginx Ingress Controller 是由 Kubernetes 社区维护的另一个 Ingress Controller，它也是使用 Nginx 作为反向代理实现的，可以支持 HTTP 和 HTTPS 等协议，支持负载均衡、路由、HTTPS证书管理等功能。</li><li>Ingress Nginx Controller 是官方维护的一个 Ingress Controller，它是使用 Nginx 作为反向代理实现的，可以支持 HTTP 和 HTTPS 等协议，支持负载均衡、路由、HTTPS证书管理等功能。</li><li>Traefik Ingress Controller：基于 Go 语言开发的 Ingress Controller，支持多种路由匹配方式和多种后端服务发现方式。<ul><li><strong>Traefik Ingress Controller: 标准实现 支持 官方 Ingress 路由规则 注意: 这种方式使用繁琐!</strong></li><li><strong>Traefik Route CRD(customer resuource definition)自定义资源  注意: 使用这种方式简单,自定义资源方式定义路由规则。</strong></li></ul></li><li>Istio Ingress Controller：基于 Istio Service Mesh 实现的 Ingress Controller，提供了更丰富的负载均衡、流量控制和安全功能。</li><li>Kong Ingress Controller：使用 Kong 作为反向代理实现 Ingress 功能，支持 API 管理和 Gateway 功能。</li></ol><h3 id="4-使用-Traefik-Ingress-CRD-方式"><a href="#4-使用-Traefik-Ingress-CRD-方式" class="headerlink" title="4 使用 Traefik Ingress CRD 方式"></a>4 使用 Traefik Ingress CRD 方式</h3><p>官方网站: <a href="https://doc.traefik.io/traefik/">https://doc.traefik.io/traefik/</a></p><p>具体参考: <a href="https://doc.traefik.io/traefik/user-guides/crd-acme/">https://doc.traefik.io/traefik/user-guides/crd-acme/</a></p><h4 id="1-pod-无法访问-Service-解决方案"><a href="#1-pod-无法访问-Service-解决方案" class="headerlink" title="1 pod 无法访问 Service 解决方案"></a>1 pod 无法访问 Service 解决方案</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl edit cm kube-proxy -n kube-system</span></span><br><span class="line">ipvs:</span><br><span class="line">excludeCIDRs: null</span><br><span class="line">minSyncPeriod: 0s</span><br><span class="line">scheduler: &quot;&quot;</span><br><span class="line">strictARP: false</span><br><span class="line">syncPeriod: 0s</span><br><span class="line">tcpFinTimeout: 0s</span><br><span class="line">tcpTimeout: 0s</span><br><span class="line">udpTimeout: 0s</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">metricsBindAddress: &quot;&quot;</span><br><span class="line">mode: &quot;ipvs&quot; #这里默认为空，填写ipvs保存</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt; <span class="string">EOF</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">!/bin/bash</span></span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack</span><br><span class="line">modprobe -- br_netfilter</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">kubectl get pod -n kube-system | grep kube-proxy |awk &#x27;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure><h2 id="第九章-命名空间"><a href="#第九章-命名空间" class="headerlink" title="第九章 命名空间"></a>第九章 命名空间</h2><ul><li>命名空间 以及 作用</li><li>命名空间基本操作</li><li>跨命名空间说明</li></ul><h3 id="1-命名空间"><a href="#1-命名空间" class="headerlink" title="1 命名空间"></a>1 命名空间</h3><p>Kubernetes 中命名空间（Namespace）是用来隔离 Kubernetes 集群内的不同资源对象的一种方式。每个 Kubernetes 对象都必须被分配到一个命名空间中，而且默认情况下，一个对象只能被同一命名空间内的其他对象访问。Kubernetes 可以帮助用户在同一集群内部部署多个独立的应用程序，每个应用程序都在自己的命名空间内运行。</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2 基本操作"></a>2 基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create namespace|ns testapp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署应用到指定的命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f app.yml --namespace testapp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod --namespace kube-system</span></span><br></pre></td></tr></table></figure><ul><li>使用 yml 形式创建</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ems</span></span><br></pre></td></tr></table></figure><p>可以用 <a href="https://github.com/ahmetb/kubectx">kubens</a> 快速切换 namespace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubens</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubens kube-system</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到上个命名空间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubens -</span></span><br></pre></td></tr></table></figure><h3 id="3-命名空间说明"><a href="#3-命名空间说明" class="headerlink" title="3 命名空间说明"></a>3 命名空间说明</h3><p>下面是一些常见的可以跨命名空间的资源对象：</p><ul><li><code>Node</code></li><li><code>Namespace</code></li><li><code>ClusterRole</code></li><li><code>ClusterRoleBinding</code></li><li><code>CustomResourceDefinition</code></li></ul><p>下面是一些不能跨命名空间的资源对象：</p><ul><li><code>Pod</code></li><li><code>ReplicaSet</code></li><li><code>Deployment</code></li><li><code>Service</code></li><li><code>ConfigMap</code></li><li><code>Secret</code></li><li><code>Ingress</code></li><li><code>PersistentVolume</code></li><li><code>PersistentVolumeClaim</code></li><li><code>Role</code></li><li><code>RoleBinding</code></li><li><code>ServiceAccount</code></li></ul><h2 id="第十章-Helm"><a href="#第十章-Helm" class="headerlink" title="第十章 Helm"></a>第十章 Helm</h2><ul><li>什么是 Helm</li><li>安装 Helm</li><li>重要概念</li><li>使用 Helm</li></ul><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1 简介"></a>1 简介</h3><p>​官网地址: <a href="https://helm.sh/zh/">https://helm.sh/zh/</a></p><p>​Helm是一个Kubernetes应用程序包管理工具，它允许你轻松管理和部署Kubernetes应用程序。Helm通过使用称为Charts的预定义模板来简化Kubernetes应用程序的部署和管理。Chart包含了一组Kubernetes对象定义，可以描述一个应用程序的完整部署和资源需求，包括Deployment、Service、ConfigMap、Secret等。使用Helm，你可以轻松地安装、升级、卸载和回滚Kubernetes应用程序。</p><p>同时，Helm还提供了一些便捷的功能，如依赖管理、全局变量、条件渲染等，可以帮助你更好地管理应用程序的部署。Helm有两个主要的组件：Helm客户端（helm）和Helm服务器（Tiller）。Helm客户端可以在本地运行，而Tiller则运行在Kubernetes集群中，并负责将Charts转换为Kubernetes对象。</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><p>下载地址: <a href="https://github.com/helm/helm/releases">https://github.com/helm/helm/releases</a></p><blockquote><p>每个Helm <a href="https://github.com/helm/helm/releases">版本</a>都提供了各种操作系统的二进制版本，这些版本可以手动下载和安装。</p></blockquote><ol><li><p>下载 <a href="https://github.com/helm/helm/releases">需要的版本</a></p></li><li><p>解压(<code>tar -zxvf helm-v3.0.0-linux-amd64.tar.gz</code>)</p></li><li><p>在解压目录中找到<code>helm</code>程序，移动到需要的目录中(<code>mv linux-amd64/helm /usr/local/bin/helm</code>)</p></li><li><p>添加仓库: helm repo add bitnami <a href="https://charts.bitnami.com/bitnami">https://charts.bitnami.com/bitnami</a></p></li><li><p>验证安装: <code>helm help</code>.</p></li></ol><h3 id="3-重要概念"><a href="#3-重要概念" class="headerlink" title="3 重要概念"></a>3 重要概念</h3><ul><li><p><em><strong>Chart</strong></em> 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。你可以把它看作是 Homebrew formula，Apt dpkg，或 Yum RPM 在Kubernetes 中的等价物。</p></li><li><p><em><strong>Repository</strong>（仓库）</em> 是用来存放和共享 charts 的地方。它就像 Perl 的 <a href="https://www.cpan.org/">CPAN 档案库网络</a> 或是 Fedora 的 <a href="https://src.fedoraproject.org/">软件包仓库</a>，只不过它是供 Kubernetes 包所使用的。</p></li><li><p><em><strong>Release</strong></em> 是运行在 Kubernetes 集群中的 chart 的实例。一个 chart 通常可以在同一个集群中安装多次。每一次安装都会创建一个新的 <em>release</em>。以 MySQL chart为例，如果你想在你的集群中运行两个数据库，你可以安装该chart两次。每一个数据库都会拥有它自己的 <em>release</em> 和 <em>release name</em>。</p></li></ul><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4 使用"></a>4 使用</h3><h4 id="4-1-搜索-charts"><a href="#4-1-搜索-charts" class="headerlink" title="4.1 搜索 charts"></a>4.1 搜索 charts</h4><p>Helm 自带一个强大的搜索命令，可以用来从两种来源中进行搜索：</p><ul><li><code>helm search hub</code> 从 <a href="https://artifacthub.io/">Artifact Hub</a> 中查找并列出 helm charts。 Artifact Hub中存放了大量不同的仓库。</li><li><code>helm search repo</code> 从你添加（使用 <code>helm repo add</code>）到本地 helm 客户端中的仓库中进行查找。该命令基于本地数据进行搜索，无需连接互联网。</li></ul><h4 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h4><p>使用 <code>helm install</code> 命令来安装一个新的 helm 包。最简单的使用方法只需要传入两个参数：你命名的release名字和你想安装的chart的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# helm install nginx bitnami/nginx</span><br><span class="line">NAME: nginx</span><br><span class="line">LAST DEPLOYED: Wed Apr  5 07:18:04 2023</span><br><span class="line">NAMESPACE: kube-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">CHART NAME: nginx</span><br><span class="line">CHART VERSION: 13.2.34</span><br><span class="line">APP VERSION: 1.23.4</span><br><span class="line"></span><br><span class="line">** Please be patient while the chart is being deployed **</span><br><span class="line">NGINX can be accessed through the following DNS name from within your cluster:</span><br><span class="line"></span><br><span class="line">    nginx.kube-system.svc.cluster.local (port 80)</span><br><span class="line"></span><br><span class="line">To access NGINX from outside the cluster, follow the steps below:</span><br><span class="line"></span><br><span class="line">1. Get the NGINX URL by running these commands:</span><br><span class="line"></span><br><span class="line">  NOTE: It may take a few minutes for the LoadBalancer IP to be available.</span><br><span class="line">        Watch the status with: &#x27;kubectl get svc --namespace kube-system -w nginx&#x27;</span><br><span class="line"></span><br><span class="line">    export SERVICE_PORT=$(kubectl get --namespace kube-system -o jsonpath=&quot;&#123;.spec.ports[0].port&#125;&quot; services nginx)</span><br><span class="line">    export SERVICE_IP=$(kubectl get svc --namespace kube-system nginx -o jsonpath=&#x27;&#123;.status.loadBalancer.ingress[0].ip&#125;&#x27;)</span><br><span class="line">    echo &quot;http://$&#123;SERVICE_IP&#125;:$&#123;SERVICE_PORT&#125;&quot;</span><br></pre></td></tr></table></figure><blockquote><p> 注意: 安装chart时创建了一个新的 <em>release</em> 对象。上述发布被命名为 <code>nginx</code>。 （如果想让Helm生成一个名称，删除发布名称并使用<code>--generate-name</code>。）</p></blockquote><p>helm 安装顺序: <a href="https://helm.sh/zh/docs/intro/using_helm/">https://helm.sh/zh/docs/intro/using_helm/</a></p><hr><h4 id="4-3-查看列表"><a href="#4-3-查看列表" class="headerlink" title="4.3 查看列表"></a>4.3 查看列表</h4><p>你可以通过 <code>helm list</code> 命令看到当前部署的所有 release：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# helm list</span><br><span class="line">NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION</span><br><span class="line">nginx   kube-system     1               2023-04-05 07:34:48.421708425 -0400 EDT deployed        nginx-13.2.34   1.23.4 </span><br></pre></td></tr></table></figure><h4 id="4-3-查看状态"><a href="#4-3-查看状态" class="headerlink" title="4.3 查看状态"></a>4.3 查看状态</h4><p>你可以使用 <code>helm status</code> 来追踪 release 的状态，或是重新读取配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# helm status nginx</span><br><span class="line">NAME: nginx</span><br><span class="line">LAST DEPLOYED: Wed Apr  5 07:18:04 2023</span><br><span class="line">NAMESPACE: kube-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">CHART NAME: nginx</span><br><span class="line">CHART VERSION: 13.2.34</span><br><span class="line">APP VERSION: 1.23.4</span><br><span class="line"></span><br><span class="line">** Please be patient while the chart is being deployed **</span><br><span class="line">NGINX can be accessed through the following DNS name from within your cluster:</span><br><span class="line"></span><br><span class="line">    nginx.kube-system.svc.cluster.local (port 80)</span><br><span class="line"></span><br><span class="line">To access NGINX from outside the cluster, follow the steps below:</span><br><span class="line"></span><br><span class="line">1. Get the NGINX URL by running these commands:</span><br><span class="line"></span><br><span class="line">  NOTE: It may take a few minutes for the LoadBalancer IP to be available.</span><br><span class="line">        Watch the status with: &#x27;kubectl get svc --namespace kube-system -w nginx&#x27;</span><br><span class="line"></span><br><span class="line">    export SERVICE_PORT=$(kubectl get --namespace kube-system -o jsonpath=&quot;&#123;.spec.ports[0].port&#125;&quot; services nginx)</span><br><span class="line">    export SERVICE_IP=$(kubectl get svc --namespace kube-system nginx -o jsonpath=&#x27;&#123;.status.loadBalancer.ingress[0].ip&#125;&#x27;)</span><br><span class="line">    echo &quot;http://$&#123;SERVICE_IP&#125;:$&#123;SERVICE_PORT&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="4-4-卸载"><a href="#4-4-卸载" class="headerlink" title="4.4 卸载"></a>4.4 卸载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# helm uninstall nginx</span><br><span class="line">release &quot;nginx&quot; uninstalled</span><br></pre></td></tr></table></figure><h3 id="5-安装自定义-Chart"><a href="#5-安装自定义-Chart" class="headerlink" title="5 安装自定义 Chart"></a>5 安装自定义 Chart</h3><p>上述安装方式只会使用 chart 的默认配置选项。很多时候，我们需要自定义 chart 来指定我们想要的配置。</p><h4 id="5-1-拉取自定义的-chart"><a href="#5-1-拉取自定义的-chart" class="headerlink" title="5.1 拉取自定义的 chart"></a>5.1 拉取自定义的 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# helm create app</span><br></pre></td></tr></table></figure><blockquote><p><code>注意: 当前目录中会出现一个 nginx-xxx.tgz 文件 这个文件就是 charts 的包。</code></p></blockquote><h4 id="5-2-查看-chart-目录结构"><a href="#5-2-查看-chart-目录结构" class="headerlink" title="5.2 查看 chart 目录结构"></a>5.2 查看 chart 目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">  Chart.yaml</span><br><span class="line">  values.yaml</span><br><span class="line">  charts/</span><br><span class="line">  templates/</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><ul><li><p><code>templates/</code> 目录包括了模板文件。当Helm评估chart时，会通过模板渲染引擎将所有文件发送到<code>templates/</code>目录中。 然后收集模板的结果并发送给Kubernetes。</p></li><li><p><code>values.yaml</code> 文件也导入到了模板。这个文件包含了chart的 <em>默认值</em> 。这些值会在用户执行<code>helm install</code> 或 <code>helm upgrade</code>时被覆盖。</p></li><li><p><code>Chart.yaml</code> 文件包含了该chart的描述。你可以从模板中访问它。<code>charts/</code>目录 <em>可以</em> 包含其他的chart(称之为 <em>子chart</em>)。</p></li></ul><h4 id="5-3-自定义模板"><a href="#5-3-自定义模板" class="headerlink" title="5.3 自定义模板"></a>5.3 自定义模板</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf mychart/templates/*</span></span><br></pre></td></tr></table></figure><ul><li>编写 namespace.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123; <span class="string">.Chart.Name</span> &#125;&#125;</span><br><span class="line">  <span class="attr">namespace:</span> &#123;&#123; <span class="string">.Values.namespace</span> &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 deployment.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">  <span class="attr">namespace:</span> &#123;&#123;<span class="string">.Values.namespace</span>&#125;&#125;</span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> &#123;&#123; <span class="string">.Values.replicas</span> &#125;&#125;</span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">          <span class="attr">image:</span> &#123;&#123; <span class="string">.Values.image</span>&#125;&#125;</span><br><span class="line">          <span class="attr">imagePullPolicy:</span> &#123;&#123;<span class="string">.Values.imagePullPolicy</span>&#125;&#125;</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> &#123;&#123;<span class="string">.Values.containerPort</span>&#125;&#125;</span><br><span class="line">      <span class="attr">restartPolicy:</span> &#123;&#123; <span class="string">.Values.restartPolicy</span> &#125;&#125;</span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> &#123;&#123; <span class="string">.Chart.Name</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 service.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123;<span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">  <span class="attr">namespace:</span> &#123;&#123;<span class="string">.Values.namespace</span>&#125;&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123;<span class="string">.Chart.Name</span>&#125;&#125;</span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> &#123;&#123;<span class="string">.Values.service.port</span>&#125;&#125;</span><br><span class="line">      <span class="attr">targetPort:</span> &#123;&#123;<span class="string">.Values.containerPort</span>&#125;&#125;</span><br><span class="line">  <span class="attr">type:</span> &#123;&#123; <span class="string">.Values.service.type</span> &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 Chart.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="comment"># A chart can be either an &#x27;application&#x27; or a &#x27;library&#x27; chart.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Application charts are a collection of templates that can be packaged into versioned archives</span></span><br><span class="line"><span class="comment"># to be deployed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Library charts provide useful utilities or functions for the chart developer. They&#x27;re included as</span></span><br><span class="line"><span class="comment"># a dependency of application charts to inject those utilities and functions into the rendering</span></span><br><span class="line"><span class="comment"># pipeline. Library charts do not define any templates and therefore cannot be deployed.</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the chart version. This version number should be incremented each time you make changes</span></span><br><span class="line"><span class="comment"># to the chart and its templates, including the app version.</span></span><br><span class="line"><span class="comment"># Versions are expected to follow Semantic Versioning (https://semver.org/)</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the version number of the application being deployed. This version number should be</span></span><br><span class="line"><span class="comment"># incremented each time you make changes to the application. Versions are not expected to</span></span><br><span class="line"><span class="comment"># follow Semantic Versioning. They should reflect the version the application is using.</span></span><br><span class="line"><span class="comment"># It is recommended to use it with quotes.</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">&quot;1.16.0&quot;</span></span><br></pre></td></tr></table></figure><ul><li>编写 values.yaml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">nginx:1.19</span></span><br><span class="line"><span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><h4 id="5-4-验证是否存在错误"><a href="#5-4-验证是否存在错误" class="headerlink" title="5.4 验证是否存在错误"></a>5.4 验证是否存在错误</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm lint app</span></span><br></pre></td></tr></table></figure><h4 id="5-5-打包自定义-chart"><a href="#5-5-打包自定义-chart" class="headerlink" title="5.5 打包自定义 chart"></a>5.5 打包自定义 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm package app</span></span><br></pre></td></tr></table></figure><h4 id="5-6-安装-chart"><a href="#5-6-安装-chart" class="headerlink" title="5.6 安装 chart"></a>5.6 安装 chart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">helm install app myapp-1.tgz</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于开发板串口连不上电脑的问题</title>
      <link href="/2023/06/06/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/06/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近研究ESP8266时发现我的笔记本不能与开发板通信了，之前还可以。我试过不同的电缆、驱动、模块结果都一样。结果换了一台电脑就不会出现这个问题。请教各种大佬群都没得到回应，好像是他们从来没有遇到过这种问题一样。甚至还以为我电脑的系统被我弄坏了打算重装系统之前进行最后的赎救…经过我深入探索终于解决了。在此把我的经验分享给大家!如果有小伙伴出现此类问题可以少走弯路。</p></blockquote><h3 id="报错实例："><a href="#报错实例：" class="headerlink" title="报错实例："></a>报错实例：</h3><p>1.通过<a href="https://www.espressif.com/zh-hans/support/download/other-tools">Flash 下载工具</a> 上刷写固件换过多个版本的工具还是都会报错，报错信息如下：</p><p><img src="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/1.jpg" alt="1"></p><p><img src="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/2.jpg" alt="2"></p><p>2.通过<a href="https://web.esphome.io/">EspHome</a> &amp;<a href="https://tasmota.github.io/install/">Tasmota</a> 上刷写程序总是会报错：“failed to execute ‘open’ on ‘serialport’: failed to open serial port.”。之前还没有遇到过这种问题。</p><p><img src="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/3.png" alt="3"></p><p>3.连接Arduino IDE刷写示例固件，有显示设备连接，但是提示设备离线(当时没有截图)…</p><h3 id="系统环境与硬件设备"><a href="#系统环境与硬件设备" class="headerlink" title="系统环境与硬件设备"></a>系统环境与硬件设备</h3><p>系统：Windows 11 Pro<br>测试的硬件设备：ESP01S、ESP8266、Arduino UNO</p><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>1.下载此文件并解压：<a href="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/USB2.0-Ser_HL340_CH341SER_WIN732_64.zip">usb2.0-ser!driver.zip</a>。</p><p>2.管理员身份打开<code>设备管理器</code>–<code>端口（COM 和 LPT）</code>–<code>右键单击有问题的设备</code>（例如“USB-SERIAL CH340 (COM3)”）–<code>更新驱动程序</code>–“浏览我的计算机以查找驱动程序”。</p><p><img src="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/4.png" alt="4"></p><p>3.<code>浏览我的电脑以查找驱动程序</code>–<code>让我从计算机上的可用驱动程序列表中进行选择</code>–<code>从磁盘安装</code>–<code>浏览</code>–选择步骤1中解压好的文件–<code>确定</code>–选择型号（例如“USB-SERIAL CH340”）–<code>下一步</code>–<code>关闭</code>。</p><p><img src="https://picbed.jess.win/img/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%B2%E5%8F%A3%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%94%B5%E8%84%91%E7%9A%84%E9%97%AE%E9%A2%98/5.png" alt="5"></p><p>4.如果安装过程中会出现错误，请删除驱动并重新安装，如果仍然不好用尝试重启、更改USB端口等。（我就是安装过程中出现错误结果重启之后就可以用了😓😓）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> IoT </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何升级ESXI补丁</title>
      <link href="/2023/04/03/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/"/>
      <url>/2023/04/03/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>运行的ESXi8.0有了新版本8.0a、8.0b和8.0c，包含了多项优化与更新。那么要如何升级ESXi8.0到最新版本呢？本次将介绍使用命令行离线更新的方法。</p></blockquote><p>1.下载所需补丁包</p><p>官网下载链接：<a href="https://customerconnect.vmware.com/cn/patch">https://customerconnect.vmware.com/cn/patch</a></p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/1.png" alt="1"></p><p>2.上传补丁包至ESXi存储根目录</p><p>在ESXI中<code>存储</code>–<code>存储</code>–<code>选择存储设备</code>–<code>数据存储浏览器</code>–<code>上载</code>上传下载好的补丁包。</p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/2.png" alt="2"></p><p>3.关掉所有VMs【ESXI中<code>虚拟机</code>–所有设备关机】并进入维护模式【ESXI中<code>主机</code>–<code>操作</code>–<code>进入维护模式</code>–<code>确定</code>】</p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/3.png" alt="3"></p><p>4.在ESXI中<code>主机</code>–<code>操作</code>–<code>服务</code>–<code>开启Secure Shell(SSH)</code></p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/4.png" alt="4"></p><p>5.SSH登陆ESXI主机，执行此命令确认版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware -vl</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/5.png" alt="5"></p><p>6.查看本地补丁包信息,通过【esxcli software sources profile list –depot&#x3D;<patchpath>】可以查询补丁包信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># esxcli software sources profile list --depot=&lt;patchpath&gt;</span></span><br><span class="line">esxcli software sources profile list --depot=/vmfs/volumes/6390acd9-6a3dbfa5-edc7-0068ebaee9bc/VMware-ESXi-8.0c-21493926-depot.zip</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/6.png" alt="6"></p><p>7.安装本地补丁包（ZIP格式），通过【esxcli software vib update –depot&#x3D;<patchpath>】进行补丁包的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># esxcli software vib update --depot=&lt;patchpath&gt;</span></span><br><span class="line">esxcli software vib update --depot=/vmfs/volumes/6390acd9-6a3dbfa5-edc7-0068ebaee9bc/VMware-ESXi-8.0c-21493926-depot.zip</span><br></pre></td></tr></table></figure><p>出现以下界面表示安装完成。</p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/7.png" alt="7"></p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/8.png" alt="8"></p><p>8.重启ESXI主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/9.png" alt="9"></p><p>9.重启电脑后登陆后台界面，<code>主机</code>–<code>操作</code>–<code>服务</code>–<code>开启Secure Shell(SSH)</code>【每次重启后都会默认关闭SSH】，查看ESXI版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware -vl</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/10.png" alt="10"></p><p>10.关闭SSH【在ESXI中<code>主机</code>–<code>操作</code>–<code>服务</code>–<code>禁用Secure Shell(SSH)</code>】并退出维护模式【ESXI中<code>主机</code>–<code>操作</code>–<code>退出维护模式</code>】</p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/11.png" alt="11"></p><p><img src="https://picbed.jess.win/img/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/12.png" alt="12"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ESXI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建HomeAssistant智能家居系统</title>
      <link href="/2023/03/29/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/03/29/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果是<code>ESXI8.0系统中配置HAOS</code>建议先参考一下<a href="https://www.jess.win/2023/04/03/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7ESXI%E8%A1%A5%E4%B8%81/">如何升级ESXI补丁</a>，最新的补丁包修复了很多bug，包括ESXI8.0之前不能添加现有硬盘的问题</p></blockquote><h2 id="HomeAssistant介绍"><a href="#HomeAssistant介绍" class="headerlink" title="HomeAssistant介绍"></a>HomeAssistant介绍</h2><p>HomeAssistant官网：<a href="https://www.home-assistant.io/">https://www.home-assistant.io/</a><br>HomeAssistant（简称 HA）是一款基于 Python 的智能家居开源系统，不仅支持众多品牌的智能家居设备，还可以轻松实现设备的语音控制、自动化等。<br>Home Assistant 提供了操作系统版和容器版两种安装方法，所以你可以自由选择将 Home Assistant 跑在本地服务器虚拟机或 NAS 中的 docker 中，也可以通过 U 盘引导的方式直接写入物理机中。</p><p>Home Assistant（HA）是一套开源的智能家居系统，借助开源社区的力量，现在HA可以接入大约1900多种品牌的设备或软件产品，有效解决不同厂家的协议、网关不互通问题，将家庭设备的数据汇集到一个平台上，实现全屋设备关联，比如通过Homekit来控制小米、华为、涂鸦的设备等，另外还能避免部分隐私问题，你的家庭使用数据部分可以实现本地化，防止厂商收集你的日常行为。</p><p>HA有四种不同的安装方式，在功能上也会存在些许差异，官方推荐OS或者Container的安装方式，OS具备全功能。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/1.png" alt="1"></p><p>HAOS的安装方式可以选择虚拟机、树莓派或者直接买官方的Blue盒子，我手里正好有x86的小主机，所以就把HAOS安装在小主机的虚拟机当中，我的软路由目前使用的是ESXI系统，下面是详细的安装教程。</p><h2 id="使用ESXI安装HAOS"><a href="#使用ESXI安装HAOS" class="headerlink" title="使用ESXI安装HAOS"></a>使用ESXI安装HAOS</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>官网下载最新的系统，选择适用Linux虚拟机的vmdk文件：<a href="https://www.home-assistant.io/installation/linux">https://www.home-assistant.io/installation/linux</a></li><li>硬件配置：2GB RAM，32GB Storage，2vCPU</li></ul><h3 id="安装HAOS"><a href="#安装HAOS" class="headerlink" title="安装HAOS"></a>安装HAOS</h3><p>1.登陆ESXI。在ESXI中<code>存储</code>–<code>选择HAOS安装位置</code>–<code>创建目录</code>–<code>虚拟机名称</code>–<code>创建目录</code>。</p><p>![2]<a href="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/2.png">https://picbed.jess.win/img/快速搭建HomeAssistant智能家居系统/2.png</a>)</p><p>2.选择刚刚创建的目录–<code>上载</code>–<code>上传解压好的vmdk文件</code>–界面右上角有上传文件的进度，等待完全上传成功。效果如下。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/3.png" alt="3"></p><p>3.登陆ESXI，在ESXI中<code>虚拟机</code>–<code>创建/注册虚拟机</code></p><ul><li>名称：HAOS(名称根据之前创建的文件目录名称一致)</li><li>兼容性：ESXI8.0虚拟机(根据自己ESXI版本自行选择)</li><li>客户机操作系统系列：Linux</li><li>客户机操作系统版本：其他5.x Linux (64位)</li></ul><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/4.png" alt="4"></p><p>4.选择存储时应选择创建文件夹目录的那个存储盘。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/5.png" alt="5"></p><p>5.CPU需要2以上，删除自动生成的<code>硬盘1</code>、<code>USB控制器1</code>、<code>CD/DVD驱动器1</code>。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/6.png" alt="6"></p><p>6.在虚拟硬件中，点击<code>添加硬盘</code>–<code>现有硬盘</code>–选择之前上传的vmdk文件。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/7.png" alt="7"></p><p>7.展开新添加的现有硬盘，<code>驱动器位置改为IDE控制器0</code>后保存。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/8.png" alt="8"></p><p>8.虚拟机选项中，<code>引导选项</code>–<code>开启UEFI安全引导这个选项取消勾选</code>，此时虚拟机已经创建完成。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/9.png" alt="9"></p><p>8.将HAOS开机，等待启动完成。正常启动完成后会出现下面的画面。下图标注的是IP地址。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/10.png" alt="10"></p><p>9.如果出现了以上画面，也有了IP地址，那访问IP地址加端口8123，比如我的ip地址是10.95.40.220，那就访问”10.95.40.220:8123”，会出现以下画面。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/11.png" alt="11"></p><p>10.等待比较长的一段时间，会安装完成。根据提示创建用户名、密码，建立你的HomeAssistant账户，至此HomeAssistant的基本安装就完成了。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/12.png" alt="12"></p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/13.png" alt="13"></p><h3 id="安装HACS"><a href="#安装HACS" class="headerlink" title="安装HACS"></a>安装HACS</h3><p>在HomeAssistant的使用中，最不可或缺的东西就是HACS了，HACS是一个HomeAssistant的插件，有了它，才能比较方便的查找、安装各种各样的第三方插件，也正是这些插件，使HomeAssistant具备了接入各系统终端的能力。</p><p>1.在HomeAssistant的页面里，点击进入最右下角你的用户名，页面里下滑勾选打开高级模式。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/14.png" alt="14"></p><p>2.在HomeAssistant的页面里：左下角<code>配置</code>–<code>加载项</code>–<code>加载项商店</code>–搜索<code>SSH &amp; Web Terminal</code>后安装。</p><blockquote><p>如果你的网络比较好，顺利的话你会看到一下内容。如果看不到的话，等等多刷新几次，重启一下HomeAssistant（左下角配置-系统-右上角重新启动），或者换个网络环境再试试。</p></blockquote><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/15.png" alt="15"></p><p>如果还是不行就说明是网络问题，需要将加载商店的源更改成国内的源，在<code>加载项商店</code>界面中–点击右上角的<code>三个点</code>–<code>仓库Repo</code>，复制粘贴下方链接–<code>添加</code>，添加完成后刷新几次，或者重启Homeassistant试试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://hub.nuaa.cf/hassio-addons/repository</span><br><span class="line">https://cdn.githubjs.cf/hassio-addons/repository</span><br></pre></td></tr></table></figure><p>3.在SSH &amp; Web Terminal中的配置，需要设置一个密码后保存。在SSH &amp; Web Terminal中的信息中启动此服务。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/16.png" alt="16"></p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/17.png" alt="17"></p><p>4.在侧边栏中点击SSH &amp; Web Terminal，输入以下命令进行安装HACS【需要使用ctrl+shift+V进行粘贴】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://get.hacs.xyz | bash -</span><br></pre></td></tr></table></figure><p>安装成功后会如下显示：</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/18.png" alt="18"></p><blockquote><p>HACS还有手动安装的方法，但是如果是安装国内版HACS，下次单独出一个文章。</p></blockquote><p>5.重启【<code>开发者工具</code>–<code>检查配置</code>–<code>重新启动</code>】，重启后点击<code>配置</code>–<code>设备与服务</code>–<code>添加集成</code>–搜索<code>HACS</code>–安装。安装过程中会让你在github里进行授权，按照步骤来就行，如果之前没注册过github那需要注册一下。</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/19.png" alt="19"></p><p>6.装完成后，侧边栏就可以看到HACS，就可以愉快的下载各种第三方集成了。如图：</p><p><img src="https://picbed.jess.win/img/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHomeAssistant%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%B3%BB%E7%BB%9F/20.png" alt="20"></p><blockquote><p>HACS里的集成下载后，还需要去<code>配置</code>–<code>设备与集成</code>中，搜索安装使用。</p></blockquote><p>至此Home Assistant OS和HACS的安装已结束，这两个是HomeAssistant的核心，其它的插件、集成就不一一教大家安装了，因为也比较简单了。</p><h3 id="推荐集成："><a href="#推荐集成：" class="headerlink" title="推荐集成："></a>推荐集成：</h3><h4 id="1、直接可以安装的："><a href="#1、直接可以安装的：" class="headerlink" title="1、直接可以安装的："></a>1、直接可以安装的：</h4><ul><li>HomeKit：这个就是用来把HomeAssistant里的设备接入HomeKit的，IOS用户必装。</li><li>Node-RED：物联网自动化操作的编程。</li><li>Samba share：Samba 共享可以快捷的配置HomeAssistant。</li><li>TasmoAdmin：集中管理您的所有Sonoff Tasmota设备。</li><li>VLC：将您的设备变成带有VLC的媒体播放器。</li><li>Mosquitto broker：一个开源MQTT代理。</li></ul><h4 id="2、需要现在HACS下载的："><a href="#2、需要现在HACS下载的：" class="headerlink" title="2、需要现在HACS下载的："></a>2、需要现在HACS下载的：</h4><ul><li>bemfa：用于把不支持米家但能接入HomeAssistant的设备接入小爱同学或天猫精灵语音控制。</li><li>Xiaomi Miot Auto：能够把大多数米家设备直接接入HomeAssistant。</li><li>Xiaomi Miot：和刚刚的插件功能相同，是另外一位大神制作的，如果上一个插件接入不了的设备，可以试试这个，我个人觉着比Xiaomi Miot Auto略微弱一丢丢。</li><li>Midea AC LAN：可以把美的、华凌空调接入HomeAssistant。</li><li>彩云天气：天气预报插件，可以基于天气情况实现联动。</li><li>Xiaomi Gateway 3：专门用来接入米家和Aqara的Zigbee协议设备的插件。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HomeAssistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费领取微软U盘</title>
      <link href="/2023/03/18/%E5%85%8D%E8%B4%B9%E9%A2%86%E5%8F%96%E5%BE%AE%E8%BD%AFU%E7%9B%98/"/>
      <url>/2023/03/18/%E5%85%8D%E8%B4%B9%E9%A2%86%E5%8F%96%E5%BE%AE%E8%BD%AFU%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>U盘限量送，免费送U盘是几率性的，本人就歪了…</p></blockquote><p>最近微软调整了 Windows 11 测试通道，新增了 “Canary” 通道，这一版本比 Dev 通道更超前，但也更不稳定。根据计划，任何高于 Build 25000 的测试会员都将自动切换到 Canary 通道。</p><p>根据微软的说法，Canary 通道将开始接受内核和 API 都发生重大变化的 Windows 版本，这样的暗示已经非常明显了。目前，Dev 通道已被降级到 Build 23403，Canary 通道则更新到了 25314.1010。</p><p>Canary 通道的出现和特殊性让外界纷纷猜测微软是要内测 Windows 12 开发版。目前，微软还表示，这些测试者可以<code>免费申领一枚 USB 闪存盘</code>，方便进行系统镜像的全新安装。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一个Windows电脑</li><li>一个微软账号</li></ul><h2 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h2><p>1.打开Windows设置–Windows更新–Windows预览体验计划–加入Windows预览体验计划<code>即刻加入</code>。</p><p><img src="https://s1.ax1x.com/2023/03/21/ppUNUNn.png" alt="1"></p><p>2.登陆自己的微软账号–选择Canary渠道–继续–继续–继续–立即重启。</p><p><img src="https://s1.ax1x.com/2023/03/21/ppUNJBQ.png" alt="2"></p><p><img src="https://s1.ax1x.com/2023/03/21/ppUNahq.png" alt="3"></p><p><img src="https://s1.ax1x.com/2023/03/21/ppUNNAs.png" alt="4"></p><p><img src="https://s1.ax1x.com/2023/03/21/ppUNY7j.png" alt="5"></p><p>3.重启后打开打开Windows设置–Windows更新–检查更新,安装所有更新。</p><p><img src="https://s1.ax1x.com/2023/03/21/ppUgOeI.png" alt="6"></p><p>4.过一段时间微软账号绑定的邮箱会收到邮件，U盘的领取代码是唯一的。<br>领取链接:<code>https://api.mybrandwins.com/forms/api/formio/63c0fb5e8e6d01001af5ba00/validateCode</code></p><p>寄件地址最好是英文的。<br>中文地址翻译成英文地址的写法:<code>https://zhuanlan.zhihu.com/p/77675584</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令整理</title>
      <link href="/2023/03/13/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2023/03/13/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>​ 为了方便查阅,这里将常用指令汇总。</p><h2 id="简写命令："><a href="#简写命令：" class="headerlink" title="简写命令："></a>简写命令：</h2><table><thead><tr><th align="center">缩写</th><th align="center">全称</th></tr></thead><tbody><tr><td align="center">hexo i</td><td align="center">hexo init</td></tr><tr><td align="center">hexo n “我的第一篇文章”</td><td align="center">hexo new “我的第一篇文章” <br> hexo new post “我的第一篇文章”</td></tr><tr><td align="center">hexo p</td><td align="center">hexo publish</td></tr><tr><td align="center">hexo g</td><td align="center">hexo generate</td></tr><tr><td align="center">hexo s</td><td align="center">hexo server</td></tr><tr><td align="center">hexo c</td><td align="center">hexo clean</td></tr><tr><td align="center">hexo d</td><td align="center">hexo deploy</td></tr><tr><td align="center">hexo deploy -g</td><td align="center">hexo deploy –generate</td></tr><tr><td align="center">hexo generate -d</td><td align="center">hexo generate –deploy</td></tr></tbody></table><h2 id="命令详解："><a href="#命令详解：" class="headerlink" title="命令详解："></a>命令详解：</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><p><code>hexo init</code> 初始化本地文件夹为网站的根目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><ul><li><code>folder</code> 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录。</li></ul><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><p><code>hexo new</code> 新建文章,如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><p>layout 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</p></li><li><p>title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</p></li></ul><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><p><code>hexo generate</code> 生成静态文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-d&#x2F;--deploy</td><td align="center">文件生成后立即部署网站</td></tr><tr><td align="center">-w&#x2F;--watch</td><td align="center">监视文件变动</td></tr><tr><td align="center">-b&#x2F;--force</td><td align="center">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="center">-f&#x2F;--force</td><td align="center">强制重新生成文件 <br> Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td align="center">-c&#x2F;--concurency</td><td align="center">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h3 id="hexo-publish"><a href="#hexo-publish" class="headerlink" title="hexo publish"></a>hexo publish</h3><p><code>hexo publish</code>发表草稿。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><p><code>hexo s</code>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-p&#x2F;--port</td><td align="center">重设端口</td></tr><tr><td align="center">-s&#x2F;--static</td><td align="center">只使用静态文件</td></tr><tr><td align="center">-l&#x2F;--log</td><td align="center">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><p><code>hexo deploy</code>部署网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-g&#x2F;--generate</td><td align="center">部署之前预先生成静态文件</td></tr></tbody></table><h3 id="hexo-render"><a href="#hexo-render" class="headerlink" title="hexo render"></a>hexo render</h3><p><code>hexo render</code> 渲染文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-o&#x2F;--output</td><td align="center">设置输出路径</td></tr></tbody></table><h3 id="hexo-migrate"><a href="#hexo-migrate" class="headerlink" title="hexo migrate"></a>hexo migrate</h3><p><code>hexo migrate</code>从其他博客系统 迁移内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p><code>hexo clean</code>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><blockquote><p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><h3 id="hexo-list"><a href="#hexo-list" class="headerlink" title="hexo list"></a>hexo list</h3><p><code>hexo list</code>列出网站资料。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a>hexo version</h3><p><code>hexo version</code>显示 Hexo 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到<code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p><h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --silent <span class="comment"># 隐藏终端信息</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后<code>将不再使用默认的 _config.yml</code>。<br>你可以使用一个<code>YAML</code>或<code>JSON</code>文件的路径，也可以使用逗号分隔（无空格）的多个<code>YAML</code>或<code>SON</code>文件的路径。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><blockquote><p>当你指定了多个配置文件以后，Hexo会按顺序将这部分配置文件合并成一个_multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p></blockquote><h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --draft <span class="comment"># 显示 source/_drafts 文件夹中的草稿文章</span></span><br></pre></td></tr></table></figure><h4 id="自定义CWD"><a href="#自定义CWD" class="headerlink" title="自定义CWD"></a>自定义CWD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --cwd /path/to/cwd <span class="comment"># 自定义当前工作目录（Current working directory）的路径</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建免费图床</title>
      <link href="/2023/03/09/%E5%88%9B%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/03/09/%E5%88%9B%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="基于GitHub的图床"><a href="#基于GitHub的图床" class="headerlink" title="基于GitHub的图床"></a>基于GitHub的图床</h2><p>优点：</p><ul><li>稳定，使用自己的仓库和公共托管平台</li><li>图片可以增量快速更新和跨设备管理</li><li>可以进行版本管理和查看之前的版本</li><li>有公用CND，速度快</li><li>文件可以任意格式，包括css、js等</li></ul><p>缺点：</p><ul><li>1.每个仓库限制1G容量，超过需新建另一个仓库</li><li>2.Git管理偶尔会遇到网络和公钥失效的问题</li></ul><hr><h3 id="建立GitHub仓库"><a href="#建立GitHub仓库" class="headerlink" title="建立GitHub仓库"></a>建立GitHub仓库</h3><p>1.<a href="https://github.com/">GitHub官网</a>注册并登陆自己的账号，点到自己的个人首页，点击右上角<code>+</code>–<code>New Repository</code>创建自己的仓库</p><p><img src="https://s1.ax1x.com/2023/03/14/ppl5B5Q.png" alt="1"></p><p>2.仓库和描述可以随意，可见性<code>public</code>，<code>Readme</code>文件一颗创建。点击<code>Create Repositorty</code>创建仓库。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplIgWd.png" alt="2"></p><p>3.需要计算机与GitHub建立通信，<code>创建公钥</code>、<code>上传公钥</code>、<code>检查通信</code>这几步，(详细操作可见<a href="https://www.jess.win/2023/02/10/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/">基于Hexo搭建博客之一中Git连接GitHub</a>)确保计算机有权限访问远程仓库。连接测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/03/14/ppljuA1.png" alt="3"></p><p>4.先在本地创建一个文件夹（pic_bed）文件夹位置和名字随意。进入该文件夹后右键打开<code>Git Bash</code>，然后输入以下代码把之前创建的仓库拷贝下来，其中<code>git clone</code>后面的东西要替换成自己的仓库信息，可以通过自己仓库的ssh链接来获取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:885480665/pic_bed.git</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/03/14/pplvaqJ.png" alt="4"></p><p>看到上图的信息就代表成功把整个仓库拷贝到当前文件夹了.</p><p><img src="https://s1.ax1x.com/2023/03/14/pplxVoR.png" alt="5"></p><p>此时可看到文件夹多了个.git文件夹和Readme.md文件，这就代表成功了。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplxI0J.png" alt="6"></p><p>5.可以在这个文件夹里面创建创建img文件夹专门存放图片，如果有存放其他类型资源的可以创建别的文件夹，如果想在仓库里加两张图，直接就把图片复制到img文件夹里面即可。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplxLp6.png" alt="7"></p><p>在<code>pic_bed</code>（新创建的在带有Readme.md文件的那个文件夹）文件夹内，右键打开<code>Git Bash</code>,依次输入以下命令把更改推送到远程仓库，最后一步不成功可能要多试几次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>看见以下信息就代表推送成功了</p><p><img src="https://s1.ax1x.com/2023/03/14/pplzd41.png" alt="8"></p><p>此时仓库也有了刚刚上传的资源</p><p><img src="https://s1.ax1x.com/2023/03/14/pplzDgK.png" alt="9"></p><p>下次增删图片或者其他东西，安装此方法就可推上来更新仓库。</p><h3 id="Staticaly-CDN加速"><a href="#Staticaly-CDN加速" class="headerlink" title="Staticaly CDN加速"></a>Staticaly CDN加速</h3><p>直接访问Github仓库的资源是非常慢的！因此我们要用一些免费的CDN进行加速，Staticaly CDN是目前免费CDN中比较好用的，他的应用规则如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 其中 user是用户名  repo是仓库名  version代表版本(tag或者分支 默认为main)  flie是文件路径 </span></span><br><span class="line">https://cdn.staticaly.com/gh/user/repo@version/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个例子仓库就是加速地址，可以作为参考参考</span></span><br><span class="line">https://cdn.staticaly.com/gh/885480665/pic_bed@main/img/wallhaven-m3lz2y.jpg</span><br></pre></td></tr></table></figure><h3 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h3><blockquote><p>此方法加载速度较快，需要域名自定义绑定，目前Vercel每个月限制流量100GB。（目前个人用这个）</p></blockquote><p>1.<a href="https://vercel.com/dashboard">Vercel官网</a>进入Vercel控制面板新建项目</p><p><img src="https://s1.ax1x.com/2023/03/14/pp1SsGq.png" alt="10"></p><p>2.<code>通过Github账号</code>继续，选择导入刚刚创建的仓库，然后直接部署即可</p><p><img src="https://s1.ax1x.com/2023/03/14/pp1S6zV.png" alt="11"></p><p>3.进入该项目控制台后，选择右上角的<code>View Domains</code>。</p><p><img src="https://s1.ax1x.com/2023/03/14/pp1pSJI.png" alt="12"></p><p>4.添加新的域名(添加一个自己域名的二级域名)，然后在你对应的域名解析控制台添加对应解析，等待生效。(生效需要时间，请耐心等待)</p><p><img src="https://s1.ax1x.com/2023/03/14/pp1peFs.png" alt="13"></p><p>5.通过<code>自定义域名+资源路径</code>即可访问到对应的资源，例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">初始域名+资源路径示例</span>](<span class="link">https://pic-bed-one-murex.vercel.app/img/wallhaven-m3lz2y.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">自定义域名+资源路径示例</span>](<span class="link">https://picbed.jess.win/img/wallhaven-m3lz2y.jpg</span>)</span><br></pre></td></tr></table></figure><p>新图片只要将资源复制到对应的文件夹，然后再执行一次下面的命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这个命令默认是更新到仓库的<code>main</code>分支上，Vercel一旦检测到main分支发送变化就会触发新一轮部署，我们稍候片刻即可通过新的路径访问到新的资源。</p><h3 id="Cloudflare部署"><a href="#Cloudflare部署" class="headerlink" title="Cloudflare部署"></a>Cloudflare部署</h3><p>此方法速度比Vercel稍慢，不需要域名，而且CloudFlare对于普通用户来说几乎不限量了</p><p>1.进入<a href="https://www.cloudflare.com/zh-cn/">Cloudflare官网</a>注册并登录自己的账号，然后进入控制台后选择左边的<code>Pages</code>，再创建一个新项目并通过Git进行连接，所有参数默认直接部署。</p><p><img src="https://s1.ax1x.com/2023/03/15/pp3mkqA.png" alt="14"></p><p><img src="https://s1.ax1x.com/2023/03/15/pp3mfQe.png" alt="15"></p><p>2.通过给出的<code>初始域名+资源路径</code>即可访问到的对应资源,也可以绑定自定义域名使用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">初始域名+资源路径示例</span>](<span class="link">https://pic-bed-90q.pages.dev/img/wallhaven-m3lz2y.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">自定义域名+资源路径示例</span>](<span class="link">https://picbed.wieb.xyz/img/wallhaven-m3lz2y.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="PicGo结合Markdown实时上传图片"><a href="#PicGo结合Markdown实时上传图片" class="headerlink" title="PicGo结合Markdown实时上传图片"></a>PicGo结合Markdown实时上传图片</h2><p>PicGo介绍：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>PicGo下载链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><blockquote><p>PicGo：是一个用于快速上传图片并获取图片URL链接的工具<br>关键是他可以与Typora配套一起使用，在粘贴图片的同时上传图片。</p></blockquote><p>下载软件后直接一直默认安装下去就行。我安装的是2.3.1版本</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8G8Mt.png" alt="16"></p><h3 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h3><p>1.打开PicGo，取消设置里除了GitHub图床选项剩下的选项全部取消。</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8J71s.png" alt="17"></p><p>2.在Github新建一个仓库，重要的是权限一定要选<code>public</code>，这样图片才可以随时随地访问到。</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8a9IK.png" alt="18"></p><p>3.获取ToKen：<code>点击GitHub头像</code>–<code>Setting</code>–<code>Developer Settings</code>–<code>Personal access tokens</code>–<code>tokens(classic)</code></p><p><img src="https://s1.ax1x.com/2023/03/16/pp8a8Mj.png" alt="19"></p><p>4.创建Token时<code>填写Note</code>，Exporation选<code>No expiration</code>永无过期，Select scopes必须勾上<code>，最后点击</code>Generate token&#96;。</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8wkDA.png" alt="20"></p><p>5.此时必须马上复制出现的token备用，刷新之后就不能看见了</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8w1Ds.png" alt="21"></p><p>6.打开PicGo，在图床设置的Github配置处，按照下图填入对应的信息：</p><p><img src="https://s1.ax1x.com/2023/03/16/pp80zlD.png" alt="22"></p><blockquote><p>自定义域名的格式为：<a href="https://cdn.staticaly.com/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@main%E3%80%82">https://cdn.staticaly.com/gh/用户名/仓库名@main。</a></p></blockquote><p>例如：<br><code>https://cdn.staticaly.com/gh/885480665/md_pic@main</code>，对应的用户名和仓库名记住要换成自己名字</p><p>7.随便拖一张图片进来上传区域里就可以上传成功。</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8DPvF.png" alt="23"></p><p>8.点击相册就可看到上传的图片，点击复制按钮就可复制图片链接。</p><p><img src="https://s1.ax1x.com/2023/03/16/pp8DCgU.png" alt="24"></p><p>此时打开仓库可以看到图片上传到了指定的文件夹。</p><blockquote><p>注意：每个仓库大小限制是1G！！！</p></blockquote><p><img src="https://s1.ax1x.com/2023/03/16/pp8Du8K.png" alt="25"></p><h3 id="Cloudflare部署-1"><a href="#Cloudflare部署-1" class="headerlink" title="Cloudflare部署"></a>Cloudflare部署</h3><blockquote><p>此方法速度比Vercel稍慢，但是可以不需要域名</p></blockquote><ol><li></li></ol><h2 id="这个文章还没有写完，正在努力创作中🥲😢🥲🫥"><a href="#这个文章还没有写完，正在努力创作中🥲😢🥲🫥" class="headerlink" title="这个文章还没有写完，正在努力创作中🥲😢🥲🫥"></a>这个文章还没有写完，正在努力创作中🥲😢🥲🫥</h2><p><img src=""></p><p><img src=""></p><p><img src=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ESP01/01S配合继电器实现Homkit控制开关</title>
      <link href="/2023/02/25/%E4%BD%BF%E7%94%A8ESP01-01S%E9%85%8D%E5%90%88%E7%BB%A7%E7%94%B5%E5%99%A8%E5%AE%9E%E7%8E%B0Homkit%E6%8E%A7%E5%88%B6%E5%BC%80%E5%85%B3/"/>
      <url>/2023/02/25/%E4%BD%BF%E7%94%A8ESP01-01S%E9%85%8D%E5%90%88%E7%BB%A7%E7%94%B5%E5%99%A8%E5%AE%9E%E7%8E%B0Homkit%E6%8E%A7%E5%88%B6%E5%BC%80%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用esp8266系列的芯片写入固件实现原生的HomeKit支持，也就是说无需使用Home Assistant或者Homebridge就可以使用苹果家庭配对esp8266到苹果家庭里实现各种功能。</p></blockquote><p>本文给大家带来的是让你的ESP-01&#x2F;01S芯片配合继电器来实现原生苹果家庭支持，无需其他硬件安装Home Assistant来桥接苹果家庭。</p><h2 id="准备的材料："><a href="#准备的材料：" class="headerlink" title="准备的材料："></a>准备的材料：</h2><ul><li>ESP01&#x2F;01S或者其他ESP8266芯片</li></ul><p><img src="https://s1.ax1x.com/2023/03/07/ppZcmDK.jpg" alt="1"></p><ul><li>继电器模块</li></ul><p><img src="https://s1.ax1x.com/2023/03/07/ppZcnHO.jpg" alt="2"></p><ul><li>ESP01芯片烧写器，如果有其他串口烧写器可以使用自己的烧写器</li></ul><p><img src="https://s1.ax1x.com/2023/03/07/ppZcKED.jpg" alt="3"></p><h2 id="下载这个文件"><a href="#下载这个文件" class="headerlink" title="下载这个文件"></a>下载这个文件</h2><p><a href="https://github.com/RavenSystem/haa_ota/releases/latest/download/haaboot.bin/">haaboot.bin</a></p><p><a href="https://github.com/SuperHouse/esp-open-rtos/raw/master/bootloader/firmware_prebuilt/rboot.bin">rboot.bin</a></p><p><a href="https://www.espressif.com/sites/default/files/tools/flash_download_tool_3.9.4_0.zip">ESP8266刷写软件</a></p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>打开ESP8266刷写软件(最好是以管理员身份运行)，ChipType:<code>ESP8266</code>–WorkMode:<code>Develop</code>点击OK</p><p><img src="https://s1.ax1x.com/2023/03/07/ppZIaVI.png" alt="4"></p><p>首先需点击<code>ERASE</code>清除ESP8266中的程序</p><p><img src="https://s1.ax1x.com/2023/03/07/ppZIwIP.png" alt="5"></p><p>按照我的图片配置，点击<code>START</code></p><p><img src="https://s1.ax1x.com/2023/03/07/ppZIdat.png" alt="6"></p><blockquote><p>注意选对电脑对应的com口，在<code>此电脑右击</code>–<code>管理</code>–<code>设备管理器</code>–<code>端口(COM和LPT)</code>中查看</p></blockquote><h2 id="ESP8266设置"><a href="#ESP8266设置" class="headerlink" title="ESP8266设置"></a>ESP8266设置</h2><p>刷写成功后，找到<code>HAA-XXXXXX</code>的无线，连接使用浏览器访问<code>http://192.168.4.1</code></p><h2 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HomeAssistant </tag>
            
            <tag> IoT </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO环境搭建</title>
      <link href="/2023/02/21/MinIO%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/02/21/MinIO%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="https://docs.min.io/docs/">https://docs.min.io/docs/</a><br>中文文档：<a href="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a> （没有及时更新，容易被坑）</p></blockquote><p>MinIO支持多种Server启动模式：</p><p><img src="https://s1.ax1x.com/2023/02/28/ppPlcoq.jpg" alt="1"></p><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><p>minio server的standalone模式，即要管理的磁盘都在host本地。该启动模式一般仅用于实验环境、测试环境的验证和学习使用。在standalone模式下，还可以分为<code>non-erasure code mode</code>和<code>erasurecode mode</code>。</p><ul><li><p>non-erasure code mode</p></li><li><p>在此启动模式下，对于每一份对象数据，minio直接在data下面存储这份数据，不会建立副本，也不会启用纠删码机制。因此，这种模式无论是服务实例还是磁盘都是“单点”，无任何高可用保障，磁盘损坏就表示数据丢失。</p></li><li><p>erasure code mode<br>此模式为minio server实例传入多个本地磁盘参数。一旦遇到多于一个磁盘参数，minio server会自动启用erasure code mode。erasure code对磁盘的个数是有要求的，如不满足要求，实例启动将失败。 erasure code启用后，要求传给minio server的endpoint(standalone模式下，即本地磁盘上的目录)至少为4个。</p></li></ul><h3 id="基于CentOS7"><a href="#基于CentOS7" class="headerlink" title="基于CentOS7"></a>基于CentOS7</h3><table><thead><tr><th align="center">操作系统</th><th align="center">CPU架构</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">GNU&#x2F;Linux</td><td align="center">64-bit intel</td><td align="center"><a href="https://min.io/docs/minio/linux/index.html">https://min.io/docs/minio/linux/index.html</a></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line"><span class="built_in">chmod</span> +x minio</span><br><span class="line"><span class="comment">#启动minio server服务，指定数据存储目录/mnt/data</span></span><br><span class="line">sudo <span class="built_in">mv</span> minio server /mnt/data</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/28/ppPl2F0.jpg" alt="2"></p><p>默认用户名密码minioadmin:minioadmin，修改默认用户名密码可以使用：</p><blockquote><p>export MINIO_ROOT_USER&#x3D;admin<br>export MINIO_ROOT_PASSWORD&#x3D;12345678</p></blockquote><p>未完成………………………………………………………………..</p>]]></content>
      
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO简介</title>
      <link href="/2023/02/20/MinIO%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/02/20/MinIO%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式文件系统应用场景"><a href="#分布式文件系统应用场景" class="headerlink" title="分布式文件系统应用场景"></a>分布式文件系统应用场景</h2><p>互联网海量非结构化数据的存储需求</p><ul><li>电商网站：海量商品图片</li><li>视频网站：海量视频文件</li><li>网盘 : 海量文件</li><li>社交网站：海量图片</li></ul><h2 id="MinIO介绍"><a href="#MinIO介绍" class="headerlink" title="MinIO介绍"></a>MinIO介绍</h2><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><p><img src="https://s1.ax1x.com/2023/02/28/ppPK5yd.png" alt="1"></p><p>官网: <a href="https://min.io/">https://min.io/</a></p><blockquote><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。</p></blockquote><p>对于中小型企业，如果不选择存储上云，那么 Minio 是个不错的选择，麻雀虽小，五脏俱全。当然Minio 除了直接作为对象存储使用，还可以作为云上对象存储服务的网关层，无缝对接到 Amazon S3、MicroSoft Azure。</p><p>在中国：阿里巴巴、腾讯、百度、中国联通、华为、中国移动等等9000多家企业也都在使用MinIO产品。</p><h3 id="MinIO优点"><a href="#MinIO优点" class="headerlink" title="MinIO优点"></a>MinIO优点</h3><ul><li>部署简单: 一个single二进制文件即是一切，还可支持各种平台。</li><li>minio支持海量存储，可按zone扩展(原zone不受任何影响)，支持单个对象最大5TB;</li><li>兼容Amazon S3接口，充分考虑开发人员的需求和体验;</li><li>低冗余且磁盘损坏高容忍，标准且最高的数据冗余系数为2(即存储一个1M的数据对象，实际占用磁盘空间为2M)。但在任意n&#x2F;2块disk损坏的情况下依然可以读出数据(n为一个纠删码集合(ErasureCoding Set)中的disk数量)。并且这种损坏恢复是基于单个对象的，而不是基于整个存储卷的。</li><li>读写性能优异</li></ul><p><img src="https://s1.ax1x.com/2023/02/28/ppPMU0I.jpg" alt="2"></p><h2 id="MinIO的基础概念"><a href="#MinIO的基础概念" class="headerlink" title="MinIO的基础概念"></a>MinIO的基础概念</h2><ul><li>Object：存储到 Minio 的基本对象，如文件、字节流，Anything…</li><li>Bucket：用来存储 Object 的逻辑空间。每个 Bucket 之间的数据是相互隔离的。对于客户端而言，就相当于一个存放文件的顶层文件夹。</li><li>Drive：即存储数据的磁盘，在 MinIO 启动时，以参数的方式传入。Minio 中所有的对象数据都会存储在 Drive 里。</li><li>Set ：即一组 Drive 的集合，分布式部署根据集群规模自动划分一个或多个 Set ，每个 Set 中的Drive 分布在不同位置。一个对象存储在一个 Set 上。（For example: {1…64} is divided into 4sets each of size 16.）<ul><li>一个对象存储在一个Set上</li><li>一个集群划分为多个Set</li><li>一个Set包含的Drive数量是固定的，默认由系统根据集群规模自动计算得出</li><li>一个SET中的Drive尽可能分布在不同的节点上</li></ul></li></ul><h2 id="纠错码EC（Erasure-Code）"><a href="#纠错码EC（Erasure-Code）" class="headerlink" title="纠错码EC（Erasure Code）"></a>纠错码EC（Erasure Code）</h2><p>MinIO 使用纠删码机制来保证高可靠性，使用 highwayhash 来处理数据损坏（ Bit Rot Protection ）。关于纠删码，简单来说就是可以通过数学计算，把丢失的数据进行还原，它可以将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。</p><h2 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h2><p>文件对象上传到 MinIO ，会在对应的数据存储磁盘中，以 Bucket 名称为目录，文件名称为下一级目录，文件名下是 part.1 和 xl.meta(老版本，最新版本如下图)，前者是编码数据块及检验块，后者是元数据文件。</p><p><img src="https://s1.ax1x.com/2023/02/28/ppPMNnA.jpg" alt="3"></p><h2 id="存储方案"><a href="#存储方案" class="headerlink" title="存储方案"></a>存储方案</h2><p><img src="https://s1.ax1x.com/2023/02/28/ppPMycQ.jpg" alt="4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/2023/02/13/Linux%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2023/02/13/Linux%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<p>本教程基于官网教程整理：</p><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h2 id="操作系统要求"><a href="#操作系统要求" class="headerlink" title="操作系统要求"></a>操作系统要求</h2><p>要安装 Docker Engine，您需要 CentOS 7、CentOS 8（流）或 CentOS 9（流）的维护版本。存档版本不受支持或测试。</p><p>centos-extras必须启用存储库。此存储库默认启用，但如果您已禁用它，则需要重新启用它。</p><p>推荐使用overlay2存储驱动。</p><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果安装了这些，需要卸载它们以及相关的依赖项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>yum如果报告没有安装这些软件包，那也没关系。</p><p>当您卸载Docker 时，存储在其中的图像、容器、卷和网络&#x2F;var&#x2F;lib&#x2F;docker&#x2F;不会自动删除。Docker引擎包现在称为docker-ce.</p><h2 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h2><p>可以根据需要以不同的方式安装Docker Engine：</p><ul><li><p>可以设置Docker的存储库并从中安装，以简化安装和升级任务。这是推荐的方法。</p></li><li><p>可以下载RPM包并手动安装并完全手动管理升级。这在诸如在无法访问Internet的系统上安装Docker等情况下非常有用。</p></li><li><p>在测试和开发环境中，您可以使用自动化的便捷脚本来安装Docker。</p></li></ul><h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装Docker Engine之前，您需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p><h4 id="设置存储库安装"><a href="#设置存储库安装" class="headerlink" title="设置存储库安装"></a>设置存储库安装</h4><p>yum-utils包（提供yum-config-manager 实用程序）并设置存储库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装Docker-Engine-1"><a href="#安装Docker-Engine-1" class="headerlink" title="安装Docker Engine$1"></a>安装Docker Engine<a id="$1">$1</a></h4><p>1.安装Docker Engine、containerd和Docker Compose：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>如果提示接受 GPG 密钥，请验证指纹是否匹配 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，如果匹配，则接受。</p><p>此命令安装 Docker，但不会启动 Docker。它还会创建一个docker组，但是默认情况下不会向该组添加任何用户。</p><p>2.启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>3.通过运行映像验证Docker Engine安装是否成功hello-world。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>此命令下载测试镜像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出。</p><blockquote><p>现在已经成功安装并启动了Docker引擎。docker 用户组存在但不包含任何用户，这就是为什么需要使用 sudo 来运行 Docker 命令的原因。继续Linux postinstall以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p></blockquote><h4 id="升级Docker-Engine"><a href="#升级Docker-Engine" class="headerlink" title="升级Docker Engine"></a>升级Docker Engine</h4><p>要升级 Docker Engine，请按<a href="#$1">安装过程$1处</a>进行操作，选择要安装的新版本。</p><h3 id="从包安装-2"><a href="#从包安装-2" class="headerlink" title="从包安装$2"></a>从包安装<a id="$2">$2</a></h3><p>如果不能使用Docker的存储库来安装Docker，您可以下载<code>.rpm</code>适用于您的版本的文件并手动安装。每次升级Docker Engine时都需要下载一个新文件。</p><p>1.转到<a href="https://download.docker.com/linux/centos/">https://download.docker.com/linux/centos/</a>并选择对应的CentOS版本。然后浏览<code>x86_64/stable/Packages/</code>并下载<code>.rpm</code>要安装的Docker版本的文件。</p><p>2.安装Docker Engine，将下面的路径更改为下载Docker包的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure><p>Docker 已安装但未启动。该docker组已创建，但没有用户添加到该组。</p><p>3.启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>4.通过运行映像验证Docker Engine安装是否成功hello-world。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>此命令下载测试图像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出。</p><p>现在已经成功安装并启动了Docker Engine。docker用户组存在但不包含任何用户，这就是为什么您需要使用sudo来运行Docker命令的原因。继续Linux postinstall以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p><h4 id="升级Docker-Engine-1"><a href="#升级Docker-Engine-1" class="headerlink" title="升级Docker Engine"></a>升级Docker Engine</h4><p>升级Docker Engine需下载更新的包文件并重复<a href="#$2">安装过程$2处</a>，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y upgrade</span><br></pre></td></tr></table></figure><h3 id="使用脚本安装-不建议使用"><a href="#使用脚本安装-不建议使用" class="headerlink" title="使用脚本安装(不建议使用)"></a>使用脚本安装(不建议使用)</h3><h4 id="脚本安装稳定版"><a href="#脚本安装稳定版" class="headerlink" title="脚本安装稳定版"></a>脚本安装稳定版</h4><p>Docker 在<a href="https://get.docker.com/">https://get.docker.com/</a>上提供了一个方便的脚本， 用于以非交互方式将Docker安装到开发环境中。</p><p>不建议将便利脚本用于生产环境，但它对于创建适合您的需求的供应脚本很有用。</p><p>在本地运行脚本之前，请始终检查从Internet下载的脚本。在安装之前，让自己熟悉便利脚本的潜在风险和限制：</p><ul><li>该脚本需要root或sudo特权才能运行。</li><li>该脚本会尝试检测您的 Linux 发行版和版本，并为您配置包管理系统。</li><li>该脚本不允许您自定义大多数安装参数。</li><li>该脚本无需确认即可安装依赖项和建议。这可能会安装大量软件包，具体取决于主机的当前配置。</li><li>默认情况下，脚本会安装 Docker、containerd 和 runc 的最新稳定版本。使用此脚本配置机器时，可能会导致意外的 Docker 主要版本升级。在部署到您的生产系统之前，始终在测试环境中测试升级。</li><li>该脚本并非旨在升级现有的 Docker 安装。使用脚本更新现有安装时，依赖项可能无法更新到预期版本，从而导致版本过时。</li></ul><blockquote><p>提示：以使用选项运行脚本<code>--dry-run</code>以了解脚本在调用时将运行哪些步骤：</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh ./get-docker.sh --dry-run</span><br></pre></td></tr></table></figure></blockquote><p>此示例从<a href="https://get.docker.com/">https://get.docker.com/</a>下载脚本 并运行它以在 Linux 上安装最新稳定版本的 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">Executing docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737</span><br><span class="line">&lt;...&gt;</span><br></pre></td></tr></table></figure><p>现在已经成功安装并启动了Docker引擎。该docker服务在基于Debian的发行版上自动启动。在RPMCentOS、Fedora、RHEL或SLES等基础发行版上，需要使用适当的systemctl或service命令手动启动它。如消息所示，默认情况下，非根用户无法运行 Docker 命令。</p><h4 id="脚本安装测试版"><a href="#脚本安装测试版" class="headerlink" title="脚本安装测试版"></a>脚本安装测试版</h4><p>Docker还在<a href="https://test.docker.com/">https://test.docker.com/</a>上提供了一个方便的脚本，用于在Linux上安装Docker的预发布版本。此脚本等同于 中的脚本get.docker.com，但将您的包管理器配置为使用 Docker 包存储库的测试通道。测试通道包括 Docker 的稳定版和预发布版（测试版、候选发布版）。使用此脚本可以尽早访问新版本，并在它们作为稳定版本发布之前在测试环境中对其进行评估。</p><p>要从测试频道在Linux上安装最新版本的Docker运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://test.docker.com -o test-docker.sh</span><br><span class="line">sudo sh test-docker.sh</span><br></pre></td></tr></table></figure><h4 id="使用脚本安装后升级"><a href="#使用脚本安装后升级" class="headerlink" title="使用脚本安装后升级"></a>使用脚本安装后升级</h4><p>使用便捷脚本安装了 Docker，则应直接使用包管理器升级 Docker。重新运行便利脚本没有任何好处。如果它尝试重新安装主机上已经存在的存储库，则重新运行它可能会导致问题。</p><h2 id="卸载Docker-Engine"><a href="#卸载Docker-Engine" class="headerlink" title="卸载Docker Engine"></a>卸载Docker Engine</h2><p>1.卸载 Docker Engine、CLI、containerd 和 Docker Compose 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br></pre></td></tr></table></figure><p>2.主机上的图像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><p>任何已编辑的配置文件必须手动删除。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客之二</title>
      <link href="/2023/02/13/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C/"/>
      <url>/2023/02/13/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一节我们吧Git与Github已经连接成功，兄弟们，离成功不远了坚持住！胜利就在前方😎</p><h2 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h2><p>在目标路径（我这里选的路径为【D:&#x2F;HexoBlog】）打开GitBash命令窗口，执行hexo init初始化项目。（根据经验GitBash要以管理员身份运行）</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init (项目名)</span><br></pre></td></tr></table></figure><p>进入JessBlog ，输入以下命令npm i安装相关依赖。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cAZq.png" alt="1"></p><h3 id="初始化项目后，blog-demo有如下结构："><a href="#初始化项目后，blog-demo有如下结构：" class="headerlink" title="初始化项目后，blog-demo有如下结构："></a>初始化项目后，blog-demo有如下结构：</h3><p>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【_config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cEd0.png" alt="2"></p><p>输入以下命令可在浏览器查看效果。</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/15/pS7cVoV.png" alt="3"></p><p>打开浏览器，输入地址：<a href="http://localhost:4000/%E3%80%82%E5%A6%82%E6%9E%9C%E8%83%BD%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%E8%AF%B4%E6%98%8E%E5%8D%9A%E5%AE%A2%E5%B7%B2%E7%BB%8F%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:4000/。如果能看到效果说明博客已经构建成功。</a></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cMQJ.png" alt="4"></p><h2 id="将静态博客挂在到GitHub-Pages"><a href="#将静态博客挂在到GitHub-Pages" class="headerlink" title="将静态博客挂在到GitHub Pages"></a>将静态博客挂在到GitHub Pages</h2><p>之前我们已经完成了对 GitHub 账户的注册以及 Github Pages 的创建，并且为 GitHub 配置了 SSH key, 我们将博客部署到 GitHub Pages 上即可。</p><h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h3><p>在<code>JessBlog目录下的_config.yml</code>，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可。</p><p>检查自己的默认分支是不是master。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: github.com/885480665/JessBlog.github.io.git</span><br><span class="line">  branch: master  </span><br></pre></td></tr></table></figure><h3 id="部署项目到GitHub"><a href="#部署项目到GitHub" class="headerlink" title="部署项目到GitHub"></a>部署项目到GitHub</h3><p>修改好配置后，运行如下命令，将代码部署到GitHub。(此命令经常会用到)</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;hexo generate;hexo deploy</span><br></pre></td></tr></table></figure><p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。<br>hexo generate：生成静态文章，可以用hexo g缩写<br>hexo deploy：部署文章，可以用hexo d缩写</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cFLn.png" alt="5"></p><p>注意：deploy时可能要输入你的username和password。（也可以不设置，回车默认没有密码）<br>如果出现Deploy done，则说明部署成功了。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cmJU.png" alt="6"></p><p>此时可通过<a href="https://jessblog.github.io/%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E3%80%82%EF%BC%88%E5%9B%BD%E5%86%85%E6%9C%89%E6%97%B6%E5%80%99%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%EF%BC%89">https://jessblog.github.io/进行访问。（国内有时候不能访问）</a></p><h2 id="Vercel部署与自定义域名"><a href="#Vercel部署与自定义域名" class="headerlink" title="Vercel部署与自定义域名"></a>Vercel部署与自定义域名</h2><h3 id="Vercel简介"><a href="#Vercel简介" class="headerlink" title="Vercel简介"></a>Vercel简介</h3><p>Vercel简介：vercel是一个代码托管平台，它能够托管你的静态html界面，甚至能够托管你的node.js与Python服务端脚本。</p><h3 id="使用Vercel部署Hexo项目步骤"><a href="#使用Vercel部署Hexo项目步骤" class="headerlink" title="使用Vercel部署Hexo项目步骤"></a>使用Vercel部署Hexo项目步骤</h3><p>1、首先需要注册一个Vercel账号，推荐使用GitHub账户关联，这样就可以在Vercel中直接托管GitHub库中的项目了。实现开发部署一步到位（网络不通畅可考虑挂梯子）。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7caSe.png" alt="7"></p><p>2、当GitHub账户关联并绑定手机号后，点击右上角<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>,这时候能看到你GitHub账号的仓库，选择刚刚部署成功的存储库静态博客仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示要导入该仓库。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cnWF.png" alt="8"></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7cQy9.png" alt="9"></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7clLR.png" alt="10"></p><p>3、起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功，部署成功后点击<code>Continue to Dashboard</code>跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为GFW最近把Vercel屏蔽了。</p><p><img src="" alt="11"></p><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>现在的个人网站的地址是<code>username.github.io</code>以及在Vercel上有一个<code>jessblog-chi.vercel.app</code>。如果觉得不够定制化，可以购买一个专属域名。<br>腾讯云、阿里云等都是不错的域名代理商，建议选用com，cn或cc这类常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。此处以阿里云域名为例进行说明，购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加Vercel所需的解析记录，注意博主这里是解析二级域名只需要解析一条即可。但是如果是一级域名，需要解析两个，一个是@另外一个是www，Vercel建议是@的解析重定向至www。</p><p>以域名wieb.xyz为例说明：</p><table>  <tr>    <th>主机记录</th>    <th>解释</th>  </tr>  <tr>    <th>www</th>    <th>解析后的域名为www.wieb.xyz</th>  </tr>  <tr>    <th>@</th>    <th>直接解析主域名wieb.xyz</th>  </tr>  <tr>    <th>*</th>    <th>泛解析，匹配其他所有域名 *.wieb.xyz</th>  </tr>  <tr>    <th>mail</th>    <th>将域名解析为mail.wieb.xyz，通常用于解析邮箱服务器</th>  </tr>  <tr>    <th>二级</th>    <th>如abc.wieb.xyz，填写 abc</th>  </tr>  <tr>    <th>手机网站</th>    <th>如m.wieb.xyz，填写 m</th>  </tr>  <tr>    <th>显性URL</th>    <th>不支持泛解析（泛解析：将所有子域名解析到同一地址）</th>  </tr></table><p>将域名指向云服务器，请选择「A」；<br>将域名指向另一个域名，请选择「CNAME」；<br>建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p><table>  <tr>    <th>记录类型</th>    <th>解释</th>  </tr>  <tr>    <th>A</th>    <th>用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录</th>  </tr>  <tr>    <th>@</th>    <th>如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录</th>  </tr>  <tr>    <th>MX</th>    <th>如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录</th>  </tr>  <tr>    <th>TXT</th>    <th>在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</th>  </tr>  <tr>    <th>NS</th>    <th>域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录</th>  </tr>  <tr>    <th>AAAA</th>    <th>用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录</th>  </tr>  <tr>    <th>SRV</th>    <th>记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp</th>  </tr>  <tr>    <th>显性URL</th>    <th>从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）</th>  </tr>  <tr>    <th>隐性URL</th>    <th>类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名</th>  </tr></table><h3 id="添加自定义域名的步骤"><a href="#添加自定义域名的步骤" class="headerlink" title="添加自定义域名的步骤"></a>添加自定义域名的步骤</h3><p>点击Vercel控制面板右上角的<code>View Domains</code>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入刚刚购买的域名，我这里以二级域名<code>demo.wieb.xyz</code>为例进行说明，添加后他会提示你添加一条DNS解析记录。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7gB3F.png" alt="12"></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7gdhT.png" alt="13"></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7gaNV.png" alt="14"></p><p>PS：如果你是新买的域名，直接输入你新买的一级域名即可，例如<code>wieb.xyz</code>，他会推荐你将<code>wieb.xyz</code>重定向至<code>www.wieb.xyz</code>，点<code>ADD</code>即可，然后他会提示你添加两条解析记录，一个是<code>@</code>开头的和<code>CNAME</code>开头的，添加记录的方法和二级域名一致。<br>我在国外网站NameSilo购买的域名，操作方法：</p><p>点击右上角头像–<code>My Account</code></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7gUA0.png" alt="15"></p><p>点击<code>daoman manager</code></p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbZ1s.png" alt="16"></p><p>找到要使用的域名:<code>wieb.xyz</code></p><p><img src="https://s1.ax1x.com/2023/02/15/pS7gDc4.png" alt="17"></p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbktg.png" alt="18"></p><p>记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。</p><p>回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。（下面的例子是其他博客的截图，大同小异了属于是）</p><p>回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。</p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbFAS.png" alt="19"></p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbVpj.png" alt="20"></p><p>当你有了新的域名之后，需要<code>[JessBlogt]\_config.yml</code>文件中的url配置项为自己的新域名，这样博客的文章链接才会正确生成。</p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbP78.png" alt="21"></p><p><img src="https://s1.ax1x.com/2023/02/16/pSHbecn.png" alt="22"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客之一</title>
      <link href="/2023/02/10/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/"/>
      <url>/2023/02/10/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此教程参考大佬们集合为一体演化产品<br>    唐志远的博客大佬文章：<a href="https://tzy1997.com/articles/hexo1601/">https://tzy1997.com/articles/hexo1601/</a><br>    Fomal大佬文章：<a href="https://www.fomal.cc/posts/e593433d.html">https://www.fomal.cc/posts/e593433d.html</a></p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="本教程面向Windows用户"><a href="#本教程面向Windows用户" class="headerlink" title="本教程面向Windows用户"></a>本教程面向Windows用户</h3><p>操作系统Windows11<br>Node<br>Git<br>Hexo<br>idea(推荐使用Visual Studo Code)<br>一个GitHub账号<br>一个云服务器（可选）<br>一个域名（可选）</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>详情请看下方链接，本人多次失败后总结的经验😢<br><a href="https://www.jess.win/2023/01/02/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">https://www.jess.win/2023/01/02/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</a></p><p>1、打开Node官网，下载和自己系统对应的Node安装程序，下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="https://s1.ax1x.com/2023/02/14/pSTUqaj.png" alt="1"></p><p><code>如果后面美化过程中需要拉取豆瓣、哔哩哔哩等建议安装较低的版本（v12.19.0）</code><br>查看历史版本，找到v12.19.0进行下载。</p><p><img src="https://s1.ax1x.com/2023/02/14/pSTUjGq.png" alt="2"></p><p>2、下载后傻瓜式安装即可，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;nodejs&#x2F;】，也可以自定义路径。<br>这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!</p><p>3、安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSTUTsS.png" alt="3"></p><p>4、修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像（若有科学上网环境可无需更换）。打开CMD窗口，运行如下命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>1、打开Git官网，下载和自己系统对应的Git安装程序，下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>2、下载后傻瓜式安装即可，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;Git&#x2F;】，也可以自定义路径。</p><p>3、点击电脑左下角开始即可看见Git Bash。</p><p>Git CMD 是windows 命令行的指令风格<br>Git Bash 是linux系统的指令风格（建议使用）<br>Git GUI是图形化界面（新手学习不建议使用）</p><p>4、打开Git Bash后如下图所示即代表安装完成。</p><p><img src="https://s1.ax1x.com/2023/02/14/pSTU5xf.png" alt="4"></p><p>常用命令：</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line"></span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line"></span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>1、在Git BATH输入以下命令安装</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSTUoM8.png" alt="5"></p><p>2、输入一下命令验证是否安装成功。</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSTU7qg.png" alt="6"></p><h3 id="注册GitHub账号，创建GitHub仓库"><a href="#注册GitHub账号，创建GitHub仓库" class="headerlink" title="注册GitHub账号，创建GitHub仓库"></a>注册GitHub账号，创建GitHub仓库</h3><p>GitHub地址：<a href="https://github.com/">https://github.com/</a></p><p>完成注册后，直接在创建GitHub仓库讲起点击右上角+按钮，创建一个&lt;用户名&gt;.github.io的仓库。</p><p><img src="https://s1.ax1x.com/2023/02/14/pSTUbZQ.png" alt="7"></p><p>若找不到创建入口的，访问：<a href="https://github.com/new">https://github.com/new</a></p><p>仓库的格式必须为：&lt;用户名&gt;.github.io</p><p>Description：为描述仓库（选填）</p><p>勾选 Initialize this repository with a README 初始化一个 README.md 文件</p><p>点击 Creat repository 进行创建</p><p><img src="https://s1.ax1x.com/2023/02/14/pSTUXin.png" alt="8"></p><h3 id="Git连接GitHub"><a href="#Git连接GitHub" class="headerlink" title="Git连接GitHub"></a>Git连接GitHub</h3><p>打开Git Bash输入命令配置用户名和邮箱</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入后没有报错即代表设置成功。如图：</p><p><img src="https://s1.ax1x.com/2023/02/14/pSTULIs.png" alt="9"></p><p>通过以下命令检查是否配置成功。</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/15/pS7DPfJ.png" alt="10"></p><p>生成ssh公钥，执行以下命令连接Github。</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>点击Enter后会显示默认创建的文件夹和设置密码。直接回车即可。（文件夹直接默认，密码也可以不设置）</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7DCY4.png" alt="11"></p><p>之后打开C盘用户文件夹下的.ssh的文件夹，会看到id_rsa.pub</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7D9kF.png" alt="12"></p><p>使用记事本打开上述图片中的公钥（id_rsa.pub）,复制里面的内容，然后开始在Github中配置ssh密钥。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7BzwT.png" alt="13"></p><p>将 SSH KEY 配置到 GitHub.进入github，点击右上角头像 选择settings</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7DSTU.png" alt="14"></p><p>进入设置页后选择<code>SSH and GPG keys</code>，点选<code>New SSH key</code>。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7DklR.png" alt="15"></p><p>注意: 要是有【Key type】的选择项 ，选择默认Authentication Key 即可。</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7DA61.png" alt="16"></p><p>连接测试，输入一下命令:</p><figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/15/pS7DFp9.png" alt="17"></p><p>此时Git与Github已经连接成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简介</title>
      <link href="/2023/02/07/Docker%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/02/07/Docker%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Docker解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p><h2 id="VMware与Docker的区别："><a href="#VMware与Docker的区别：" class="headerlink" title="VMware与Docker的区别："></a>VMware与Docker的区别：</h2><ul><li><p>传统的虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，在该系统上再运行所需应用进程。</p></li><li><p>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且没有进行硬件虚拟。因此容器要比传统虚拟机更轻便。</p></li><li><p>每个容器之间相互隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。</p></li></ul><h2 id="为什么Docker比虚拟机快"><a href="#为什么Docker比虚拟机快" class="headerlink" title="为什么Docker比虚拟机快:"></a>为什么Docker比虚拟机快:</h2><ul><li>Docker有着比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，而不需要加载操作系统OS内核</li></ul><p><img src="https://s1.ax1x.com/2023/02/23/pSxDuLD.png" alt="1"></p><table><thead><tr><th align="center"></th><th align="center">Docker容器</th><th align="center">VMware虚拟机</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">与宿主机共享OS</td><td align="center">宿主机OS上运行虚拟机OS</td></tr><tr><td align="center">存储大小</td><td align="center">镜像小，便于存储与传输</td><td align="center">镜像庞大（vmdk、vdi等）</td></tr><tr><td align="center">运行性能</td><td align="center">几乎无额外性能损失</td><td align="center">操作系统额外的CPU、内存消耗大</td></tr><tr><td align="center">移植性</td><td align="center">轻便、灵活、适应于Linux</td><td align="center">笨重、与虚拟化技术耦合度高</td></tr><tr><td align="center">硬件亲和性</td><td align="center">面向软件开发者</td><td align="center">面向硬件运维者</td></tr><tr><td align="center">部署速度</td><td align="center">快速、秒级</td><td align="center">较慢，10s以上</td></tr></tbody></table><h2 id="Docker的基本组成："><a href="#Docker的基本组成：" class="headerlink" title="Docker的基本组成："></a>Docker的基本组成：</h2><ul><li><p>镜像（image）</p></li><li><p>容器（Container）</p></li><li><p>仓库（Repository）</p></li></ul><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h3><p>一个只读模板。镜像可以用来创建Docker容器，一个镜像可以创建很多的容器。相当于是一个root文件系统。<br>如：官方镜像CentOS 7就包含了一套完整的CentOS 7最小的系统文件root文件系统。相当于容器的“源代码”。<br>容器与镜像的关系类似于面向对象编程中的对象与类。</p><table><thead><tr><th align="center">Docker</th><th align="center">面向对象</th></tr></thead><tbody><tr><td align="center">容器</td><td align="center">对象</td></tr><tr><td align="center">镜像</td><td align="center">类</td></tr></tbody></table><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><ul><li><p>从面向对象角度：<br>Docker利用容器独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境。容器是用镜像创建的运行实例；。就像是Java中的类和实例对象一样，竟像是静态的定义，容器是竞相运行的实体。容器为镜像提供了一个标准的和隔离的运行环境，他可以被启动、开始、停止、删除。每个容易都是相互隔离的、保证安全的平台。</p></li><li><ul><li>从镜像容器角度<br>可以把容器看做是一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</li></ul></li></ul><h3 id="仓库（Repository）："><a href="#仓库（Repository）：" class="headerlink" title="仓库（Repository）："></a>仓库（Repository）：</h3><p>是集中存放镜像文件的场所。</p><p>类似于：</p><ul><li><p>Maven仓库，存放各种iar报的地方；</p></li><li><p>Github仓库，存放各种git项目的地方；</p></li><li><p>Docker公司提供的仓库（Public）和私有仓库（Private）两种形式。</p></li></ul><p>最大的公开仓库 Docker Hub（ <a href="https://hub.docker.com/">https://hub.docker.com/</a> ），国内公开仓库：阿里云、网易云等</p><h3 id="仓库、镜像、容器的概念："><a href="#仓库、镜像、容器的概念：" class="headerlink" title="仓库、镜像、容器的概念："></a>仓库、镜像、容器的概念：</h3><ul><li><p>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是Image镜像文件。只通过这个镜像文件才能生成Docker容器实例（类似Java中new除开一个对象）。</p></li><li><p>Image文件可以看做是容器的模板。Docker根据Image文件生成容器的实力。同一个Image文件可以生成多个运行的容器实例。</p></li></ul><h4 id="镜像文件："><a href="#镜像文件：" class="headerlink" title="镜像文件："></a>镜像文件：</h4><p>Image文件生成的容器实例，本身也是一个文件，称为镜像文件。</p><h4 id="容器实例："><a href="#容器实例：" class="headerlink" title="容器实例："></a>容器实例：</h4><p>一个容器运行一种服务，当我们需要的时候可以通过Docker客服端创建一个对应的实例。</p><h4 id="仓库："><a href="#仓库：" class="headerlink" title="仓库："></a>仓库：</h4><p>放一堆镜像的地方，可以把镜像发布在仓库中，需要的时候再从仓库中拉下来。</p><h3 id="Docker工作原理、架构以及通信"><a href="#Docker工作原理、架构以及通信" class="headerlink" title="Docker工作原理、架构以及通信"></a>Docker工作原理、架构以及通信</h3><h4 id="Docker工作原理"><a href="#Docker工作原理" class="headerlink" title="Docker工作原理"></a>Docker工作原理</h4><p><img src="https://s1.ax1x.com/2023/02/23/pSxW6pQ.png" alt="2"></p><h4 id="run干了什么"><a href="#run干了什么" class="headerlink" title="run干了什么"></a>run干了什么</h4><p><img src="https://s1.ax1x.com/2023/02/23/pSxWsfg.png" alt="3"></p><h4 id="Docker整体架构以及底层通信原理"><a href="#Docker整体架构以及底层通信原理" class="headerlink" title="Docker整体架构以及底层通信原理"></a>Docker整体架构以及底层通信原理</h4><p><img src="https://s1.ax1x.com/2023/02/23/pSxWclj.png" alt="4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法/图标</title>
      <link href="/2023/01/20/Markdown%E8%AF%AD%E6%B3%95-%E5%9B%BE%E6%A0%87/"/>
      <url>/2023/01/20/Markdown%E8%AF%AD%E6%B3%95-%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Markdown标题–提升标题等级ctrl"><a href="#Markdown标题–提升标题等级ctrl" class="headerlink" title="Markdown标题–提升标题等级ctrl+"></a>Markdown标题–提升标题等级ctrl+</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h3 id="Markdown字体"><a href="#Markdown字体" class="headerlink" title="Markdown字体"></a>Markdown字体</h3><p>用1个星号<em>或底线_表示斜体 斜体：Ctrl+I<br>用2个星号</em>或底线_表示粗体 加粗：Ctrl+B<br>用3个星号*或底线_表示粗斜体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文字*</span><br><span class="line">_斜体文字_</span><br><span class="line">**粗体文字**</span><br><span class="line">__粗体文字__</span><br><span class="line">***粗斜体文字***</span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure><p><em>斜体文字</em><br><em>斜体文字</em><br><strong>粗体文字</strong><br><strong>粗体文字</strong><br><em><strong>粗斜体文字</strong></em><br><em><strong>粗斜体文字</strong></em></p><h3 id="Markdown分割线"><a href="#Markdown分割线" class="headerlink" title="Markdown分割线"></a>Markdown分割线</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">******</span><br><span class="line">------</span><br></pre></td></tr></table></figure><hr><hr><hr><h3 id="Markdown删除线-——-删除线：Alt-Shift-5"><a href="#Markdown删除线-——-删除线：Alt-Shift-5" class="headerlink" title="Markdown删除线 —— 删除线：Alt+Shift+5"></a>Markdown删除线 —— 删除线：Alt+Shift+5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~tencent.com~~</span><br></pre></td></tr></table></figure><p><del>tencent.com</del></p><h3 id="代码块-——-代码：Ctrl-Shift-96"><a href="#代码块-——-代码：Ctrl-Shift-96" class="headerlink" title="代码块 —— 代码：Ctrl+Shift+&#96;"></a>代码块 —— 代码：Ctrl+Shift+&#96;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`word`</span><br></pre></td></tr></table></figure><p><code>1word</code></p><h3 id="Markdown下划线-——-下划线：Ctrl-U"><a href="#Markdown下划线-——-下划线：Ctrl-U" class="headerlink" title="Markdown下划线 —— 下划线：Ctrl+U"></a>Markdown下划线 —— 下划线：Ctrl+U</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt; </span><br></pre></td></tr></table></figure><p><u>带下划线文本</u> </p><h3 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表直接在文字有加上1. 2. 3. 来表示，符号和文字之间加上一个空格字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="Markdown嵌套列表"><a href="#Markdown嵌套列表" class="headerlink" title="Markdown嵌套列表"></a>Markdown嵌套列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h3 id="Markdown链接-——-超链接：Ctrl-K"><a href="#Markdown链接-——-超链接：Ctrl-K" class="headerlink" title="Markdown链接 —— 超链接：Ctrl+K"></a>Markdown链接 —— 超链接：Ctrl+K</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [杰斯博客](https://www.jess.win//)</span><br><span class="line">&lt;https://www.jess.win//&gt;</span><br></pre></td></tr></table></figure><p>这是一个链接 <a href="https://www.jess.win//">杰斯博客</a><br><a href="https://www.jess.win//">https://www.jess.win//</a></p><h3 id="Markdown图片-——-图像：Ctrl-Shift-I"><a href="#Markdown图片-——-图像：Ctrl-Shift-I" class="headerlink" title="Markdown图片 —— 图像：Ctrl+Shift+I"></a>Markdown图片 —— 图像：Ctrl+Shift+I</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><p><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本"><br><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本" title="可选标题"></p><h3 id="Markdown表格-——-ctrl-T-插入表格"><a href="#Markdown表格-——-ctrl-T-插入表格" class="headerlink" title="Markdown表格 —— ctrl + T 插入表格"></a>Markdown表格 —— ctrl + T 插入表格</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">左对齐 | 右对齐 | 居中对齐</span><br><span class="line">:-----| ----: | :----:</span><br><span class="line">单元格 | 单元格 | 单元格</span><br><span class="line">单元格 | 单元格 | 单元格</span><br><span class="line"></span><br><span class="line">表头   | 表头</span><br><span class="line"> ----  | ---- </span><br><span class="line">单元格  | 单元格</span><br><span class="line">单元格  | 单元格</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="Markdown高亮-——-ctrl-T-插入表格"><a href="#Markdown高亮-——-ctrl-T-插入表格" class="headerlink" title="Markdown高亮 —— ctrl + T 插入表格"></a>Markdown高亮 —— ctrl + T 插入表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;</p><h3 id="Markdown实现页内跳转"><a href="#Markdown实现页内跳转" class="headerlink" title="Markdown实现页内跳转"></a>Markdown实现页内跳转</h3><h4 id="方式一：-1"><a href="#方式一：-1" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;table1&quot;</span>&gt;</span></span>Table - 1<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>    #要跳转的位置,id = 链接位置</span><br><span class="line">[<span class="string">跳转到 Table-1</span>](<span class="link">#table1</span>)        #在需要跳转的地方引用,点击即可实现跳转(编辑器中右键打开链接)</span><br></pre></td></tr></table></figure><h4 id="方式二：-1"><a href="#方式二：-1" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;table1&quot;</span>&gt;</span></span>Table - 1<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> #要跳转的位置,id = 链接位置</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#table2&quot;</span>&gt;</span></span>跳转到 Table-2<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>#在需要跳转的地方引用,点击即可实现跳转(编辑器中右键打开链接)</span><br></pre></td></tr></table></figure><h3 id="Markdown-图标"><a href="#Markdown-图标" class="headerlink" title="Markdown 图标"></a>Markdown 图标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">彩虹 &amp;#x1F308; 草莓 &amp;#x1F353;</span><br><span class="line">电话 &amp;#x1F4DE; 枫叶 &amp;#x1F341;</span><br><span class="line">脚印 &amp;#x1F463; 喇叭 &amp;#x1F4E3;</span><br><span class="line">拇指 &amp;#x1F44D; ok &amp;#x1F44C;</span><br><span class="line">红苹果 &amp;#x1F34E; 青苹果 &amp;#x1F34F;</span><br><span class="line">日期 &amp;#x1F4C6; 日期 &amp;#x1F4C5;</span><br><span class="line">时间 &amp;#x1F554; 手指 &amp;#x1F449;</span><br><span class="line">统计 &amp;#x1F4CA; 问号 ❓ &amp;#x2753;</span><br><span class="line">文件夹 &amp;#x1F4C2; 西瓜 &amp;#x1F349;</span><br><span class="line">邮箱 &amp;#x1F4E7; 直播 &amp;#x1F3A6;</span><br><span class="line">火箭 &amp;#x1F680; 可 &amp;#x1F251;</span><br><span class="line">雪人 ⛄ &amp;#x26C4; 冠军 &amp;#x1F3C6;</span><br><span class="line">爱心 &amp;#x1F493; 伤心 &amp;#x1F494;</span><br><span class="line">爱心 &amp;#x1F496; 主意 &amp;#x1F4A1;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s1.ax1x.com/2023/02/23/pSx0M6O.png" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本设置</title>
      <link href="/2023/01/07/Linux%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/01/07/Linux%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="设置root超级管理员"><a href="#设置root超级管理员" class="headerlink" title="设置root超级管理员"></a>设置root超级管理员</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo passwd root  <span class="comment">#开启root超级管理员</span></span><br><span class="line">$ su - root  <span class="comment">#Linux切换root用户</span></span><br></pre></td></tr></table></figure><h3 id="UbuntuServer网络配置"><a href="#UbuntuServer网络配置" class="headerlink" title="UbuntuServer网络配置"></a>UbuntuServer网络配置</h3><h4 id="查看版本信息与内核版本"><a href="#查看版本信息与内核版本" class="headerlink" title="查看版本信息与内核版本"></a>查看版本信息与内核版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cat</span> /proc/version</span><br><span class="line">$ sudo <span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/23/pSxKOeS.png" alt="1"></p><h4 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/23/pSxKbsf.png" alt="2"></p><h4 id="备份网卡信息"><a href="#备份网卡信息" class="headerlink" title="备份网卡信息"></a>备份网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> /etc/netplan/00-installer-config.yaml /etc/netplan/00-installer-config.yaml.bak</span><br></pre></td></tr></table></figure><h4 id="修改网卡地址信息"><a href="#修改网卡地址信息" class="headerlink" title="修改网卡地址信息"></a>修改网卡地址信息</h4><p>修改成自己的固定IP即可。推荐使用<strong>nano</strong>进行修改，本人有遇到过使用vi修改提示权限不足问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/netplan/00-installer-config.yaml</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/23/pSxKHQP.png" alt="3"></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netplan apply</span><br></pre></td></tr></table></figure><h3 id="Debian网络设置"><a href="#Debian网络设置" class="headerlink" title="Debian网络设置"></a>Debian网络设置</h3><h4 id="查看网卡信息-1"><a href="#查看网卡信息-1" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><h4 id="备份网卡信息-1"><a href="#备份网卡信息-1" class="headerlink" title="备份网卡信息"></a>备份网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> /etc/network/interfaces  /etc/network/interfaces.bak</span><br></pre></td></tr></table></figure><h4 id="修改网卡信息"><a href="#修改网卡信息" class="headerlink" title="修改网卡信息"></a>修改网卡信息</h4><p>编辑文件 &#x2F;etc&#x2F;network&#x2F;interfaces，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">source /etc/network/interfaces.d/*</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">allow-hotplug ens192</span><br><span class="line">iface ens192 inet static #static表示使用固定IP地址上网，dhcp表示使用动态ip</span><br><span class="line">address 192.168.31.14  # 设置静态ip地址</span><br><span class="line">netmask 255.255.255.0  # 子网掩码</span><br><span class="line">gateway 192.168.31.11  # 网关</span><br></pre></td></tr></table></figure><p>配置DNS，只需要修改 &#x2F;etc&#x2F;resolv.conf 文件即可，内容如下：(根据自己需求配置)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 223.5.5.5   # 设置首选dns</span><br><span class="line">nameserver 8.8.8.8   # 设置备用dns</span><br></pre></td></tr></table></figure><h4 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service networking stop  <span class="comment"># 停止网络服务</span></span><br><span class="line">sudo service networking start  <span class="comment"># 启动网络服务</span></span><br><span class="line">service  networking restart  <span class="comment"># 重启网络服务</span></span><br></pre></td></tr></table></figure><h3 id="Coent-OS网络配置"><a href="#Coent-OS网络配置" class="headerlink" title="Coent OS网络配置"></a>Coent OS网络配置</h3><h4 id="查看网卡信息-2"><a href="#查看网卡信息-2" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><h4 id="备份网卡信息-2"><a href="#备份网卡信息-2" class="headerlink" title="备份网卡信息"></a>备份网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> /etc/sysconfig/network-scripts/ifcfg-eth0  /etc/sysconfig/network-scripts/ifcfg-eth0.bak</span><br></pre></td></tr></table></figure><h4 id="修改网卡信息-1"><a href="#修改网卡信息-1" class="headerlink" title="修改网卡信息"></a>修改网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/23/pSx8ia8.png" alt="4"></p><p><img src="https://s1.ax1x.com/2023/02/23/pSx8PVf.png" alt="5"></p><h3 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h3><h4 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y openssl openssh-server</span><br></pre></td></tr></table></figure><h4 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h4><p>用vim打开配置文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/23/pSx8FIS.png" alt="6"></p><p>将上图的<strong>PermitRootLogin</strong>，<strong>RSAAuthentication</strong>，<strong>PubkeyAuthentication</strong>的设置打开。</p><h4 id="启动SSH服务："><a href="#启动SSH服务：" class="headerlink" title="启动SSH服务："></a>启动SSH服务：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start sshd.service</span><br></pre></td></tr></table></figure><h4 id="设置开机自启动ssh服务："><a href="#设置开机自启动ssh服务：" class="headerlink" title="设置开机自启动ssh服务："></a>设置开机自启动ssh服务：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ suao systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure><h4 id="设置文件夹-x2F-ssh的访问权限"><a href="#设置文件夹-x2F-ssh的访问权限" class="headerlink" title="设置文件夹~&#x2F;.ssh的访问权限"></a>设置文件夹~&#x2F;.ssh的访问权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ <span class="built_in">chmod</span> 700 .ssh                                                                                                </span><br><span class="line">$ <span class="built_in">chmod</span> 600 .ssh/*                                                                                              </span><br><span class="line">$ <span class="built_in">ls</span> -la .ssh                                                                                                   </span><br><span class="line">total 16</span><br><span class="line">drwx------. 2 root root   58 May 15 00:23 .</span><br><span class="line">dr-xr-x---. 8 root root 4096 May 15 00:26 ..</span><br><span class="line">-rw-------. 1 root root  403 May 15 00:22 authorized_keys</span><br><span class="line">-rw-------. 1 root root 1766 May 15 00:21 id_rsa</span><br><span class="line">-rw-------. 1 root root  403 May 15 00:21 id_rsa.pub</span><br></pre></td></tr></table></figure><p>authorized_key文件存储的是客户端的公共密钥。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派基本配置</title>
      <link href="/2023/01/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在第一行开头加一个<code>#</code>，把下面的内容拷贝到最后一行之后，如图中的效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/1.jpg" alt="1"></p><p>先按键盘上的<code>ctrl</code>+<code>o</code>，再按回车保存，再按<code>ctrl</code>+<code>x</code>退出nano编辑器回到命令行界面。再输入以下命令更新到清华大学镜像源最新的软件列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update </span><br></pre></td></tr></table></figure><h3 id="给pip换源"><a href="#给pip换源" class="headerlink" title="给pip换源"></a>给pip换源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir ~/.pip</span><br><span class="line">ls .pip</span><br><span class="line">sudo nano pip.conf</span><br></pre></td></tr></table></figure><p>在打开的文件中输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 10</span><br><span class="line">index-url =  http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">extra-index-url= http://pypi.douban.com/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=</span><br><span class="line">    mirrors.aliyun.com</span><br><span class="line">    pypi.douban.com</span><br></pre></td></tr></table></figure><p>先按键盘上的<code>ctrl</code>+<code>o</code>，再按回车保存，再按<code>ctrl</code>+<code>x</code>退出nano编辑器回到命令行界面。</p><h2 id="树莓派内部设置"><a href="#树莓派内部设置" class="headerlink" title="树莓派内部设置"></a>树莓派内部设置</h2><p>命令行界面输入命令，进入树莓派配置界面。用上下键和左右键切换光标位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/2.jpg" alt="2"></p><h3 id="第一行：Change-User-Password"><a href="#第一行：Change-User-Password" class="headerlink" title="第一行：Change User Password"></a>第一行：Change User Password</h3><p>按照里面的要求修改自己的密码即可。</p><h3 id="第四行：Localisation-Options"><a href="#第四行：Localisation-Options" class="headerlink" title="第四行：Localisation Options"></a>第四行：Localisation Options</h3><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/3.jpg" alt="3"></p><h4 id="第一行：Change-Locale-选择所在国家"><a href="#第一行：Change-Locale-选择所在国家" class="headerlink" title="第一行：Change Locale 选择所在国家"></a>第一行：Change Locale 选择所在国家</h4><p>这是一串很长的列表，到这个列表的最下面，让光标指在zh_CN.UTF-8 UTF-8前面，先按空格，再按回车，回到之前的界面再按回车。</p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/4.jpg" alt="4"></p><p>重新选择第四行Localisation Options</p><h4 id="第二行：Change-Timezone-选择所在时区"><a href="#第二行：Change-Timezone-选择所在时区" class="headerlink" title="第二行：Change Timezone 选择所在时区"></a>第二行：Change Timezone 选择所在时区</h4><p>选择Asia，再选择Shanghai</p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/5.jpg" alt="5"></p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/6.jpg" alt="6"></p><h4 id="第四行：Change-Wi-fi-Country-选择wifi国家"><a href="#第四行：Change-Wi-fi-Country-选择wifi国家" class="headerlink" title="第四行：Change Wi-fi Country 选择wifi国家"></a>第四行：Change Wi-fi Country 选择wifi国家</h4><p>选择CN China，回车</p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/7.jpg" alt="7"></p><h3 id="第五行：Interfacing-Options"><a href="#第五行：Interfacing-Options" class="headerlink" title="第五行：Interfacing Options"></a>第五行：Interfacing Options</h3><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/8.jpg" alt="8"></p><p>打开Camera、SSH、VNC、Serial、Remote GPIO</p><h3 id="第七行：Advanced-Options"><a href="#第七行：Advanced-Options" class="headerlink" title="第七行：Advanced Options"></a>第七行：Advanced Options</h3><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/9.jpg" alt="9"></p><ul><li><p>选择Expand Filesystem，将根目录扩展到这个SD卡，充分利用SD卡的存储空间</p></li><li><p>选择Overscan，在整个屏幕上显示</p></li><li><p>选择Audio，选择Force 3.5mm(‘headphone’ jack)，树莓派的声音会从耳机孔输出</p></li><li><p>选择Resolution，选择默认设置，自动根据显示屏调整分辨率</p></li><li><p>选择Pixel Doubling，增加桌面显示画质</p><p>选择Finish，会跳出对话框问是否重新启动，直接回车确定。</p></li></ul><h2 id="安装中文字体"><a href="#安装中文字体" class="headerlink" title="安装中文字体"></a>安装中文字体</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fonts-wqy-zenhei</span><br></pre></td></tr></table></figure><p>安装中文输入法fcitx及Google拼音输入法（大约需要五分钟）<br>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin<br>安装完毕，重启即可。ctrl+空格切换为中文输入法</p><p>在跳出的对话框中输入<code>y</code>和回车<code>↩</code>，确定下载安装，需要90MB存储空间。</p><p>VNC Viewer只能在你的电脑或手机与树莓派在同一个局域网下才能远程桌面，</p><p>如果你带着电脑和手机在全世界任何地方，只要连着网，打开teamviewer，就可以</p><p>安装teamviewer，只需要五行命令。在运行第二条命令的时候会显示很多依赖包没有安装，不要慌，第三条命令就是用来干这个的。</p><p>如果命令执行过程中跳出对话框，则输入<code>y</code>和回车<code>↩</code>，确定下载安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.teamviewer.com/download/linux/version_11x/teamviewer-host_armhf.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i teamviewer-host_armhf.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo apt-get install gdebi</span><br><span class="line"></span><br><span class="line">sudo gdebi teamviewer-host_armhf.deb</span><br></pre></td></tr></table></figure><p>在命令行中输入</p><p><code>teamviewer info</code>可以查看teamviewer当前版本</p><p>在跳出的对话框选择Accept License Agreement</p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/10.jpg" alt="10"></p><p>在树莓派桌面，右上角可以看到teamviewer的图标了，点击进入。再点击Grant easy access，登录你的teamviewer账户，设置连接密码。通过那一串数字（如图中的1112747434），就可以让全世界任意一台上网的电脑或手机远程桌面操控你的树莓派了。</p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/11.jpg" alt="11"></p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/12.jpg" alt="12"></p><p><img src="https://picbed.jess.win/img/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/13.jpg" alt="13"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node安装与配置</title>
      <link href="/2023/01/02/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/02/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><p>官网下载链接：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>根据自己需要的版本下载对应系统版本的安装包。本次已Windows11 64位为例。</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLgDf.png" alt="1"></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>全部默认安装就行<br><img src="https://s1.ax1x.com/2023/02/14/pSoLsgI.png" alt="2"><br><img src="https://s1.ax1x.com/2023/02/14/pSoLyvt.png" alt="3"><br><img src="https://s1.ax1x.com/2023/02/14/pSoLcKP.png" alt="4"><br><img src="https://s1.ax1x.com/2023/02/14/pSoLr8A.png" alt="5"><br><img src="https://s1.ax1x.com/2023/02/14/pSoL2b8.png" alt="6"><br><img src="https://s1.ax1x.com/2023/02/14/pSoLfUg.png" alt="7"></p><p>查看饰扣配置基本的环境变量<br><img src="https://s1.ax1x.com/2023/02/14/pSTYGKe.png" alt="8"></p><p>以管理员身份运行CMD查看是否安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSoLWVS.png" alt="9"></p><h2 id="配置Node环境变量"><a href="#配置Node环境变量" class="headerlink" title="配置Node环境变量"></a>配置Node环境变量</h2><p>找到Node安装路径，新建两个文件夹node_cache、node_global。</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLh5Q.png" alt="10"></p><p>以管理员身份运行CMD。输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;C:\Program Files\nodejs\node_global&quot;  # 全局路径</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;C:\Program Files\nodejs\node_cache&quot;  # 缓存路径</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSoLI8s.png" alt="11"></p><p>环境变量–用户变量–Path–更改npm默认路径，将C:\Users\Jess\AppData\Roaming\npm更改为C:\Program Files\nodejs\node_global</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLbrV.png" alt="12"></p><p>下一步需要在“C:\Program Files\nodejs\node_global”下面创建一个node_modules文件夹，但是需要自动生成。安装一个插件即可生成这个文件夹，以管理员运行CMD，输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSoL5Cj.png" alt="13"></p><p>安装完成后“C:\Program Files\nodejs\node_global”中会出现”node_modules”文件夹。</p><h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><p>修改用户变量中的Path</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLTvq.png" alt="14"></p><h3 id="修改系统变量"><a href="#修改系统变量" class="headerlink" title="修改系统变量"></a>修改系统变量</h3><p>新建一个系统变量如下：</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLo2n.png" alt="15"></p><p>修改系统变量中的Path</p><p><img src="https://s1.ax1x.com/2023/02/14/pSoLHK0.png" alt="16"></p><h3 id="测试是否配置成功"><a href="#测试是否配置成功" class="headerlink" title="测试是否配置成功"></a>测试是否配置成功</h3><p>这里我们下载一个vue插件测试一下是否可以安装成功。以管理员身份打开CMD，输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node # 进入node</span><br><span class="line">require(&#x27;vue&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/14/pSTYLI1.png" alt="17"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>修改环境变量应注意标点符号、字母大小写等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UbuntuServer系统安装</title>
      <link href="/2023/01/01/UbuntuServer%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
      <url>/2023/01/01/UbuntuServer%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>本次演示使用的镜像为：UbuntuServr22.04 LTS<br>官网下载地址：<br><a href="https://ubuntu.com/#download">https://ubuntu.com/#download</a><br>国内下载地址:<br><a href="https://cn.ubuntu.com/download">https://cn.ubuntu.com/download</a></p><h2 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h2><h3 id="1、加载虚拟光盘，准备好安装硬件配置"><a href="#1、加载虚拟光盘，准备好安装硬件配置" class="headerlink" title="1、加载虚拟光盘，准备好安装硬件配置"></a>1、加载虚拟光盘，准备好安装硬件配置</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofHRU.png" alt="1"></p><h3 id="2、语言设置默认English回车即可"><a href="#2、语言设置默认English回车即可" class="headerlink" title="2、语言设置默认English回车即可"></a>2、语言设置默认English回车即可</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSof7GT.png" alt="2"></p><h3 id="3、语言设置默认English回车"><a href="#3、语言设置默认English回车" class="headerlink" title="3、语言设置默认English回车"></a>3、语言设置默认English回车</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofII0.png" alt="3"></p><h3 id="4、选择最小化安装"><a href="#4、选择最小化安装" class="headerlink" title="4、选择最小化安装"></a>4、选择最小化安装</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSof5aq.png" alt="4"></p><h3 id="5、配置IP地址，我选择的是配置IPV4地址"><a href="#5、配置IP地址，我选择的是配置IPV4地址" class="headerlink" title="5、配置IP地址，我选择的是配置IPV4地址"></a>5、配置IP地址，我选择的是配置IPV4地址</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofTiV.png" alt="5"></p><h3 id="6、选择Manual进行手动配置"><a href="#6、选择Manual进行手动配置" class="headerlink" title="6、选择Manual进行手动配置"></a>6、选择Manual进行手动配置</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofbzF.png" alt="6"></p><p><img src="https://s1.ax1x.com/2023/02/14/pSofLM4.png" alt="7"></p><h3 id="7、代理配置，默认不填。直接回车"><a href="#7、代理配置，默认不填。直接回车" class="headerlink" title="7、代理配置，默认不填。直接回车"></a>7、代理配置，默认不填。直接回车</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofOsJ.png" alt="8"></p><h3 id="8、此处为配置atp源，因为我有科学上网的环境不需要更换至国内的atp源。"><a href="#8、此处为配置atp源，因为我有科学上网的环境不需要更换至国内的atp源。" class="headerlink" title="8、此处为配置atp源，因为我有科学上网的环境不需要更换至国内的atp源。"></a>8、此处为配置atp源，因为我有科学上网的环境不需要更换至国内的atp源。</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofvZR.png" alt="9"><br>此处为清华大学开源软件镜像站链接，可以挑选自己安装的Linux版本进行配置相对应的软件源。</p><h3 id="9、选择默认的vm分区即可"><a href="#9、选择默认的vm分区即可" class="headerlink" title="9、选择默认的vm分区即可"></a>9、选择默认的vm分区即可</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofXL9.png" alt="10"><br>默认不会分配所有的空间，需要手动分配所有空间<br><img src="https://s1.ax1x.com/2023/02/14/pSofxd1.png" alt="11"></p><h3 id="取消默认分区"><a href="#取消默认分区" class="headerlink" title="取消默认分区"></a>取消默认分区</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSofzIx.png" alt="12"></p><h3 id="删除默认分配的lvm，手动新建"><a href="#删除默认分配的lvm，手动新建" class="headerlink" title="删除默认分配的lvm，手动新建"></a>删除默认分配的lvm，手动新建</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSoh9JK.png" alt="13"></p><h3 id="创建创建新的lvm分区-x2F-根分区"><a href="#创建创建新的lvm分区-x2F-根分区" class="headerlink" title="创建创建新的lvm分区&#x2F;根分区"></a>创建创建新的lvm分区&#x2F;根分区</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSohPzD.png" alt="14"><br><img src="https://s1.ax1x.com/2023/02/14/pSohT0A.png" alt="15"></p><h3 id="创建-x2F-boot分区"><a href="#创建-x2F-boot分区" class="headerlink" title="创建&#x2F;boot分区"></a>创建&#x2F;boot分区</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSohpi6.png" alt="16"><br><img src="https://s1.ax1x.com/2023/02/14/pSohCRO.png" alt="17"></p><h3 id="此时分区创建完毕，点击continue"><a href="#此时分区创建完毕，点击continue" class="headerlink" title="此时分区创建完毕，点击continue"></a>此时分区创建完毕，点击continue</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSoh7TI.png" alt="18"></p><h3 id="10、配置主机名称与普通用户"><a href="#10、配置主机名称与普通用户" class="headerlink" title="10、配置主机名称与普通用户"></a>10、配置主机名称与普通用户</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSohomd.png" alt="19"></p><h3 id="11、选择安装SSH"><a href="#11、选择安装SSH" class="headerlink" title="11、选择安装SSH"></a>11、选择安装SSH</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSoh5OH.png" alt="20"></p><h3 id="12、开始安装系统，出现Reboot-Now说明系统安装完成"><a href="#12、开始安装系统，出现Reboot-Now说明系统安装完成" class="headerlink" title="12、开始安装系统，出现Reboot Now说明系统安装完成"></a>12、开始安装系统，出现Reboot Now说明系统安装完成</h3><p><img src="https://s1.ax1x.com/2023/02/14/pSoh46e.png" alt="21"></p><h2 id="简单的管理工具"><a href="#简单的管理工具" class="headerlink" title="简单的管理工具"></a>简单的管理工具</h2><h3 id="最后Ubuntu与CentOS7管理工具区别"><a href="#最后Ubuntu与CentOS7管理工具区别" class="headerlink" title="最后Ubuntu与CentOS7管理工具区别"></a>最后Ubuntu与CentOS7管理工具区别</h3><table><thead><tr><th align="center">操作内容</th><th align="center">CentOS6&#x2F;7</th><th align="center">Debian&#x2F;Ubuntu</th></tr></thead><tbody><tr><td align="center">软件包后缀</td><td align="center">*.rpm</td><td align="center">*.deb</td></tr><tr><td align="center">软件源配置文件</td><td align="center">&#x2F;etc&#x2F;yum.conf</td><td align="center">&#x2F;etc&#x2F;apt&#x2F;sources.list</td></tr><tr><td align="center">更新软件包列表</td><td align="center">yum makecache fast</td><td align="center">apt update</td></tr><tr><td align="center">从软件仓库安装软件</td><td align="center">yum install package</td><td align="center">apt install package</td></tr><tr><td align="center">安装本地软件包</td><td align="center">rpm -i pkg.rpm</td><td align="center">dpkg -i pkg.deb</td></tr><tr><td align="center">删除软件包</td><td align="center">yum remove package</td><td align="center">apt remove package</td></tr><tr><td align="center">获取某软件包的信息</td><td align="center">yum search package</td><td align="center">apt search package</td></tr></tbody></table><h3 id="Ubuntu更新系统apt资源"><a href="#Ubuntu更新系统apt资源" class="headerlink" title="Ubuntu更新系统apt资源"></a>Ubuntu更新系统apt资源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="Ubuntu系统与软件更新"><a href="#Ubuntu系统与软件更新" class="headerlink" title="Ubuntu系统与软件更新"></a>Ubuntu系统与软件更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装SSH</title>
      <link href="/2022/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85SSH/"/>
      <url>/2022/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85SSH/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSH 在树莓派上是默认关闭的，因此在你安装好全新的 Raspbian 后打开树莓派时，你需要启用它。</p></blockquote><h3 id="一、方法一：（图形界面）"><a href="#一、方法一：（图形界面）" class="headerlink" title="一、方法一：（图形界面）"></a>一、方法一：（图形界面）</h3><p>1、通过菜单进入树莓派的配置界面。</p><p><img src="https://s1.ax1x.com/2023/02/13/pSo8wY8.png" alt="1"></p><p>2、进入接口（interfaces）标签，启动 SSH并重启你的树莓派</p><p><img src="https://s1.ax1x.com/2023/02/13/pSo80fS.png" alt="2"></p><h3 id="方法二：（命令行）"><a href="#方法二：（命令行）" class="headerlink" title="方法二：（命令行）"></a>方法二：（命令行）</h3><p>1、打开SSH功能(图形化界面系统)：<br>2、打开终端敲入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo raspi-config</span><br></pre></td></tr></table></figure><p>3、选择：Interfacing Options<br>4、找到SSH(对其进行enable操作)</p><h3 id="方法三：（命令行）"><a href="#方法三：（命令行）" class="headerlink" title="方法三：（命令行）"></a>方法三：（命令行）</h3><p>安装openssh-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>卸载openssh-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove openssh-server</span><br></pre></td></tr></table></figure><p>判断SSH是否运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ax</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSo8dFf.png" alt="3"></p><h3 id="树莓派查看CPU状态"><a href="#树莓派查看CPU状态" class="headerlink" title="树莓派查看CPU状态"></a>树莓派查看CPU状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vcgencmd measure_temp  <span class="comment"># 查看温度</span></span><br><span class="line"></span><br><span class="line">$ vcgencmd measure_volts core  <span class="comment"># 查看核心电压</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWRT中安装软件</title>
      <link href="/2022/12/30/OpenWRT%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/12/30/OpenWRT%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>1、更新OpenWRT软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure><p>2、查询可安装的软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg list</span><br></pre></td></tr></table></figure><p>3、搜索列表里是否有此插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg list|grep 插件名字</span><br></pre></td></tr></table></figure><p>4、在线安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install 插件名字</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1、尽量安装英文版本的插件，中文版本有时会出现乱码</p><p>2、需要使用梯子</p>]]></content>
      
      
      
        <tags>
            
            <tag> OpenWRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派远程卡顿问题</title>
      <link href="/2022/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9C%E7%A8%8B%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9C%E7%A8%8B%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>树莓派内存要用于Broadcom BCM2837上的CPU和GPU，因此要合理分配内存。</p><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><p>1、系统设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo raspi-config</span><br></pre></td></tr></table></figure><p>2、性能选项：Performance Options</p><p>3、GPU内存：GPU Memory</p><p>4、分配合理的GPU显存(单位M),建议512M左右就不会卡顿</p><p>5、保存–退出</p><p>6、重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESXI无法打开虚拟机电源，对象类型需要托管的IO</title>
      <link href="/2022/12/27/ESXI%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%94%B5%E6%BA%90%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E6%89%98%E7%AE%A1%E7%9A%84IO/"/>
      <url>/2022/12/27/ESXI%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%94%B5%E6%BA%90%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E6%89%98%E7%AE%A1%E7%9A%84IO/</url>
      
        <content type="html"><![CDATA[<p>如果你的ESXI里面的虚拟机不能开机，提示无法打开虚拟机电源， 对象类型需要托管的I&#x2F;O，那么按照以下方法操作即可解决。</p><h2 id="一、开启ESXI的SSH功能"><a href="#一、开启ESXI的SSH功能" class="headerlink" title="一、开启ESXI的SSH功能"></a>一、开启ESXI的SSH功能</h2><p><img src="https://s1.ax1x.com/2023/02/13/pSo1fH0.png" alt="1"></p><h2 id="二、点击事务提示找到路径"><a href="#二、点击事务提示找到路径" class="headerlink" title="二、点击事务提示找到路径"></a>二、点击事务提示找到路径</h2><p><img src="https://s1.ax1x.com/2023/02/13/pSo1WBq.png" alt="2"><br><img src="https://s1.ax1x.com/2023/02/13/pSo14EV.png" alt="3"></p><h2 id="三、登陆SSH输入命令"><a href="#三、登陆SSH输入命令" class="headerlink" title="三、登陆SSH输入命令"></a>三、登陆SSH输入命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vmkfstools -x check 路径</span></span><br></pre></td></tr></table></figure><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vmkfstools -x check /vmfs/volumes/5d582a2a-40abb997-8ffd-e43a6e0448e3/LEDE/openwrt-x86-64-combined-squashfs.vmdk (里面的地址修改为你错误信息里面的地址)</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSo1gjs.png" alt="4"></p><p>如果提示“Disk needs repair.”在输入以下命令修复即可重新开启:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vmkfstools -x repair 路径</span></span><br></pre></td></tr></table></figure><h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmkfstools -x repair /vmfs/volumes/5d582a2a-40abb997-8ffd-e43a6e0448e3/LEDE/openwrt-x86-64-combined-squashfs.vmdk (里面的地址修改为你错误信息里面的地址)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSo1Run.png" alt="5"></p><p>完成后后提示“Disk was successfully repaired.”</p>]]></content>
      
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令整理</title>
      <link href="/2022/11/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2022/11/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="最常用命令"><a href="#最常用命令" class="headerlink" title="最常用命令"></a>最常用命令</h3><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">对应英文</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">ls</td><td align="center">list</td><td align="center">查看当前文件夹下的内容</td></tr><tr><td align="center">02</td><td align="center">pwd</td><td align="center">Print work dirk diretory</td><td align="center">查看当前所在文件夹</td></tr><tr><td align="center">01</td><td align="center">cd</td><td align="center">Change diretory</td><td align="center">切换文件夹</td></tr><tr><td align="center">02</td><td align="center">touch</td><td align="center">touch</td><td align="center">如果文件不存在，新建文件</td></tr><tr><td align="center">01</td><td align="center">mkdir</td><td align="center">Make diretory</td><td align="center">创建目录</td></tr><tr><td align="center">02</td><td align="center">rm</td><td align="center">remove</td><td align="center">删除指定的文件名</td></tr><tr><td align="center">01</td><td align="center">clear</td><td align="center">单元格</td><td align="center">清屏</td></tr></tbody></table><h4 id="cd用法"><a href="#cd用法" class="headerlink" title="cd用法"></a>cd用法</h4><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ls -a</td><td align="center">显示所有目录和文件包括隐藏文件</td></tr><tr><td align="center">ls -i</td><td align="center">以列表形式显示</td></tr><tr><td align="center">ls -l -h</td><td align="center">以列表形式显示具体显示文件大小</td></tr><tr><td align="center">ls -lha</td><td align="center">列出所有目录和文件包括隐藏文件</td></tr><tr><td align="center">ls</td><td align="center">通配符的使用 *任意字符 ？一个字符  []  [abc]  [a-f]</td></tr></tbody></table><h4 id="cd用法-1"><a href="#cd用法-1" class="headerlink" title="cd用法"></a>cd用法</h4><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">cd</td><td align="center">切换到当前用户的主目录（&#x2F;home&#x2F;用户目录）</td></tr><tr><td align="center">cd~</td><td align="center">切换到当前用户的主目录（&#x2F;home&#x2F;用户目录）</td></tr><tr><td align="center">cd .</td><td align="center">保持在当前用户主目录不变（.表示当前目录）</td></tr><tr><td align="center">cd ..</td><td align="center">切换到上级目录</td></tr><tr><td align="center">cd -</td><td align="center">可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h4 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p a1/b1/c1/d1   <span class="comment">#递归创建文件夹</span></span><br></pre></td></tr></table></figure><h4 id="rm删除命令"><a href="#rm删除命令" class="headerlink" title="rm删除命令"></a>rm删除命令</h4><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">rm -f</td><td align="center">强制删除</td></tr><tr><td align="center">rm -r</td><td align="center">删除文件夹时必须使用此-r</td></tr></tbody></table><h4 id="cp文件的复制"><a href="#cp文件的复制" class="headerlink" title="cp文件的复制"></a>cp文件的复制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [源文件] [目标文件]</span><br><span class="line"><span class="built_in">cp</span> -r [源文件夹] [目标文件夹]</span><br></pre></td></tr></table></figure><h4 id="mv移动文件-x2F-文件夹或重命名"><a href="#mv移动文件-x2F-文件夹或重命名" class="headerlink" title="mv移动文件&#x2F;文件夹或重命名"></a>mv移动文件&#x2F;文件夹或重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> -i [源文件] [目标文件]</span><br></pre></td></tr></table></figure><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [文件名]  <span class="comment"># 查看文件内容，创建文件，文件合并，追加文件内容等功能</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">cat -b</td><td align="center">对非空输出行编号(命令nl 的效果与cat -b相同)</td></tr><tr><td align="center">cat -n</td><td align="center">对输出的所有行编号</td></tr></tbody></table><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more [文件名]  <span class="comment"># 分屏显示文件内容</span></span><br></pre></td></tr></table></figure><pre><code>内部操作：</code></pre><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">显示手册的下一屏</td></tr><tr><td align="center">Enter</td><td align="center">一次滚动一行</td></tr><tr><td align="center">b</td><td align="center">回滚一屏</td></tr><tr><td align="center">f</td><td align="center">前滚一屏</td></tr><tr><td align="center">q</td><td align="center">退出</td></tr><tr><td align="center">&#x2F;word</td><td align="center">搜索word字符串</td></tr></tbody></table><h4 id="qrep查看文件"><a href="#qrep查看文件" class="headerlink" title="qrep查看文件"></a>qrep查看文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qrep [文件名]  <span class="comment"># 搜索文本文件内容</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">grep -n</td><td align="center">显示匹配的行及行号</td></tr><tr><td align="center">grep -v</td><td align="center">显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td align="center">grep -i</td><td align="center">忽略大小写</td></tr><tr><td align="center">grep ^a</td><td align="center">行首，搜索以a开头的行</td></tr><tr><td align="center">grep ke$</td><td align="center">行尾，搜索以ke结束的</td></tr></tbody></table><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [文字内容]  <span class="comment"># 在终端中显示文字内容，常和重定向连用</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;holle world&quot;</span> &gt; a.txt  <span class="comment"># 表示新建文件a.txt并写入“holle world”</span></span><br></pre></td></tr></table></figure><h4 id="重定向-gt-和-gt-gt"><a href="#重定向-gt-和-gt-gt" class="headerlink" title="重定向&gt;和&gt;&gt;"></a>重定向&gt;和&gt;&gt;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;: 表示输出，会覆盖文件原有内容</span><br><span class="line">&gt;&gt;: 表示追加，会将内容追加到已有文件的末尾</span><br></pre></td></tr></table></figure><p>例:</p><p>tree &gt; a.txt  # 把列出的树结构输出（会覆盖原文件）到a.txt文件中（非常适合把终端中的信息导出）<br>tree &gt;&gt; a.txt   #把列出的树结构追加到a.txt文件中</p><h4 id="管道"><a href="#管道" class="headerlink" title="| 管道"></a>| 管道</h4><p>管道 | ：一个命令的输出可以通过  管道   作为另一个命令的输入</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lha | more  <span class="comment"># 表示分屏显示ls查询到的所有文件信息包括隐藏文件以列表显示</span></span><br><span class="line"><span class="built_in">ls</span> -lha | grep <span class="keyword">do</span>  <span class="comment"># 表示ls查询含有do的所有文件以列表显示</span></span><br></pre></td></tr></table></figure><h3 id="远程命令"><a href="#远程命令" class="headerlink" title="远程命令"></a>远程命令</h3><h4 id="关机-x2F-重启"><a href="#关机-x2F-重启" class="headerlink" title="关机&#x2F;重启"></a>关机&#x2F;重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown  <span class="comment"># 一分钟后关闭电脑加now立刻关机</span></span><br><span class="line">shutdown 20:30  <span class="comment"># 表示指定时间今晚20：30关机</span></span><br><span class="line">shutdown -r  <span class="comment"># 重启电脑加now 立刻重启</span></span><br></pre></td></tr></table></figure><h3 id="查看网卡-x2F-配置网络"><a href="#查看网卡-x2F-配置网络" class="headerlink" title="查看网卡&#x2F;配置网络"></a>查看网卡&#x2F;配置网络</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>查看&#x2F;配置网卡信息</p><p>例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | qrep inet  <span class="comment"># 使用&#x27;管道&#x27;通过grep查询含inet 的信息即网卡对应的IP地址</span></span><br></pre></td></tr></table></figure><p>补充：127.0.0.1 被称为本地回环&#x2F;环回地址，一般用来测试本机网卡是否正常（ping 127.0.0.1即检测本地网卡）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [IP地址]  <span class="comment"># 检测到目标地址的连接是否正常</span></span><br></pre></td></tr></table></figure><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [-p 端口号] 用户名@IP地址  <span class="comment"># [-p 端口号]端口号默认为22可以不填</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh  -p 22 pi@192.168.1.1</span><br></pre></td></tr></table></figure><h4 id="ssh免密码远程登录步骤"><a href="#ssh免密码远程登录步骤" class="headerlink" title="ssh免密码远程登录步骤"></a>ssh免密码远程登录步骤</h4><p>配置公钥 ：执行ssh-keygen 即可生成ssh钥匙，一路回车即可<br>上传公钥到服务器：执行：ssh-copy-id [-p port] 用户名@IP地址</p><h4 id="配置ssh用户别名"><a href="#配置ssh用户别名" class="headerlink" title="配置ssh用户别名"></a>配置ssh用户别名</h4><p>登录用例如：ssh pi 即可连接，设置后可用于scp 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh  <span class="comment"># 第一步</span></span><br><span class="line"><span class="built_in">touch</span> config  <span class="comment"># 第二步</span></span><br><span class="line">sudo nano ~/.ssh/config  <span class="comment"># 第三步</span></span><br><span class="line">录入以下信息：</span><br><span class="line">Host pi  <span class="comment">#用于简称的名字</span></span><br><span class="line">Hostname 192.168.2.xxx  <span class="comment"># IP地址</span></span><br><span class="line">User pi  <span class="comment"># 用户名</span></span><br><span class="line">Port 22  <span class="comment"># 登录端口</span></span><br></pre></td></tr></table></figure><h4 id="scp-secure-copy-远程拷贝文件"><a href="#scp-secure-copy-远程拷贝文件" class="headerlink" title="scp(secure copy) 远程拷贝文件"></a>scp(secure copy) 远程拷贝文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [-P 端口号] [A路径文件] 用户名@IP地址:[B路径文件]  <span class="comment"># 把A复制到远程主机B中</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地目录下的 a.txt 文件 复制到 远程  家目录下的 Desktop/a.txt</span></span><br><span class="line">scp -P 22 a.txt pi@192.168.2.xxx:Desktop/a.txt </span><br><span class="line"><span class="comment"># 把本远程录 家目录下的 Desktop/a.txt文件 复制 本地目录下的 a.txt</span></span><br><span class="line">scp -P 22 pi@192.168.2.xxx:Desktop/a.txt a.txt</span><br><span class="line"><span class="comment"># 注意：要复制文件夹需要加 -r 参数</span></span><br><span class="line">scp -P 22 -r 文件名 pi@192.168.2.xxx:Desktop/文件名 </span><br></pre></td></tr></table></figure><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>chmod: 可以修改用户&#x2F;组对文件&#x2F;目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +/-rwx ]文件名/目录名]  <span class="comment"># 增加/减权限r读w写x执行（执行格式为./文件名）</span></span><br><span class="line"><span class="built_in">chmod</span> -R 755 [文件名/目录名]  <span class="comment"># 递归修改文件权限（三个数字分别对应 拥有者/组/其他用户）</span></span><br></pre></td></tr></table></figure><h4 id="创建-x2F-删除组"><a href="#创建-x2F-删除组" class="headerlink" title="创建&#x2F;删除组"></a>创建&#x2F;删除组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd [组名]  <span class="comment"># 添加组</span></span><br><span class="line">groupdel [组名]  <span class="comment"># 删除组</span></span><br><span class="line"><span class="built_in">cat</span> /etc/group  <span class="comment"># 确认组信息</span></span><br><span class="line"><span class="built_in">chgrp</span> -R 组名 [文件/目录名]  <span class="comment"># 递归修改文件/目录的所属组</span></span><br></pre></td></tr></table></figure><h4 id="建用户-x2F-设密码-x2F-删用户"><a href="#建用户-x2F-设密码-x2F-删用户" class="headerlink" title="建用户&#x2F;设密码&#x2F;删用户"></a>建用户&#x2F;设密码&#x2F;删用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usedadd -m -g [组] [新建的用户名]  <span class="comment"># 创建用户</span></span><br><span class="line">passwd [用户名]  <span class="comment"># 设置密码</span></span><br><span class="line">userdel -f [用户名]  <span class="comment"># 删除用户</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | grep [用户名]  <span class="comment"># 确认用户信息</span></span><br></pre></td></tr></table></figure><h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">id用户名</td><td align="center">查看用户UID和GID信息</td></tr><tr><td align="center">02</td><td align="center">who</td><td align="center">查看当前所有登录用户信息</td></tr><tr><td align="center">03</td><td align="center">whoami</td><td align="center">查看当前登录用户的账户名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /bin/bash [用户名]  <span class="comment"># 修改用户登录shell</span></span><br></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>which:可以用来查看执行命令所在的位置(重要)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line">/etc/passwd  <span class="comment"># 是用于保存用户信息的文件</span></span><br><span class="line">/usr/bin/passwd  <span class="comment"># 是用于修改用户密码的程序</span></span><br></pre></td></tr></table></figure><h3 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h3><h4 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h4><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">date</td><td align="center">查看系统时间</td></tr><tr><td align="center">02</td><td align="center">cal</td><td align="center">calendar 查看日历，-y 可以查看一年的日历</td></tr></tbody></table><h4 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">df -h</td><td align="center">disk free 显示磁盘剩余空间</td></tr><tr><td align="center">02</td><td align="center">du -h[目录名]</td><td align="center">disk usage 显示目录下的文件大小</td></tr></tbody></table><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">ps sux</td><td align="center">process status 查看进程的详细状况</td></tr><tr><td align="center">02</td><td align="center">top</td><td align="center">动态显示运行中的进程并且排序</td></tr><tr><td align="center">03</td><td align="center">kill [-9] 进程代号</td><td align="center">终止指定代号的进程，-9表示强行终止</td></tr></tbody></table><h3 id="其他命令-1"><a href="#其他命令-1" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Find [路径]  -name  “*.py<span class="string">&quot;  # 查找指定路径下扩展名是.py的文件，包括子目录</span></span><br></pre></td></tr></table></figure><p>1、如果省略路径，表示在当前文件夹下查找。<br>2、通配字符在使用find命令时同样可用。</p><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>类似win下的快捷方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s [被连接的源文件] (使用绝对路径) [链接文件名称] (自定义)</span><br></pre></td></tr></table></figure><h4 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h4><p>win常用rar，Mac常用zip，Linux常用tar.gz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf [打包文件.tar] [被打包的文件/路径]  <span class="comment"># 打包文件</span></span><br><span class="line">tar -xvf [打包文件.tar]  <span class="comment"># 解包文件</span></span><br></pre></td></tr></table></figure><p>gzip是压缩&#x2F;解压缩’-z’实现（bzip2类同），配合tar可以实现打包压缩&#x2F;解包解压缩常见格式xxx.tar.gz（xxx.tar.bz2）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf [打包文件.tar.gz] [被压缩的文件/路径...]  <span class="comment"># 打包压缩文件（bzip2用j）</span></span><br><span class="line">tar -zxvf [打包文件.tar.gz]  <span class="comment"># 解包解压缩文件（bzip2用j）</span></span><br><span class="line">tar -zxvf [打包文件.tar.gz] -C 目标路径  <span class="comment"># 解包解压缩到目标路径（bzip2用j）</span></span><br></pre></td></tr></table></figure><h4 id="软件安装-x2F-卸载"><a href="#软件安装-x2F-卸载" class="headerlink" title="软件安装&#x2F;卸载"></a>软件安装&#x2F;卸载</h4><p>Ubuntu与CentOS7管理工具区别</p><table><thead><tr><th align="center">操作内容</th><th align="center">CentOS6&#x2F;7</th><th align="center">Debian&#x2F;Ubuntu</th></tr></thead><tbody><tr><td align="center">软件包后缀</td><td align="center">*.rpm</td><td align="center">*.deb</td></tr><tr><td align="center">软件源配置文件</td><td align="center">&#x2F;etc&#x2F;yum.conf</td><td align="center">&#x2F;etc&#x2F;apt&#x2F;sources.list</td></tr><tr><td align="center">更新软件包列表</td><td align="center">yum makecache fast</td><td align="center">apt update</td></tr><tr><td align="center">从软件仓库安装软件</td><td align="center">yum install package</td><td align="center">apt install package</td></tr><tr><td align="center">安装本地软件包</td><td align="center">rpm -i pkg.rpm</td><td align="center">dpkg -i pkg.deb</td></tr><tr><td align="center">删除软件包</td><td align="center">yum remove package</td><td align="center">apt remove package</td></tr><tr><td align="center">获取某软件包的信息</td><td align="center">yum search package</td><td align="center">apt search package</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/02/13/test/"/>
      <url>/2021/02/13/test/</url>
      
        <content type="html"><![CDATA[<h2 id="测试音乐插件"><a href="#测试音乐插件" class="headerlink" title="测试音乐插件"></a>测试音乐插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;8184306543&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-listFolded=&quot;false&quot; data-order=&quot;random&quot; data-lrctype=&quot;1&quot; data-preload=&quot;none&quot; data-autoplay=&quot;true&quot; muted&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;8184306543&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8184306543" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
